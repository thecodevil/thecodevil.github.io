<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Spring | YJD's blog]]></title>
  <link href="http://youngjd.com/blog/categories/spring/atom.xml" rel="self"/>
  <link href="http://youngjd.com/"/>
  <updated>2017-01-24T03:19:04+08:00</updated>
  <id>http://youngjd.com/</id>
  <author>
    <name><![CDATA[YJD]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring_message_converter]]></title>
    <link href="http://youngjd.com/blog/2014/07/27/spring-message-converter/"/>
    <updated>2014-07-27T23:21:19+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/27/spring-message-converter</id>
    <content type="html"><![CDATA[<blockquote><p>与其说星巴克是在卖咖啡，不如说是在卖预先定制好的体验。如果考虑星巴克顾客实际消费的产品，就会发现咖啡其实并不是关键产品。实际上，星巴克希望自己成为你的另一个家。星巴克在其2004年的年报中解释道，公司的目标是成为人们除了家庭和工作场所之外的第三个场所，让人在其中感到舒适并保持忠诚。&mdash; <a href="http://book.douban.com/subject/19934344/">《交互设计沉思录》</a></p></blockquote>

<!-- more -->


<hr />

<p>工作的时候有个同事提出了这样一个疑问。
```xml</p>

<!-- 省略了namespace -->


<p><beans></p>

<pre><code>&lt;mvc:annotation-driven/&gt;
</code></pre>

<p></beans>
<code>
</code>java
@Controller
@RequestMapping(&ldquo;/&rdquo;)
public class HelloController {</p>

<pre><code>@RequestMapping(method = RequestMethod.GET)
@ResponseBody
public JsonResult printWelcome() {
    return new JsonResult(1001, "test").putData("name", "imyoung");
}
</code></pre>

<p>}
<code>
为什么这么简单的配置，spring就能够识别到你返回的是一个Json，从配置里压根就看不到任何头绪。我头一蒙，原来自己还真没有考虑过这个问题，所以就去捣腾了一下。我还记得以前spring的COC(convention over configuration)还没有成风潮，那时候配置这个的时候，我翻阅了一下资料，有两行配置大概是这个样子的。
</code>xml
<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" />
<code>
查看一下RequestMappingHandlerAdapter的源码
</code>java
public RequestMappingHandlerAdapter() {</p>

<pre><code>this.messageConverters.add(new ByteArrayHttpMessageConverter());
this.messageConverters.add(stringHttpMessageConverter);
this.messageConverters.add(new SourceHttpMessageConverter&lt;Source&gt;());
this.messageConverters.add(new AllEncompassingFormHttpMessageConverter());
</code></pre>

<p>}
<code>
按照这种配置，RequestMappingHandlerAdapter就只是注册了4个信息转换器，清晰的看到，这里面并没有我们熟悉的mappingJacksonHttpMessageConverter。所以我们以前配置这个的时候，还会加上mappingJacksonHttpMessageConverter的bean注入。
</code>java
<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"></p>

<pre><code>&lt;property name="messageConverters"&gt;
    &lt;list&gt;
        &lt;ref bean="mappingJacksonHttpMessageConverter"/&gt;
    &lt;/list&gt;
&lt;/property&gt;
</code></pre>

<p></bean>
<code>
这个配置方式就是以前常看到的一种比较传统的配置方式。随着spring的发展，spring越来越重视这种约定大于配置的能够减少很多代码量的风格。就会有了文章开头的那种简洁的配置
</code>xml</p>

<!-- 这个配置其实还包含了很多东西,我这里写的只是其中一小项 -->


<p>&lt;mvc:annotation-driven/>
<code>
假如我们在配置文件里面使用了这种配置方式，来看看spring大概做了些什么。
</code>java
 */
public class MvcNamespaceHandler extends NamespaceHandlerSupport {</p>

<pre><code>@Override
public void init() {
    registerBeanDefinitionParser("annotation-driven", new AnnotationDrivenBeanDefinitionParser());
    registerBeanDefinitionParser("default-servlet-handler", new DefaultServletHandlerBeanDefinitionParser());
    registerBeanDefinitionParser("interceptors", new InterceptorsBeanDefinitionParser());
    registerBeanDefinitionParser("resources", new ResourcesBeanDefinitionParser());
    registerBeanDefinitionParser("view-controller", new ViewControllerBeanDefinitionParser());
}
</code></pre>

<p>}
<code>
在这个类里面，init方法里面的第一行就是注册一个bean的对于annotation-driven这个定义的解释器，再来看看解释器的几个方法
</code>java
//我抽取了我们关注的代码
class AnnotationDrivenBeanDefinitionParser implements BeanDefinitionParser {</p>

<pre><code>public BeanDefinition parse(Element element, ParserContext parserContext) {
    // ...
    ManagedList&lt;?&gt; messageConverters = getMessageConverters(element, source, parserContext);
    // ...
    handlerAdapterDef.getPropertyValues().add("messageConverters", messageConverters);
}

private ManagedList&lt;?&gt; getMessageConverters(Element element, Object source, ParserContext parserContext) {
    // ...
    if (jackson2Present) {
        messageConverters.add(createConverterDefinition(MappingJackson2HttpMessageConverter.class, source));
    }
    // ...
}
</code></pre>

<p>}
<code>
看到这里，我们似乎看到一些些苗头了。在getMessageConverters方法里，它会判断是否**jackson2Present(全局boolean常量)**，如果是，则会默认地把MappingJackson2HttpMessageConverter添加到messageConverters列表中。而MappingJackson2HttpMessageConverter就会用到jackson包去做解释json的工作了。所以现在关键就是看看**jackson2Present**到底是什么东东。
</code>java
private static final boolean jackson2Present =</p>

<pre><code>        ClassUtils.isPresent("com.fasterxml.jackson.databind.ObjectMapper", AnnotationDrivenBeanDefinitionParser.class.getClassLoader()) &amp;&amp;
                ClassUtils.isPresent("com.fasterxml.jackson.core.JsonGenerator", AnnotationDrivenBeanDefinitionParser.class.getClassLoader());
</code></pre>

<p><code>
看到这行代码，应该就会有种"原来如此"的感觉了。它是通过判断类加载器有没有加载到与jackson相关的依赖包来决定是否把MappingJackson2HttpMessageConverter添加到转换器队列中的。接下来，我们再稍微看看它是如何写信息的。
</code>java
public abstract class AbstractMessageConverterMethodProcessor extends AbstractMessageConverterMethodArgumentResolver implements HandlerMethodReturnValueHandler {</p>

<pre><code>protected &lt;T&gt; void writeWithMessageConverters(T returnValue, MethodParameter returnType, ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) throws IOException, HttpMediaTypeNotAcceptableException {

    // ...
    List&lt;MediaType&gt; requestedMediaTypes = getAcceptableMediaTypes(servletRequest);
    List&lt;MediaType&gt; producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass);
    // ...
    if (selectedMediaType != null) {
        selectedMediaType = selectedMediaType.removeQualityValue();
        for (HttpMessageConverter&lt;?&gt; messageConverter : this.messageConverters) {
            if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {
                ((HttpMessageConverter&lt;T&gt;) messageConverter).write(returnValue, selectedMediaType, outputMessage);
                if (logger.isDebugEnabled()) {
                    logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +
                            messageConverter + "]");
                }
                return;
            }
        }
    }
    // ...
}
</code></pre>

<p>}     <br/>
<code>
这里我只是简单地带过一下(因为我也没有太深入地去追踪到里面)。这个方法其实就是把信息转换器列表的每一个信息转换器与MediaType做一个匹配，匹配上了就用匹配的信息转换器来写返回信息。开始的时候，已经默认地带上了一些requestedMediaTypes了。
</code>java
text/html
image/gif
image/jpeg
<em>/</em>;q=.2
<code>
这里主要看的是最后一个，wildcard（通配符形式）的。再看看producibleMediaTypes，就是要产出的mediaType是怎么生成的。
</code>java
protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class&lt;?> returnValueClass) {</p>

<pre><code>// ...
List&lt;MediaType&gt; result = new ArrayList&lt;MediaType&gt;();
for (HttpMessageConverter&lt;?&gt; converter : messageConverters) {
    if (converter.canWrite(returnValueClass, null)) {
        result.addAll(converter.getSupportedMediaTypes());
    }
}
// ...
</code></pre>

<p>}
<code>
它主要是通过判断你的返回值的类型去作判断的。我这里的例子用的是下面这个返回类
</code>java
public class JsonResult {</p>

<pre><code>private int code;
private String msg;
</code></pre>

<p>}
```
spring会用一系列的方法去判断当前这个converter是否能以返回值的类型来正确输出(校验很多，没细看，大家可以去研究一下，反正大概就是这个样子了)。如果可以就把这个转换器的自身的SupportedMediaTypes加入到producibleMediaTypes中。后面还会再循环判断一次，但后面的判断是，一旦遇到了合适的转换器就会使用它来写返回信息。假如后面还有与producibleMediaTypes匹配的converter，就被忽略了(这里会有一个简单的默认排序和优先规则在这里)。</p>

<p>时间仓促，讲得比较粗略，这篇文章以后还会继续完善。希望文章对大家有所帮助。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-webflow]]></title>
    <link href="http://youngjd.com/blog/2014/07/15/spring-webflow/"/>
    <updated>2014-07-15T13:31:52+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/15/spring-webflow</id>
    <content type="html"><![CDATA[<blockquote><p>通过判例可以迅速灵活地反映社会发展对法律调整提出的不同要求，及时确立合乎社会需要的法律规范。成文法考虑的是立法时的社会价值标准，而不是案件发生时的社会价值标准，因此，只要法律没有改变，不管现实的价值标准同立法时的价值标准发生怎样的冲突，都只能依照法律的规定处理案件。<br/>
&mdash;&mdash; <a href="http://book.douban.com/subject/1391975/">《普通法与自由主义理论:柯克霍布斯及美国宪政主义之诸源头》</a></p></blockquote>

<!-- more -->


<p>这篇博客先从宏观上认识spring-webflow。主要了解如何定义一个简单的流程。</p>

<hr />

<br>


<h3>元素</h3>

<h4>1. flow</h4>

<p>流程节点，是一个流程中的根节点元素，作为整个流程的输入，流程的所有状态都要定义在这个节点的内部。
```xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;flow xmlns=&ldquo;<a href="http://www.springframework.org/schema/webflow">http://www.springframework.org/schema/webflow</a>&rdquo;</p>

<pre><code>  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/webflow
                      http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd"&gt;
</code></pre>

<p></flow>
```</p>

<h4>2. view-state</h4>

<p>视图状态节点，用于定义流程中渲染页面的一个步骤。一般约定一个视图状态的id映射实际页面文件的id(文件名)
<code>xml
&lt;view-state id="enterBookingDetails" /&gt;
</code></p>

<h4>3. transition</h4>

<p>状态转换节点，用于处理发生在状态内的事件。transitions会驱动页面的导航。
```xml
&lt;view-state id=&ldquo;enterBookingDetails&rdquo;></p>

<pre><code>  &lt;!-- 当接收到submit事件后，流程就会从enterBookingDetails状态跳转到reviewBooking状态 --&gt;
&lt;transition on="submit" to="reviewBooking" /&gt;
</code></pre>

<p>&lt;/view-state>
```</p>

<h4>4. end-state</h4>

<p>结束状态节点，作为一个流程的输出。当流程转换到end-state，则会终止流程并返回输出。
<code>xml
&lt;end-state id="bookingCancelled" /&gt;
</code></p>

<hr />

<br>


<p>参考链接</p>

<ul>
<li><a href="http://docs.spring.io/spring-webflow/docs/2.4.0.RELEASE/reference/html/defining-flows.html">spring-webflow</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
