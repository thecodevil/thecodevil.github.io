<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ibatis | battousai's blog]]></title>
  <link href="http://youngjd.com/blog/categories/ibatis/atom.xml" rel="self"/>
  <link href="http://youngjd.com/"/>
  <updated>2016-06-25T12:01:36+08:00</updated>
  <id>http://youngjd.com/</id>
  <author>
    <name><![CDATA[battousai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ibatis_faq]]></title>
    <link href="http://youngjd.com/blog/2014/07/25/ibatis-faq/"/>
    <updated>2014-07-25T13:04:05+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/25/ibatis-faq</id>
    <content type="html"><![CDATA[<blockquote><p>怎样表述一个命题才算是科学的？按照证伪派，它必须有可能被证明是错误的。
比如“所有的乌鸦都是黑的”，那么你只要找到一只不是黑色的乌鸦，就可以证明这
个命题的错误，因此这个命题没有问题。相反，如果非要“证实”才接受这个论断的
话，那可就困难了，而且实际上是不可能的！除非你把所有的乌鸦都抓来看过，但你
又怎么能知道你已经抓尽了天下所有的乌鸦呢？ &mdash; <a href="http://book.douban.com/subject/1467022/">《上帝掷骰子吗》</a></p></blockquote>

<!-- more -->


<hr />

<br>


<h2>ibatis中#与$的区别</h2>

<p>案例
```java
/<strong>
* Spring Controller
* 访问的url &ndash;> <a href="http://localhost:8080/promotions?start=1&amp;limit=0">http://localhost:8080/promotions?start=1&amp;limit=0</a>
</strong>/
@RequestMapping(method = RequestMethod.GET)
public JsonResult list(@RequestParam Map&lt;String, Object> params) {</p>

<pre><code>List&lt;Promotion&gt; promotions = promotionMapper.list(params);
// remaining code here
</code></pre>

<p>}</p>

<p>/<strong>
* Mapper接口
</strong>/
public interface PromotionMapper {</p>

<pre><code>List&lt;Promotion&gt; list(Map&lt;String, Object&gt; params);
</code></pre>

<p>}
```</p>

<p>```xml
<select id="list" resultType="Promotion"></p>

<pre><code>SELECT id, productId, imgUrls
FROM limitedtimediscount WHERE status = 1 AND endDate &gt;= now()
ORDER BY beginDate DESC
&lt;if test="start != null and limit != null"&gt;
    LIMIT #{start}, #{limit}
&lt;/if&gt;
</code></pre>

<p></select>
```</p>

<p>上面的代码中，我用了#号来获取map参数集合中的对应的start和limit值。运行报错
```</p>

<h3>The error may involve defaultParameterMap</h3>

<h3>The error occurred while setting parameters</h3>

<h3>SQL: SELECT id, productId, imgUrls         FROM limitedtimediscount WHERE status = 1 AND endDate >= now()  ORDER BY beginDate DESC  LIMIT ?, ?</h3>

<h3>Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &lsquo;'1&rsquo;, &lsquo;0&rsquo;&lsquo; at line 5</h3>

<p>; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &lsquo;'1&rsquo;, &lsquo;0&rsquo;&lsquo; at line 5
<code>
从log可以看出，我传进来的1和0被当成了字符串'1'和'0'了，在mysql limit的语法中，这显然是错误的。
这时候我想到的是能不能转型，所以我又把sql改成下面这样子
</code>xml
<select id="list" resultType="Promotion"></p>

<pre><code>SELECT id, productId, imgUrls
FROM limitedtimediscount WHERE status = 1 AND endDate &gt;= now()
ORDER BY beginDate DESC
&lt;if test="start != null and limit != null"&gt;
    LIMIT #{start, javaType=int}, #{limit, javaType=int}
&lt;/if&gt;
</code></pre>

<p></select>
<code>
运行后又报了不一样的错误
</code></p>

<h3>Error querying database.  Cause: java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer</h3>

<h3>The error may exist in sqlmap/PromotionMapper.xml</h3>

<h3>The error may involve defaultParameterMap</h3>

<h3>The error occurred while setting parameters</h3>

<h3>SQL: SELECT id, productId, imgUrls         FROM limitedtimediscount WHERE status = 1 AND endDate >= now()         ORDER BY beginDate DESC                       LIMIT ?, ?</h3>

<h3>Cause: java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer</h3>

<p><code>
这次是说String不能转换成Integer
接着我在网上搜索资料，找到了这么一篇[文章](http://shenzhenchufa.blog.51cto.com/730213/254561)，哦，原来ibatis中#和$是不一样的，引用原文的话
</code>
1.#是把传入的数据当作字符串，如#field#传入的是id,则sql语句生成是这样，order by &ldquo;id&rdquo;,这当然会报错.
2.$传入的数据直接生成在sql里，如#field#传入的是id,则sql语句生成是这样，order by id, 这就对了.
<code>
因此，只要把#{start}, #{limit}改成${start}, ${limit}就可以返回正确的结果。但在这个案例中，还存在另外一个问题。根据原文提到的。
</code>
$方式一般用于传入数据库对象．例如传入表名.</p>

<h1>方式一般用于传入插入/更新的值或查询/删除的where条件</h1>

<p><code>
他的说法我基本认同，因此在我的案例中使用$解决问题只是一个trick，我觉得还是不够科学。下面我写了几行代码验证了几个基础知识
</code>java
public static void main(String[] args) {</p>

<pre><code>Map&lt;String, Object&gt; map = new java.util.HashMap&lt;String, Object&gt;();
map.put("1", 1);
map.put("2", "2");
map.put("3", 2.1);
System.out.println("---------------check int--------------");
System.out.println("1 instanceof Integer:" + (map.get("1") instanceof Integer));
System.out.println("1 instanceof String:" + (map.get("1") instanceof String));
System.out.println("1 instanceof Object:" + (map.get("1") instanceof Object));

System.out.println("---------------check string--------------");
System.out.println("'2' instanceof Double:" + (map.get("2") instanceof String));
System.out.println("'2' instanceof Integer:" + (map.get("2") instanceof Integer));
System.out.println("'2' instanceof Object:" + (map.get("2") instanceof Object));

System.out.println("---------------check double--------------");
System.out.println("2.1 instanceof Double:" + (map.get("3") instanceof Double));
System.out.println("2.1 instanceof Integer:" + (map.get("3") instanceof Integer));
System.out.println("2.1 instanceof String:" + (map.get("3") instanceof String));
System.out.println("2.1 instanceof Object:" + (map.get("3") instanceof Object));
</code></pre>

<p>}</p>

<p>output:
&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-check int&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
1 instanceof Integer:true
1 instanceof String:false
1 instanceof Object:true</p>

<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-check string&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
&ldquo;2&rdquo; instanceof Double:true
&ldquo;2&rdquo; instanceof Integer:false
&ldquo;2&rdquo; instanceof Object:true</p>

<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-check double&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
2.1 instanceof Double:true
2.1 instanceof Integer:false
2.1 instanceof String:false
2.1 instanceof Object:true
```</p>

<p>```java
@RequestMapping(method = RequestMethod.GET)
public JsonResult list(@RequestParam Map&lt;String, Object> params) {</p>

<pre><code>System.out.println("start instanceof Integer:" + params.get("start"));
System.out.println("start instanceof String:" + params.get("start"));
// remaining code here
</code></pre>

<p>}</p>

<p>output:
start instanceof Integer:false
start instanceof String:true
```</p>

<p>没写完&hellip;&hellip;&hellip;&hellip;.</p>
]]></content>
  </entry>
  
</feed>
