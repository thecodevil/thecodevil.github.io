<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 算法 | 唯有修为常青树]]></title>
  <link href="http://youngjd.com/blog/categories/suan-fa/atom.xml" rel="self"/>
  <link href="http://youngjd.com/"/>
  <updated>2017-02-20T18:38:00+08:00</updated>
  <id>http://youngjd.com/</id>
  <author>
    <name><![CDATA[YJD]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[算法学习笔记-归并排序（二路归并）]]></title>
    <link href="http://youngjd.com/blog/2017/02/18/sort-algo_merge_sort/"/>
    <updated>2017-02-18T20:30:10+08:00</updated>
    <id>http://youngjd.com/blog/2017/02/18/sort-algo_merge_sort</id>
    <content type="html"><![CDATA[<blockquote><p>佛法在世间，不离世间觉。离世觅菩提，恰如求兔角。&mdash;《原经般若品 · 无相颂》</p></blockquote>

<!-- more -->


<hr />

<h3>归并排序 &ndash; Merge sort</h3>

<p><sup>> 以下是来自wikipedia的解释<sup>
```
In computer science, merge sort (also commonly spelled mergesort) is an efficient, general-purpose, comparison-based sorting algorithm.
Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output.
Mergesort is a divide and conquer algorithm that was invented by John von Neumann in 1945.[1]
A detailed description and analysis of bottom-up mergesort appeared in a report by Goldstine and Neumann as early as 1948.[2]</p>

<p>归并排序是一个基于比较的排序算法。大部分的归并排序的实现都属于稳定排序，即最终的输出序列保持原有
序列中那些相等的元素的位置。归并排序是一个基于分治算法产生的排序算法。</p>

<p>Conceptually, a merge sort works as follows:
Divide the unsorted list into n sublists, each containing 1 element (a list of 1 element is considered sorted).
Repeatedly merge sublists to produce new sorted sublists until there is only 1 sublist remaining. This will be the sorted list.</p>

<p>归并排序的步骤如下：
1. 把未排序的序列分成n个子序列，每个子序列仅仅包含一个元素（只有一个元素的序列自然有序）。
2. 重复地把子序列合并成新的有序子序列，直到只剩下一个子序列，那么这个子序列就是最终的有序序列。</p>

<p>```</p>

<p>一般的归并排序又称为<font color=#0B0080><strong>二路归并排序</strong></font>，即归并过程中总是以2个子序列作为一组合并单元。归并排序又分为<font color=#0B0080><strong>&ldquo;Top-down implementation(自顶向下)&rdquo;</strong></font>和<font color=#0B0080><strong>&ldquo;Bottom-up implementation(自底向下)&rdquo;</strong></font>两种实现方式。不管是哪种方式，都必须进行两个子序列合并这一步，也称作<font color=#0B0080><strong>一次归并</strong></font>。下面先看看一次归并的思路和算法。</p>

<p>图1为合并过程的示意图。因为归并排序是基于两个已经有序的子序列前提下进行合并的，所以只要同时遍历两个子序列，然后依次比较就可以至少处理完一个子序列，然后把还有剩余元素的子序列中的元素追加到新序列即可，时间复杂度是O(n)。合并过程如下图1所示：</p>

<p><sup>图1：一次归并示意图</sup><br>
<img src="/images/2017-02-20-1.png" height="500" width="400" alt="Alt text" /></p>

<p><sup>> 一次归并代码实现如下：</sup>
```java
public static void merge(int a[], int left, int mid, int right) {</p>

<pre><code>// b1[] =&gt; a[left .. mid]  左子数组
// b2[] =&gt; b[mid + 1.. right - 1] 右子数组

// 定义临时数组用于存放两个子数组合并后的结果，长度为两个子数组的长度和
int temp[] = new int[right - left];

int b1_i = left, b2_i = mid + 1, temp_i = 0;

// 合并两个已排序的子数组为一个有序数组
while (b1_i &lt;= mid &amp;&amp; b2_i &lt;= right) {
    temp[temp_i++] = a[b1_i] &lt;= a[b2_i] ? a[b1_i++] : a[b2_i++];
}

// 如果左子数组还有剩余元素，则追加到临时数组的末尾
while (b1_i &lt;= mid) {
    temp[temp_i++] = a[b1_i++];
}

// 如果右子数组还有剩余元素，则追加到临时数组的末尾
while (b2_i &lt;= right) {
    temp[temp_i++] = a[b2_i++];
}

// 拷贝临时数组中合并好的有序数组到原数组
for (int i = 0; i &lt; temp_i; i++) {
    a[left + i] = temp[i];
}
</code></pre>

<p>}
```</p>

<p>接着分别说明"Top-down implementation(自顶向下)&ldquo;和"Bottom-up implementation(自底向下)"两种实现方式。</p>

<h4>一、 自顶向下</h4>

<p>自顶向下就是递归地拆序列为子序列，直到子序列长度为1，然后两两合并子序列成新的有序序列。假设初始数组是A[left&hellip;right]，则步骤如下：</p>

<h5>1) 分解：</h5>

<p>将当前数组划分为两个子数组，划分下标mid = (left + right) / 2， 即划分为B1[left&hellip;mid]和B2[mid + 1&hellip;right]两个子数组。</p>

<h5>2) 求解:</h5>

<p>递归地对B1[left&hellip;mid]和B2[mid + 1&hellip;right]两个子数组求解（排序），直到子数组长度为1（即仅剩一个元素，一个元素自然有序，则得出问题解）。</p>

<h5>3) 合并:</h5>

<p>将两个已求解的子问题（两个已排序的子数组）合并成一个有序的解数组（得出上一层的问题解），如此类推逐层往上归并相邻的两个已排好序的子数组最后得到一个有序的最终解数组。</p>

<p><sup>图2：自顶向下的归并排序过程示意图</sup><br>
<img src="/images/2017-02-20-2.png" height="400" width="450" alt="Alt text" /></p>

<p><sup>> 自顶向下的递归版本</sup>
```java
public static void mergeSortRecursively (int a[], int left, int right) {</p>

<pre><code>if (left &lt; right) {
    // 分解数组
    int mid = (left + right) / 2;
    // 对左子数组递归地进行归并排序
    mergeSort(a, left, mid);
    // 对右子数组递归地进行归并排序
    mergeSort(a, mid + 1, right);
    // 合并两个已排序的数组为一个有序数组和复制到原数组上
    merge(a, left, mid, right);
}
</code></pre>

<p>}</p>

<p>public static void main(String[] args) {</p>

<pre><code>int[] a = new int[]{5, 2, 9, 3, 6, 4, 13, 1, 12, 7, 11, 8, 10};
mergeSortRecursively(a, 0, a.length - 1);
PrintHelper.printArray(a);
</code></pre>

<p>}</p>

<p>// 自顶向下的递归版本的输出结果
[2 5 9 3 6 4 13 1 12 7 11 8 10]
[2 5 3 9 6 4 13 1 12 7 11 8 10]
[2 3 5 9 6 4 13 1 12 7 11 8 10]
[2 3 5 9 4 6 13 1 12 7 11 8 10]
[2 3 5 9 4 6 13 1 12 7 11 8 10]
[2 3 4 5 6 9 13 1 12 7 11 8 10]
[2 3 4 5 6 9 13 1 12 7 11 8 10]
[2 3 4 5 6 9 13 1 7 12 11 8 10]
[2 3 4 5 6 9 13 1 7 12 8 11 10]
[2 3 4 5 6 9 13 1 7 12 8 10 11]
[2 3 4 5 6 9 13 1 7 8 10 11 12]
[1 2 3 4 5 6 7 8 9 10 11 12 13]
```</p>

<p><sup>> 自顶向下的非递归版本</sup>
```java
static class StackItem {</p>

<pre><code>public int left;
public int right;
public int read;

public StackItem(int left, int right) {
    this.left = left;
    this.right = right;
}
</code></pre>

<p>}</p>

<p>// read = 0：还没有拆分子问题
// read = 1: 如果当前栈的read=1，则说明它的左子问题已经处理完出栈
// read = 2：如果当前栈的read=2，则说明它的右子问题已经处理完出栈。也就说明两个子问题已经解决，可以进行合并。
public static void mergeSortUnRecursively(int a[], int left, int right) {</p>

<pre><code>Stack&lt;StackItem&gt; stack = new Stack&lt;&gt;();

// 推入初始栈顶
stack.push(new StackItem(left, right));
// 一直遍历直到栈为空
while (!stack.isEmpty()) {
    // 拿到当前栈顶元素
    StackItem si = stack.peek();
    // 表示左右子序列已经排好序，可以进行合并
    // 合并完之后出栈
    if (si.read == 2) {
        merge(a, si.left, (si.left + si.right) / 2, si.right);
        stack.pop();
    }
    // 分解序列
    int _mid = (si.left + si.right) / 2;
    if (si.left &lt; si.right) {
        // 当前序列还没有进行分解，首先拆分左子序列，入栈
        if (si.read == 0) {
            stack.push(new StackItem(si.left, _mid));
            // 标志左序列已经推入栈中
            si.read++;
        } 
        // 左子数组已经处理完，回到上一个栈状态，继续拆分右子数组，入栈
        else if (si.read == 1) {
            stack.push(new StackItem(_mid, si.right));
            // 标志右序列已经推入栈中
            si.read++;
        }
    } else {
        // 如果已经是最小子序列（序列中只有一个元素），则不用处理，直接出栈
        stack.pop();
    }
}
</code></pre>

<p>}</p>

<p>public static void main(String[] args) {</p>

<pre><code>int[] a = new int[]{5, 2, 9, 3, 6, 4, 13, 1, 12, 7, 11, 8, 10};
mergeSortUnRecursively(a, 0, a.length - 1);
PrintHelper.printArray(a);
</code></pre>

<p>}</p>

<p>// 自顶向下的非递归版本的输出结果
[2 5 9 3 6 4 13 1 12 7 11 8 10]
[2 5 3 9 6 4 13 1 12 7 11 8 10]
[2 3 5 9 6 4 13 1 12 7 11 8 10]
[2 3 5 9 4 6 13 1 12 7 11 8 10]
[2 3 5 9 4 6 13 1 12 7 11 8 10]
[2 3 4 5 6 9 13 1 12 7 11 8 10]
[2 3 4 5 6 9 13 1 12 7 11 8 10]
[2 3 4 5 6 9 13 1 7 12 11 8 10]
[2 3 4 5 6 9 13 1 7 12 8 11 10]
[2 3 4 5 6 9 13 1 7 12 8 10 11]
[2 3 4 5 6 9 13 1 7 8 10 11 12]
[1 2 3 4 5 6 7 8 9 10 11 12 13]
```</p>

<h4>二、 自底向上</h4>

<p>自底向上就是把序列当作是由n个长度为1的子序列组成的序列，然后以2个序列为单元循环来回地合并子序列。如图3所示，开始时把序列看成是一个由5个长度为1的子序列组成的序列，然后第1个子序列和第2个子序列归并，第3个子序列和第4个子序列归并，第5个（n为奇数的情况）不进行归并，这样就产生了2个长度为2的子序列和1个长度为1的子序列，每次循环都来回地归并元素，这样的一次循环操作称作是<font color=#0B0080><strong>一趟归并</strong></font>。接着是第2躺归并，仍然把序列当作是由2个长度为2的子序列组成的序列，最后一个长度为1的序列依然不进行归并，然后像第1躺归并一样，以2个序列为单元归并。如此反复，直到最终得到一个长度为n的子序列为止。</p>

<p><sup>图3：自底向上的归并排序过程示意图</sup><br>
<img src="/images/2017-02-20-3.png" height="400" width="400" alt="Alt text" /></p>

<p><sup>> 自底向上的归并排序版本</sup>
```java
public static void downTopMerge(int a[]) {</p>

<pre><code>int len = a.length;
// 进行log(2为底)N + 1趟归并
// sublistLen: 当前这趟归并的子序列长度
// 从1开始，每次以2的倍数递增（因为是以2个序列为单元进行两两合并，1&gt;2&gt;4&gt;8&gt;16....）
for (int sublistLen = 1; sublistLen &lt; len; sublistLen *= 2) {
    // i: 当前归并序列的左子序列的起始坐标
    // 每次归并2个序列，每个序列长度为sublistLen，因此下一个左子序列的起始坐标就是 i = i + 2 * sublistLen
    // 左子序列的下标不能大于整个原序列的长度
    for (int i = 0; i &lt; len; i += 2 * sublistLen) {
        // 进行一次归并
        // 左子序列[i .. i + sublistLen], 右子序列 [i + sublistLen + 1 ... i + 2 * sublistLen - 1]
        int left = i;
        int mid = i + sublistLen - 1; // i + sublistLen : 右子序列的起始坐标，减1就是左子序列的结束坐标，
                                      // 即被这两个序列合并成的新序列的中间坐标
        int right = (i + 2 * sublistLen) - 1; // i + 2 * sublistLen : 下一个左子序列的起始坐标
                                              // 所以右子序列的结束坐标就是它的前一个坐标= (i + 2 * sublistLen) - 1
        merge(a, i, Math.min(mid, len - 1),  Math.min(right, len - 1));
        PrintHelper.printArray(a);
    }
}
</code></pre>

<p>}</p>

<p>public static void main(String[] args) {</p>

<pre><code>int[] a = new int[]{5, 2, 9, 3, 6, 4, 13, 1, 12, 7, 11, 8, 10};
downTopMerge(a);
PrintHelper.printArray(a);
</code></pre>

<p>}</p>

<p>// 自底向上的输出结果
[2 5 9 3 6 4 13 1 12 7 11 8 10]
[2 5 3 9 6 4 13 1 12 7 11 8 10]
[2 5 3 9 4 6 13 1 12 7 11 8 10]
[2 5 3 9 4 6 1 13 12 7 11 8 10]
[2 5 3 9 4 6 1 13 7 12 11 8 10]
[2 5 3 9 4 6 1 13 7 12 8 11 10]
[2 5 3 9 4 6 1 13 7 12 8 11 10]
[2 3 5 9 4 6 1 13 7 12 8 11 10]
[2 3 5 9 1 4 6 13 7 12 8 11 10]
[2 3 5 9 1 4 6 13 7 8 11 12 10]
[2 3 5 9 1 4 6 13 7 8 11 12 10]
[1 2 3 4 5 6 9 13 7 8 11 12 10]
[1 2 3 4 5 6 9 13 7 8 10 11 12]
[1 2 3 4 5 6 7 8 9 10 11 12 13]
```</p>

<p>完！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[算法学习笔记-插入排序]]></title>
    <link href="http://youngjd.com/blog/2017/02/18/sort-algo/"/>
    <updated>2017-02-18T17:27:42+08:00</updated>
    <id>http://youngjd.com/blog/2017/02/18/sort-algo</id>
    <content type="html"><![CDATA[<blockquote><p>Surviving is not relevant.Living is. （生存本身没有意义，生活才有。) by 电影《机器纪元》</p></blockquote>

<!-- more -->


<hr />

<h3>插入排序 &ndash; Insertion sort</h3>

<p><sup>> 以下是来自wikipedia的解释<sup>
<code>
Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort. However, insertion sort provides several advantages:
Simple implementation: Jon Bentley shows a three-line C version, and a five-line optimized version[1]:116
Efficient for (quite) small data sets, much like other quadratic sorting algorithms
More efficient in practice than most other simple quadratic (i.e., O(n2)) algorithms such as selection sort or bubble sort
Adaptive, i.e., efficient for data sets that are already substantially sorted: the time complexity is O(nk) when each element in the input is no more than k places away from its sorted position
Stable; i.e., does not change the relative order of elements with equal keys
In-place; i.e., only requires a constant amount O(1) of additional memory space
Online; i.e., can sort a list as it receives it
When people manually sort cards in a bridge hand, most use a method that is similar to insertion sort.
</code></p>

<p>插入排序就好像打扑克牌的时候，从牌堆中一张张牌依次取牌，然后和手上已有的牌大小比较，插入到适合的位置上。比如打大老二扑克游戏，通过发牌已经发了13张牌到你的位置上，现在你从这13张牌堆中一张张地依次拿到手上。比如13张牌堆是[5, 2, 9, 3, 6, 4, 13(K), 1(A), 12(Q), 7, 11(J), 8, 10]，假设是按照升序排序，那么整理手牌的顺序如下：</p>

<h5>STEP 1：因为手上没有牌，所以5放到第一个位置</h5>

<pre><code>5 - - - - - - - - - - - -
</code></pre>

<h5>STEP 2：手上是一张5，从牌堆拿到2，2比5小，所以2替换5放到第一个位置，5放到第二个位置</h5>

<pre><code>2 5 - - - - - - - - - - -
</code></pre>

<h5>STEP 3: 从牌堆拿到9，9比5和2大，所以直接插入到5的后面</h5>

<pre><code>2 5 9 - - - - - - - - - -
</code></pre>

<h5>STEP 4：现在手上是2，5，9顺序的手牌，从牌堆拿到3，3比5和9小，所以5，9顺延往后整理，3比2大，所以3就会插入到2的后面，5的前面</h5>

<pre><code>2 3 5 9 - - - - - - - - -
</code></pre>

<p>如此类推直到取完牌堆上所有的牌。</p>

<p>以下是wikipedia上插入排序的伪代码。</p>

<p>```
for i ← 1 to length(A)</p>

<pre><code>j ← i
while j &gt; 0 and A[j-1] &gt; A[j]
    swap A[j] and A[j-1]
    j ← j - 1
end while
</code></pre>

<p>end for
```</p>

<p>但是刚开始看的时候看不太清楚这个思路，所以我按照上面整理扑克牌的思路写了一个易于自己理解的版本，然后再进行优化。</p>

<p>```java
public static void main(String[] args) {</p>

<pre><code>// 定义和初始化13张扑克牌牌堆
int[] _13pokers = new int[]{5, 2, 9, 3, 6, 4, 13, 1, 12, 7, 11, 8, 10};
sort1(_13pokers);
</code></pre>

<p>}</p>

<p>public static void sort1(int[] _13pokers) {</p>

<pre><code>int len = _13pokers.length;
// 手牌数组
int[] handPokers = new int[len];
// 当前手牌数量
int currentHandPokerNum = 0;
// 依次从牌堆取牌
for (int i = 0; i &lt; len; i++) {
    // 从牌堆取出的第i张牌
    int newPokerVal = _13pokers[i];
    // 新牌与手牌比较并获取插入位置
    int insertIndex = getInsertPosition(newPokerVal, currentHandPokerNum, handPokers);
    // 插入新牌到手牌
    handPokers[insertIndex] = newPokerVal;
    // 当前手牌数量加1
    currentHandPokerNum ++;
    PrintHelper.printArray(handPokers);
}
</code></pre>

<p>}</p>

<p>public static int getInsertPosition(int newPokerVal, int currentHandPokerNum, int[] handPokers) {</p>

<pre><code>// 从手牌的尾端(大)至开头(小)进行比较
// 末尾牌的下标即手牌数量-1，开始时手上没有牌，所以下标为-1
int handIndex = currentHandPokerNum - 1;
do {
    // 1. 没手牌时，不需要进行比较。所以新取到的手牌插入到第一个位置，即下标为0，所以handIndex+1
    // 2. 所有手牌比较完毕时，新牌依然没有找到插入位置，则说明，新牌是现在手牌当中最小的牌，所以插入到开头位置，即handIndex+1
    if (handIndex &lt; 0) {
        return handIndex + 1;
    }
    // 取出当前需要和新牌比较的手牌
    int handIndexPokerVal = handPokers[handIndex];
    // 如果新牌的值比当前手牌的值小
    if (newPokerVal &lt; handIndexPokerVal) {
        // 把当前这张手牌往后移一位，腾出的空间或许给新手牌，或给下一张也比新牌大的手牌
        handPokers[handIndex + 1] = handPokers[handIndex];
    }
    // 如果新牌的值比当前手牌的值大，则新牌应该插入到当前手牌的后一位，所以handIndex+1
    else {
        return handIndex + 1;
    }
    // 比较下一张手牌（方向往手牌开头，值小的一端 &lt;--- ）
    handIndex --;
} while (true);
</code></pre>

<p>}
```</p>

<p>运行结果：</p>

<p><code>
[5 0 0 0 0 0 0 0 0 0 0 0 0]
[2 5 0 0 0 0 0 0 0 0 0 0 0]
[2 5 9 0 0 0 0 0 0 0 0 0 0]
[2 3 5 9 0 0 0 0 0 0 0 0 0]
[2 3 5 6 9 0 0 0 0 0 0 0 0]
[2 3 4 5 6 9 0 0 0 0 0 0 0]
[2 3 4 5 6 9 13 0 0 0 0 0 0]
[1 2 3 4 5 6 9 13 0 0 0 0 0]
[1 2 3 4 5 6 9 12 13 0 0 0 0]
[1 2 3 4 5 6 7 9 12 13 0 0 0]
[1 2 3 4 5 6 7 9 11 12 13 0 0]
[1 2 3 4 5 6 7 8 9 11 12 13 0]
[1 2 3 4 5 6 7 8 9 10 11 12 13]
</code></p>

<p>写完第一个版本之后，思路清晰了一点，现在看看哪些地方可以进行简化和优化，直到接近伪代码的样子。</p>

<h5>1.当前手牌数量就是从牌堆拿的数量，比如我现在从牌堆拿第一张牌，则当前手牌就是1。</h5>

<p><code>java
int handIndex = currentHandPokerNum - 1; =》 int handIndex = i - 1;
</code></p>

<h4>2.wiki中有一段解释，插入排序是一个in-place的算法，即不需要申请额外空间的算法，其前后结果没有依赖关系，从内存角度来说，可以直接原地覆盖掉。而第一个版本的算法明显的申请了一个额外的空间，即handPokers，它的大小和输入的数组一样。按照这个解释，这两个数组是可以共用的而不影响结果的计算。所以可以去掉handPokers，用原数组直接进行计算。PS：改成一个数组，从扑克牌的角度，就是原本是从牌堆依次取牌，现在改成把13张未排序的牌一次全部拿到手上，然后从第一张开始进行依次比较和插入。第一张牌同样地不需要比较，直接插入到手牌第一张，即什么都不做。第二张牌和第一张比较，如果第一张牌小，则第一张牌挪到第二张牌的位置上，然后当前牌插入到位置1。就是手牌的右半部份就相当于牌堆，左半部分相当于手牌。</h4>

<p>```java
public static void sort1(int[] _13pokers) {</p>

<pre><code>int len = _13pokers.length;
for (int i = 0; i &lt; len; i++) {
    int newPokerVal = _13pokers[i];
    int insertIndex = getInsertPosition(newPokerVal, i - 1, _13pokers);
    _13pokers[insertIndex] = newPokerVal;
}
</code></pre>

<p>}
```</p>

<h5>3. 把do-while改成while</h5>

<p>```java
public static int getInsertPosition(int newPokerVal, int handIndex, int[] handPokers) {</p>

<pre><code>while (handIndex &gt;= 0 &amp;&amp; handPokers[handIndex] &gt; newPokerVal) {
    handPokers[handIndex + 1] = handPokers[handIndex];
    handIndex --;
}
return handIndex + 1;
</code></pre>

<p>}
```</p>

<h5>4. 合并代码并通用化常量</h5>

<p>```java</p>

<p>public static void main(String[] args) {</p>

<pre><code>int[] array = new int[]{5, 2, 9, 3, 6, 4, 13, 1, 12, 7, 11, 8, 10};
sort2(array);
</code></pre>

<p>}</p>

<p>public static void sort2(int[] array) {</p>

<pre><code>int len = array.length;
for (int i = 0; i &lt; len; i++) {
    int ai = array[i];
    int insertIndex = i - 1;
    while (insertIndex &gt;= 0 &amp;&amp; array[insertIndex] &gt; ai) {
        array[insertIndex + 1] = array[insertIndex];
        insertIndex --;
    }
    array[insertIndex + 1] = ai;
}
PrintHelper.printArray(array);
</code></pre>

<p>}
```</p>

<p>sort2基本就和伪代码差不多了。</p>

<p>完！</p>
]]></content>
  </entry>
  
</feed>
