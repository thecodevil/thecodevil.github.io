<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | 唯有修为常青树]]></title>
  <link href="http://youngjd.com/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://youngjd.com/"/>
  <updated>2017-02-14T02:18:02+08:00</updated>
  <id>http://youngjd.com/</id>
  <author>
    <name><![CDATA[YJD]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker之牛刀小试]]></title>
    <link href="http://youngjd.com/blog/2017/01/18/docker-demo/"/>
    <updated>2017-01-18T17:44:42+08:00</updated>
    <id>http://youngjd.com/blog/2017/01/18/docker-demo</id>
    <content type="html"><![CDATA[<blockquote><p>很多事情，必须要在亲身经历和体验它的多样性之后，再去确定它的唯一性。我要一些简单和重要的东西。尝试为身边的人服务，放低自己，有所付出。也许我所做的一切，不过是滴水之力，对身边的世间推进并不大，这个世界将依旧由权利和欲望来颠覆。但我成全自己所感受到的指引。这仅是属于我自己的微小而真实的信念。 《莲花》by 庆山（安妮宝贝）</p></blockquote>

<!-- more -->


<hr />

<br>


<p><img src="/images/20170123-3.png" height="150" width="150" alt="Alt text" /></p>

<p>本文章基于读者已经对docker，springboot，springcloud有一定了解的基础上阅读。</p>

<p>文章目录 <a name="000" id="000"></a></p>

<h6>1. <a href="#001">使用SpringBoot编写helloworld</a></h6>

<h6>2. <a href="#002">使用openresty作为负载均衡</a></h6>

<h6>3. <a href="#003">使用mysql作为数据存储</a></h6>

<h6>4. <a href="#004">配置mysql主从，并使用docker包装一个mycat中间件进行读写分离</a></h6>

<h6>5. <a href="#005">使用springcloud+zookeeper进行服务注册和发现</a></h6>

<h6>6. <a href="#006">单机多容器管理利器docker-compose</a></h6>

<hr />

<p><a name="001" id="001"></a></p>

<h4>1.使用SpringBoot编写helloworld <a style="text-decoration:none;" href="#000">◥</a></h4>

<p>使用springboot的方式构建好项目，写一个简单的controller进行"helloworld"的输出。</p>

<p>启动类代码如下：</p>

<pre><code>package yjd.demo.springboot.helloworld;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * @author yjd
 * @since 2017/1/18
 */
@SpringBootApplication
 public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
</code></pre>

<p>Controller代码如下：</p>

<pre><code>package yjd.demo.springboot.helloworld.controller;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import yjd.demo.springboot.helloworld.controller.base.ApiResult;

/**
 * @author yjd
 * @since 2017/1/18
 */
@RestController
public class IndexController {

    @RequestMapping("/index")
    ApiResult index() {
        return ApiResult.success().addData("msg", "helloWorld");
    }

}
</code></pre>

<p>pom.xml代码如下：</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;yjd.demo.springboot&lt;/groupId&gt;
    &lt;artifactId&gt;helloworld&lt;/artifactId&gt;
    &lt;version&gt;0.1.0&lt;/version&gt;

    &lt;packaging&gt;jar&lt;/packaging&gt;

    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;1.4.2.RELEASE&lt;/version&gt;
    &lt;/parent&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;


    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

    &lt;repositories&gt;
        &lt;repository&gt;
            &lt;id&gt;spring-releases&lt;/id&gt;
            &lt;url&gt;https://repo.spring.io/libs-release&lt;/url&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;
    &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
            &lt;id&gt;spring-releases&lt;/id&gt;
            &lt;url&gt;https://repo.spring.io/libs-release&lt;/url&gt;
        &lt;/pluginRepository&gt;
    &lt;/pluginRepositories&gt;
&lt;/project&gt;
</code></pre>

<p>服务器上新建一个目录，把打包好的jar包上传到target目录，并新建一个Dockerfile文件。</p>

<p><img src="/images/20170120-1.png" alt="Alt text" /></p>

<p>Dockerfile文件内容如下：</p>

<pre><code>FROM openjdk

MAINTAINER yjd

VOLUME ["/usr/local/app"]

EXPOSE 8080

ENTRYPOINT ["java","-jar","/usr/local/app/helloworld.jar"]
</code></pre>

<p>然后使用docker build命令构建镜像。</p>

<pre><code>sudo docker build -t yjd/helloworld .
</code></pre>

<p><img src="/images/20170120-2.png" alt="Alt text" /></p>

<p>镜像构建成功后，启动容器。PS：需要部署的文件通过挂载的方式和容器同步，这样代码更新后，替换jar包重新启动容器即可。</p>

<pre><code>sudo docker run --name helloworld1 -p 50001:8080 -v /home/op/dev/app/target:/usr/local/app -d yjd/helloworld
</code></pre>

<p>输入docker ps查看容器已经成功启动。</p>

<p><img src="/images/20170120-3.png" alt="Alt text" /></p>

<p>输入ip地址+端口测试访问是否正确。<a href="http://xxx.xxx.xxx.xxx:50001/index">http://xxx.xxx.xxx.xxx:50001/index</a></p>

<pre><code>{
    "success": true,
    "message": "",
    "apiVersion": "1.0.0",
    "apiCode": "OK",
    "data": {
        "msg": "helloWorld"
    }
}
</code></pre>

<hr />

<p><a name="002" id="002"></a></p>

<h4>2.使用openresty作为负载均衡 <a style="text-decoration:none;" href="#000">◥</a></h4>

<p>首先重复上述步骤，启动一个同样功能的springboot应用，构成一个小集群。注意修改容器运行时暴露的端口(50002)和容器名字(helloworld2)</p>

<pre><code>sudo docker run --name helloworld2 -p 50002:8080 -v /home/op/dev/app/target:/usr/local/app -d yjd/helloworld
</code></pre>

<p>两个helloworld容器已经成功启动，访问测试也OK！</p>

<p><img src="/images/20170120-4.png" alt="Alt text" /></p>

<p>新建一个目录，命名为openresty，目录结构如下(conf.d和logs两个目录将会以数据卷的形式挂载到容器对应的目录，nginx.conf将拷贝覆盖容器中对应的配置文件)：</p>

<p><img src="/images/20170121-1.png" alt="Alt text" /></p>

<p>新建一个dockerfile文件，文件内容如下：</p>

<pre><code>FROM debian

MAINTAINER yjd

RUN apt-get -y update
RUN apt-get install -y libreadline-dev libncurses5-dev libpcre3-dev \
    libssl-dev perl make build-essential
RUN apt-get install -y wget

RUN wget https://openresty.org/download/openresty-1.11.2.1.tar.gz &amp;&amp; tar -zxvf openresty-1.11.2.1.tar.gz -C /usr/local

RUN cd /usr/local/openresty-1.11.2.1 &amp;&amp; ./configure --with-luajit --prefix=/opt/openresty &amp;&amp; make &amp;&amp; make install
RUN rm -rf /opt/openresty/nginx/conf/nginx.conf

COPY ./nginx.conf /opt/openresty/nginx/conf

VOLUME ["/opt/openresty/nginx/conf/conf.d", "/opt/openresty/nginx/logs"]

EXPOSE 80

CMD ["/opt/openresty/nginx/sbin/nginx", "-g", "daemon off;"]
#nginx需要以非守护程序运行，即不能后台运行，否则容器运行后又会马上停止
</code></pre>

<p>使用docker build命令构建镜像，镜像构建成功后就可以启动容器了。</p>

<pre><code>sudo docker run --name openresty --link helloworld2:helloworld2 --link helloworld1:helloworld1 -p 80:80 -v /home/op/dev/openresty/logs:/opt/openresty/nginx/logs -v /home/op/dev/openresty/conf.d:/opt/openresty/nginx/conf/conf.d -d yjd/openresty
</code></pre>

<p>如果nginx是搭建在宿主机上的话，upstream的配置直接用127.0.0.1:PORT的方式既可以，但是由于这个实验是单独把nginx服务包装成容器，容器之间的访问需要用到docker的link功能，有两个helloworld服务，则link两次。link成功后，在openresty容器查看hosts，显示如下:</p>

<p><img src="/images/20170121-2.png" alt="Alt text" /></p>

<p>再来看看对应的nginx配置。主要是upstream的配置，直接用docker的主机名进行配置，也可以用host对应的ip，只不过docker容器是无状态的，每次重新启动，ip都可能变，而因为link的时候指定了被链接容器的别名，所以helloworld1和helloworld2就不变了。PS：注意这里不是用的容器暴露给宿主机的IP，而是用的容器内部运行的后台程序的端口，springboot默认是8080(使用link就是为了容器间的内部访问)。这里我自己坑了自己很久，一直用的50001和50002，nginx一直502。还以为要去捣腾各种网络桥接的问题，各种百度谷歌都找不到解决办法。结果洗了个热水澡出来就发现是自己傻x了！！</p>

<pre><code>upstream yjd.helloworld.com {
    server helloworld1:8080 weight=5;
    server helloworld2:8080 weight=5;
}

log_format helloworld '$remote_addr - $remote_user [$time_local] $request '
              '"$status" $body_bytes_sent "$http_referer" '
              '"$http_user_agent" "$http_x_forwarded_for" "$request_time" "$request_body" ';                          
server {
        listen  80;
        server_name xxx.xxx.xxx.xxx; # 由于没有备案域名可用，此处就用IP代替
        access_log /opt/openresty/nginx/logs/helloworld.com-access.log helloworld;

        location / {
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_pass http://yjd.helloworld.com;
        }
}
</code></pre>

<p>浏览器直接访问IP，输出结果同样。查看宿主机的logs挂载目录，nginx的日志也成功输出到此目录，查看日志内容也正常，测试OK！！</p>

<p><img src="/images/20170121-3.png" alt="Alt text" /></p>

<hr />

<p><a name="003" id="003"></a></p>

<h4>3.使用mysql作为数据存储 <a style="text-decoration:none;" href="#000">◥</a></h4>

<p>mysql的docker镜像直接使用docker官方hub上的mariadb镜像。</p>

<pre><code>docker pull mariadb
</code></pre>

<p><img src="/images/20170122-1.png" alt="Alt text" /></p>

<p>在宿主机上新建一个mysql目录作为数据卷，启动mariadb容器时使用-v进行挂载：</p>

<pre><code>sudo docker run --name mariadb-master -p 53306:3306 -v /home/op/dev/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mariadb
</code></pre>

<p>容器启动成功后，data目录下就会同步出现mysql的数据文件</p>

<p><img src="/images/20170122-2.png" alt="Alt text" /></p>

<p>容器启动后，使用docker exec命令进入容器, 创建helloworld数据库和测试表数据：</p>

<pre><code>sudo docker exec -ti mariadb-master /bin/bash
</code></pre>

<p>容器准备好后，回头修改springboot。pom文件增加mybatis和mysql驱动依赖：</p>

<pre><code>&lt;dependency&gt;
        &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;
        &lt;version&gt;1.2.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;version&gt;5.1.40&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>配置application.yml数据源：</p>

<pre><code>spring:
    datasource:
        name: helloworld
        url: jdbc:mysql://mariadb-master:3306/helloworld?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;autoReconnect=true&amp;serverTimezone=UTC
        username: ???
        password: ?????
        driver-class-name: com.mysql.jdbc.Driver
</code></pre>

<p>增加mapper类：</p>

<pre><code>package yjd.demo.springboot.helloworld.dao;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;
import yjd.demo.springboot.helloworld.model.User;

/**
 * @author yjd
 * @since 2017/1/22
 */
@Mapper
public interface UserMapper {
    @Select("SELECT * FROM user WHERE username = #{username}")
    User getByUsername(@Param("username") String username);
}
</code></pre>

<p>修改controller代码，新增如下代码：</p>

<pre><code>@Autowired
UserMapper userMapper;

@RequestMapping("/user")
ApiResult findUser(@RequestParam("username") String username) {
    User user = userMapper.getByUsername(username);
    if (user == null) {
        return ApiResult.fail(ApiCode.NOT_FOUND);
    }
    return ApiResult.success().addData("user", user);
}
</code></pre>

<p>修改完成后，重新打包并上传到服务器。此时，因为helloworld应用需要访问到mariadb容器中的数据库，所以同启动openresty一样需要用到link，helloworld容器需要link到mariadb容器，启动helloworld容器命令修改如下：</p>

<pre><code># 服务1
sudo docker run --name helloworld1 --link mariadb-master:mariadb-master -p 50001:8080 -v /home/op/dev/app/target:/usr/local/app -d yjd/helloworld

# 服务2
sudo docker run --name helloworld2 --link mariadb-master:mariadb-master -p 50002:8080 -v /home/op/dev/app/target:/usr/local/app -d yjd/helloworld
</code></pre>

<p>访问测试OK！！</p>

<pre><code>curl http://xxx.xxx.xxx.xxx/user?username=young

{
    "success": true,
    "message": "",
    "apiVersion": "1.0.0",
    "apiCode": "OK",
    "data": {
        "user": {
            "id": 1,
            "username": "young"
        }
    }
}
</code></pre>

<hr />

<p><a name="004" id="004"></a></p>

<h4>4.配置mysql主从，并使用docker包装一个mycat中间件进行读写分离 <a style="text-decoration:none;" href="#000">◥</a></h4>

<p>首先按照上一步再启动一个mariadb-slave容器。PS:这里注意宿主机的数据目录也要新建一个，简单更改为mysql2，同事暴露的端口也要修改。如果了解mysql主从配置的读者应该知道，从服务器是需要和主服务器进行通信的，即从服务器会启用一个专门的线程通过网络通信去抓取主服务器的binlog来进行数据同步。由此可知，mariadb-slave容器需要link到mariadb-master容器，启动命令如下：</p>

<pre><code>sudo docker run --name mariadb-slave --link mariadb-master:mariadb-master -p 53307:3306 -v /home/op/dev/mysql2/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mariadb
</code></pre>

<p>容器启动后，就是按照通常的mysql主从配置进行配置即可，步骤如下：</p>

<h5>STEP 1.修改master配置，然后重启容器（即重启数据库，使得配置生效）</h5>

<pre><code>vi /etc/mysql/my.cnf

[mysqld]
server-id = 1
log_bin = /var/log/mysql/mariadb-bin
</code></pre>

<h5>STEP 2.修改slave配置（修改server-id），然后重启容器（即重启数据库，使得配置生效）</h5>

<pre><code>vi /etc/mysql/my.cnf

[mysqld]
server-id = 2
log_bin = /var/log/mysql/mariadb-bin
</code></pre>

<h5>STEP 3.在master上创建和授权主从复制账号</h5>

<pre><code>MariaDB [(none)]&gt; grant replication slave on *.* to 'rwsync'@'%' identified by 'rwsync';
</code></pre>

<p>查询master状态</p>

<p><img src="/images/20170123-1.png" alt="Alt text" /></p>

<h5>STEP 4.根据master状态，配置slave</h5>

<pre><code>MariaDB [(none)]&gt; change master to master_host='mariadb-master',master_user='rwsync',master_password='rwsync',master_log_file='mariadb-bin.000001',master_log_pos=315; 
</code></pre>

<p>开启slave复制</p>

<pre><code>MariaDB [(none)]&gt; start slave;
</code></pre>

<p>查看slave状态，Slave_IO_Running和Slave_SQL_Running均为YES则表示主从同步正常</p>

<pre><code>MariaDB [(none)]&gt; show slave status;
</code></pre>

<p><img src="/images/20170123-2.png" alt="Alt text" /></p>

<p>接着部署mycat中间件。在官方网站下载mycat releasse版本安装包，上传至服务器新建的mycat目录，目录结构如下：</p>

<p><img src="/images/20170124-2.png" alt="Alt text" /></p>

<p>先在宿主机上解压，提取里面的配置文件到数据卷目录</p>

<pre><code>tar -zxvpf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz &amp;&amp; cp -R /home/op/dev/mycat/mycat/conf/. /home/op/dev/mycat/conf &amp;&amp; rm -rf /home/op/dev/mycat/mycat
</code></pre>

<p><img src="/images/20170124-1.png" alt="Alt text" /></p>

<p>修改server.xml和schema.xml，代码如下：</p>

<pre><code>// server.xml，其他配置不变，根据实际情况修改以下部分
&lt;user name="root"&gt;
        &lt;property name="password"&gt;123456&lt;/property&gt;
        &lt;property name="schemas"&gt;helloworld&lt;/property&gt;
&lt;/user&gt;

// schema.xml
// balance=3：所有读请求随机的路由到写库对应的读库上执行
// writeType=0：所有写操作第一个写库上，即mariadb-master
&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE mycat:schema SYSTEM "schema.dtd"&gt;
&lt;mycat:schema xmlns:mycat="http://io.mycat/"&gt;
        &lt;schema name="helloworld" checkSQLschema="false" dataNode="dn1"&gt;&lt;/schema&gt;
        &lt;dataNode name="dn1" dataHost="localhost1" database="helloworld" /&gt;
        &lt;dataHost name="localhost1" maxCon="1000" minCon="10" balance="3"
                          writeType="0" dbType="mysql" dbDriver="native" switchType="1"  slaveThreshold="100"&gt;
                &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;
                &lt;!-- can have multi write hosts --&gt;
                &lt;writeHost host="mariadb-master" url="mariadb-master:3306" user="root"
                                   password="123456"&gt;
                        &lt;!-- can have multi read hosts --&gt;
                        &lt;readHost host="mariadb-slave" url="mariadb-slave:3306" user="root" password="123456" /&gt;
                &lt;/writeHost&gt;
        &lt;/dataHost&gt;
&lt;/mycat:schema&gt;
</code></pre>

<p>Dockerfile内容如下：</p>

<pre><code>FROM openjdk

MAINTAINER yjd

VOLUME ["/opt/mycat/conf"]

ADD Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz /opt
#使用ADD，docker会自动解压

EXPOSE 8066 9066

CMD ["/opt/mycat/bin/mycat","console"]
</code></pre>

<p>构建镜像：</p>

<pre><code>sudo docker build -t yjd/mycat .
</code></pre>

<p>由于mycat中间件容器需要访问mariadb-master和mariadb-slave两个数据库容器，所以也需要用到link指令，启动命令如下：</p>

<pre><code>sudo docker run --name mycat --link mariadb-master:mariadb-master --link mariadb-slave:mariadb-slave -v /home/op/dev/mycat/conf:/opt/mycat/conf -p 8066:8066 -p 9066:9066 yjd/mycat
</code></pre>

<p>在springboot代码里编写新增用户的代码逻辑:</p>

<pre><code>// Controller
@RequestMapping(value = "/user", method = RequestMethod.POST)
ApiResult createUser(@ModelAttribute User user) {
    userMapper.createUser(user);
    return ApiResult.success().addData("new user ID", user.getId());
}

// Mapper
@Insert("INSERT INTO user(username) VALUES (#{user.username})")
@Options(useGeneratedKeys = true, keyProperty = "user.id")
void createUser(@Param("user") User user);
</code></pre>

<p>由于helloworld服务器由直接访问mariadb改成通过mycat中间件路由主从数据库，因此需要修改两处地方：</p>

<p>1.修改hellworld数据源配置，主要修改连接host(mycat)和端口(8066)：</p>

<pre><code>spring:
datasource:
    name: helloworld
    url: jdbc:mysql://mycat:8066/helloworld?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;autoReconnect=true&amp;serverTimezone=UTC
    username: root
    password: 123456
    driver-class-name: com.mysql.jdbc.Driver
</code></pre>

<p>2.helloworld容器需要从link到mariadb改成link到mycat，修改启动命令如下：</p>

<pre><code># 服务1
sudo docker run --name helloworld1 --link mycat:mycat -p 50001:8080 -v /home/op/dev/app/target:/usr/local/app -d yjd/helloworld

# 服务2
sudo docker run --name helloworld2 --link mycat:mycat -p 50002:8080 -v /home/op/dev/app/target:/usr/local/app -d yjd/helloworld
</code></pre>

<p>打包helloworld应用上传到服务器，用新的命令restart两个helloworld容器。现在来测试下是否成功进行读写分离：</p>

<pre><code># 新增一个用户
curl -d "username="Trump" http://106.14.60.228/user
{
    "success": true,
    "message": "",
    "apiVersion": "1.0.0",
    "apiCode": "OK",
    "data": {
        "new user ID": 11
    }
}

# 查询Trump用户
curl http://106.14.60.228/user?username=Trump
{
    "success": true,
    "message": "",
    "apiVersion": "1.0.0",
    "apiCode": "OK",
    "data": {
        "user": {
            "id": 11,
            "username": "Trump"
        }
    }
}
</code></pre>

<p>进入mycat容器追踪mycat的日志(把log4j2.xml的日志级别改成DEBUG)</p>

<pre><code>tail /opt/mycat/logs/mycat.log -f -n 30
</code></pre>

<p>新增用户日志，从红色划线部分即可看出，写操作已经成功路由到master上</p>

<p><img src="/images/20170124-3.png" alt="Alt text" /></p>

<p>查询用户日志，从红色划线部分即可看出，写操作已经成功路由到slave上</p>

<p><img src="/images/20170124-4.png" alt="Alt text" /></p>

<p>测试OK！！</p>

<hr />

<p><a name="005" id="005"></a></p>

<h4>5.使用springcloud+zookeeper进行服务注册和发现 <a style="text-decoration:none;" href="#000">◥</a></h4>

<p>首先使用docker包装一个zookeeper容器。创建如下目录结构：</p>

<p><img src="/images/2017-02-13-1.png" alt="Alt text" /></p>

<p>解压zookeeper安装包并提取配置文件到conf目录</p>

<pre><code>tar -zxvpf zookeeper-3.4.9.tar.gz &amp;&amp; cp -R /home/op/dev/zookeeper/zookeeper-3.4.9/conf/. /home/op/dev/zookeeper/conf &amp;&amp; rm -rf /home/op/dev/zookeeper/zookeeper-3.4.9
</code></pre>

<p>使用Dockerfile构建容器，Dockerfile内容如下：</p>

<pre><code>FROM openjdk
#zookeeper使用java编写的，所以需要java运行环境

MAINTAINER yjd

RUN mkdir /var/lib/zookeeper
#这个目录作为zookeeper的data目录

VOLUME ["/var/lib/zookeeper", "/opt/zookeeper-3.4.9/conf"]

ADD zookeeper-3.4.9.tar.gz /opt

CMD ["/opt/zookeeper-3.4.9/bin/zkServer.sh", "start-foreground"]
#start-foreground：使用前台运行模式，否则（后台运行）容器启动后就自动关闭
</code></pre>

<p>构建镜像后启动容器，挂载conf和data两个数据卷目录：</p>

<pre><code>sudo docker build -ti yjd/zookeeper .

sudo docker run --name zk1 \
        -p 2181:2181 \
        -v /home/op/dev/zookeeper/conf:/opt/zookeeper-3.4.9/conf \
        -v /home/op/dev/zookeeper/data:/var/lib/zookeeper \
        -d yjd/zookeeper
</code></pre>

<p>进入容器，使用zookeeper客户端连接zookeeper本地服务端，检查是否正常启动zookeeper：</p>

<pre><code>op@iZuf6ikqrgj1kq9sbrou5fZ:~/dev/zookeeper$ sudo docker exec -ti zk1 /bin/bash
root@fb6b4983dbb7:/# cd opt                                                                                                                                                                                     
root@fb6b4983dbb7:/opt# cd zookeeper-3.4.9/
root@fb6b4983dbb7:/opt/zookeeper-3.4.9# cd bin/
root@fb6b4983dbb7:/opt/zookeeper-3.4.9/bin# ./zkCli.sh -server localhost:2181
Connecting to localhost:2181
2017-02-13 13:49:16,018 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.9-1757313, built on 08/23/2016 06:50 GMT
2017-02-13 13:49:16,021 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=fb6b4983dbb7
2017-02-13 13:49:16,021 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.8.0_111
2017-02-13 13:49:16,023 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor=Oracle Corporation
2017-02-13 13:49:16,023 [myid:] - INFO  [main:Environment@100] - Client environment:java.home=/usr/lib/jvm/java-8-openjdk-amd64/jre
2017-02-13 13:49:16,023 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path=/opt/zookeeper-3.4.9/bin/../build/classes:/opt/zookeeper-3.4.9/bin/../build/lib/*.jar:/opt/zookeeper-3.4.9/bin/../lib/slf4j-log4j12-1.6.1.jar:/opt/zookeeper-3.4.9/bin/../lib/slf4j-api-1.6.1.jar:/opt/zookeeper-3.4.9/bin/../lib/netty-3.10.5.Final.jar:/opt/zookeeper-3.4.9/bin/../lib/log4j-1.2.16.jar:/opt/zookeeper-3.4.9/bin/../lib/jline-0.9.94.jar:/opt/zookeeper-3.4.9/bin/../zookeeper-3.4.9.jar:/opt/zookeeper-3.4.9/bin/../src/java/lib/*.jar:/opt/zookeeper-3.4.9/bin/../conf:
2017-02-13 13:49:16,024 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib
2017-02-13 13:49:16,024 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir=/tmp
2017-02-13 13:49:16,024 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler=&lt;NA&gt;
2017-02-13 13:49:16,024 [myid:] - INFO  [main:Environment@100] - Client environment:os.name=Linux
2017-02-13 13:49:16,024 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch=amd64
2017-02-13 13:49:16,024 [myid:] - INFO  [main:Environment@100] - Client environment:os.version=3.13.0-106-generic
2017-02-13 13:49:16,024 [myid:] - INFO  [main:Environment@100] - Client environment:user.name=root
2017-02-13 13:49:16,024 [myid:] - INFO  [main:Environment@100] - Client environment:user.home=/root
2017-02-13 13:49:16,024 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir=/opt/zookeeper-3.4.9/bin
2017-02-13 13:49:16,025 [myid:] - INFO  [main:ZooKeeper@438] - Initiating client connection, connectString=localhost:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain$MyWatcher@41906a77
2017-02-13 13:49:16,047 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1032] - Opening socket connection to server localhost/127.0.0.1:2181. Will not attempt to authenticate using SASL (unknown error)
Welcome to ZooKeeper!
JLine support is enabled
2017-02-13 13:49:16,122 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@876] - Socket connection established to localhost/127.0.0.1:2181, initiating session
[zk: localhost:2181(CONNECTING) 0] 2017-02-13 13:49:16,211 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1299] - Session establishment complete on server localhost/127.0.0.1:2181, sessionid = 0x15a37bba5810000, negotiated timeout = 30000

WATCHER::

WatchedEvent state:SyncConnected type:None path:null

[zk: localhost:2181(CONNECTED) 0] ls /
[zookeeper]
[zk: localhost:2181(CONNECTED) 1] 
</code></pre>

<p>zk中间件已经准备好，现在进行代码改造。还是基于上面的helloworld进行修改，在不改动原工程下，拷贝两个新的工程，分别是ms-helloworld-server和ms-helloworld-client。</p>

<h4>1. ms-helloworld-server：</h4>

<p>pom.xml，新增spring-cloud和zookeeper的依赖：</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;yjd.demo.springboot&lt;/groupId&gt;
    &lt;artifactId&gt;ms-helloworld-server&lt;/artifactId&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;

    &lt;packaging&gt;jar&lt;/packaging&gt;

    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;1.4.4.RELEASE&lt;/version&gt;
    &lt;/parent&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
                &lt;version&gt;Camden.SR5&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-zookeeper-all&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;


    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

    &lt;repositories&gt;
        &lt;repository&gt;
            &lt;id&gt;spring-releases&lt;/id&gt;
            &lt;url&gt;https://repo.spring.io/libs-release&lt;/url&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;
    &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
            &lt;id&gt;spring-releases&lt;/id&gt;
            &lt;url&gt;https://repo.spring.io/libs-release&lt;/url&gt;
        &lt;/pluginRepository&gt;
    &lt;/pluginRepositories&gt;
&lt;/project&gt;
</code></pre>

<p>为了简单，服务方和调用方还是使用最简单的http服务，不引入rpc框架，服务方服务接口代码：</p>

<pre><code>package yjd.demo.springboot.helloworld.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import yjd.demo.springboot.helloworld.controller.base.ApiCode;
import yjd.demo.springboot.helloworld.controller.base.ApiResult;

import java.net.InetAddress;
import java.net.UnknownHostException;

/**
 * @author yjd
 * @since 2017/2/13
 */
@RestController
public class HelloworldRestService {

    @RequestMapping("/index")
    ApiResult index() throws UnknownHostException {
        String ip = InetAddress.getLocalHost().getHostAddress();
        return ApiResult.success().addData("msg", "helloWorld, ip:" + ip);
    }

}
</code></pre>

<p>启动类代码，增加@EnableDiscoveryClient注解即可：</p>

<pre><code>package yjd.demo.springboot.helloworld;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;

/**
 * @author yjd
 * @since 2017/2/13
 */
@SpringBootApplication
@EnableDiscoveryClient
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
</code></pre>

<p>application.yml</p>

<pre><code>spring:
    application:
      name: helloworld-server
</code></pre>

<p>bootstrap.yml</p>

<pre><code>spring:
  cloud:
    zookeeper:
      connect-string: zk1:2181
</code></pre>

<h4>2. ms-helloworld-client：</h4>

<p>pom.xml，增加spring-cloud，zookeeper，feign（一个http客户端库）依赖：</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;yjd.demo.springboot&lt;/groupId&gt;
    &lt;artifactId&gt;helloworld&lt;/artifactId&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;

    &lt;packaging&gt;jar&lt;/packaging&gt;

    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;1.4.4.RELEASE&lt;/version&gt;
    &lt;/parent&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
                &lt;version&gt;Camden.SR5&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;
            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;
            &lt;version&gt;1.2.0&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;mysql&lt;/groupId&gt;
            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
            &lt;version&gt;5.1.40&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-zookeeper-all&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;


    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

    &lt;repositories&gt;
        &lt;repository&gt;
            &lt;id&gt;spring-releases&lt;/id&gt;
            &lt;url&gt;https://repo.spring.io/libs-release&lt;/url&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;
    &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
            &lt;id&gt;spring-releases&lt;/id&gt;
            &lt;url&gt;https://repo.spring.io/libs-release&lt;/url&gt;
        &lt;/pluginRepository&gt;
    &lt;/pluginRepositories&gt;
&lt;/project&gt;
</code></pre>

<p>客户端调用服务端代码：</p>

<pre><code>package yjd.demo.springboot.helloworld.api;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.discovery.DiscoveryClient;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import yjd.demo.springboot.helloworld.api.base.ApiResult;
import yjd.demo.springboot.helloworld.rmi.IndexRmi;

import java.util.List;
import java.util.stream.Collectors;

/**
 * @author yjd
 * @since 2017/2/13
 */
@RestController
public class IndexApi {

    @Autowired
    private DiscoveryClient discovery;

    @Autowired
    private IndexRmi indexRmi;

    @RequestMapping("/info")
    ApiResult info() {
        List&lt;ServiceInstance&gt; instanceList = discovery.getInstances("helloworld-server");
        String instances = instanceList.stream().map(it -&gt; it.getHost() + ":" + it.getPort()).collect(Collectors.joining("; "));
        return ApiResult.success().addData("instances", instances);
    }

    @RequestMapping("/index")
    ApiResult index() {
        return indexRmi.index();
    }
}
</code></pre>

<p>feign代码：</p>

<pre><code>package yjd.demo.springboot.helloworld.rmi;

import org.springframework.cloud.netflix.feign.FeignClient;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestMapping;
import yjd.demo.springboot.helloworld.api.base.ApiResult;

/**
 * Created by young on 2017/2/13.
 */
@Component
@FeignClient(value = "helloworld-server")
public interface IndexRmi {

    @RequestMapping(value = "/index")
    public ApiResult index();

}
</code></pre>

<p>启动类代码：</p>

<pre><code>package yjd.demo.springboot.helloworld;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.netflix.feign.EnableFeignClients;

/**
 * @author yjd
 * @since 2017/2/13
 */
@SpringBootApplication
@EnableFeignClients
@EnableDiscoveryClient
 public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
</code></pre>

<p>application.yml：</p>

<pre><code>spring:
    application:
      name: helloworld-client
</code></pre>

<p>bootstrap.yml</p>

<pre><code>spring:
  cloud:
    zookeeper:
      connect-string: zk1:2181
      discovery:
        register: false # 注意要设为false，为否client也会被注册的zk上
</code></pre>

<p>打包server和client代码上传到服务器，目录结构如下：</p>

<p><img src="/images/2017-02-13-2.png" alt="Alt text" /></p>

<p>server和client的Dockerfile内容与上面的helloworld几乎一样，只更改了jar包名字：</p>

<p>server:</p>

<pre><code>FROM openjdk

MAINTAINER yjd

VOLUME ["/usr/local/app"]

EXPOSE 8080

ENTRYPOINT ["java","-jar","/usr/local/app/ms-helloworld-server.jar"]
</code></pre>

<p>client:</p>

<pre><code>FROM openjdk

MAINTAINER yjd

VOLUME ["/usr/local/app"]

EXPOSE 8080

ENTRYPOINT ["java","-jar","/usr/local/app/ms-helloworld-client.jar"]
</code></pre>

<p>构建server和client镜像并启动2个server容器和1个client容器：</p>

<pre><code># 启动server1
sudo docker run --name ms-helloworld-server1 --link zk1:zk1 -p 50001:8080 -v /home/op/dev/ms-app/ms-app-server/deploy:/usr/local/app -d yjd/ms-helloworld-server

# 启动server2
sudo docker run --name ms-helloworld-server2 --link zk1:zk1 -p 50002:8080 -v /home/op/dev/ms-app/ms-app-server/deploy:/usr/local/app -d yjd/ms-helloworld-server

# 启动client
# 这里需要link两个server端，否则zk返回可用实例后，client端就无法与该实例的docker容器通讯
sudo docker run --name ms-helloworld-client --link zk1:zk1 --link ms-helloworld-server1:ms-helloworld-server1 --link ms-helloworld-server2:ms-helloworld-server2 -p 50003:8080 -v /home/op/dev/ms-app/ms-app-client/deploy:/usr/local/app -d yjd/ms-helloworld-client
</code></pre>

<p>curl访问测试结果如下：</p>

<pre><code>curl http://IP:50003/info
# 打印出两个server实例
{
    "success":true,
    "message":"",
    "apiVersion":"1.0.0",
    "apiCode":"OK",
    "data":{
        "instances":"192.168.0.3:8080; 192.168.0.4:8080"
    }
}

curl http://IP:50003/index
# 刷新会打印出不同的IP，证明有进行load balance
{
    "success":true,
    "message":"",
    "apiVersion":"1.0.0",
    "apiCode":"OK",
    "data":{
        "msg":"helloWorld, ip:192.168.0.3"
    }
}

{
    "success":true,
    "message":"",
    "apiVersion":"1.0.0",
    "apiCode":"OK",
    "data":{
        "msg":"helloWorld, ip:192.168.0.4"
    }
}
</code></pre>

<p>再进入zookeeper查看znode信息，可以看到/services/helloworld-server下注册了两个节点：</p>

<pre><code>[zk: localhost:2181(CONNECTED) 2] ls /services/helloworld-server
[e4af27b2-613f-4f26-9a4a-fa0b979a2658, 128e338a-f10b-4047-b593-d60969b95aa3]
</code></pre>

<hr />

<p><a name="006" id="006"></a></p>

<h4>6.单机多容器管理利器docker-compose <a style="text-decoration:none;" href="#000">◥</a></h4>

<p>上一步进行了zookeeper的standalong部署，现在使用docker进行单机3个节点的集群部署。按照正常的思路的话，将会使用docker run依次启动3个节点并使用link的方式互相连接，然后每个节点进行定制化配置，如下：</p>

<p>配置zookeeper zoo.cfg文件，新增集群实例：</p>

<pre><code>...
server.1=zk1:2881:3881  
server.2=zk2:2882:3882  
server.3=zk3:2883:3883 
...
</code></pre>

<p>这里会遇到的问题是，zookeeper启动时就会去检测配置的集群节点，这时候如果容器本身没有互相连接，就无法知道zk1,zk2,zk3这3个主机名对应的是哪个容器IP地址，zk就无法成功启动。所以每个zk容器运行的时候都需要加上link，如下：</p>

<pre><code>op@iZuf6ikqrgj1kq9sbrou5fZ:~/dev/zookeeper$ sudo docker run --name zk1 \
        --link zk2:zk2 --link zk3:zk3 \
        -p 2181:2181 \
        -v /home/op/dev/zookeeper/conf:/opt/zookeeper-3.4.9/conf \
        -v /home/op/dev/zookeeper/data:/var/lib/zookeeper \
        -d yjd/zookeeper

op@iZuf6ikqrgj1kq9sbrou5fZ:~/dev/zookeeper$ sudo docker run --name zk2 \
        --link zk1:zk1 --link zk3:zk3 \
        -p 2181:2181 \
        -v /home/op/dev/zookeeper2/conf:/opt/zookeeper-3.4.9/conf \
        -v /home/op/dev/zookeeper2/data:/var/lib/zookeeper \
        -d yjd/zookeeper

op@iZuf6ikqrgj1kq9sbrou5fZ:~/dev/zookeeper$ sudo docker run --name zk3 \
        --link zk1:zk1 --link zk2:zk2 \
        -p 2181:2181 \
        -v /home/op/dev/zookeeper3/conf:/opt/zookeeper-3.4.9/conf \
        -v /home/op/dev/zookeeper3/data:/var/lib/zookeeper \
        -d yjd/zookeeper
</code></pre>

<p>从运行命令可以看到，3个节点link是循环依赖的，所以单独执行任何一条启动命令都是失败的。无法link就无法在容器内部建立IP与主机名的映射关系。如果是先不进行link启动，启动成功后再用容器IP去配置zk集群，则会出现容器重启后IP变化的问题。当然这个问题一般只存在于单机情况下，如果是多物理机或多云主机的话，直接配置IP即可。这时候就可以用到docker-compose来解决问题，docker-compose是用于多容器的容器管理与编排，它的其中一个特性解决了这个问题。一开始学习docker-compose的时候，以为只是把不同的容器通过一个配置文件统一起来，方便管理和描述一组服务间的关系，然后按照不同容器的依赖关系(link参数指出依赖顺序)启动容器，其实docker-compose是创建了一个网络来组织这些被配置起来的容器。具体可以查看<a href="https://docs.docker.com/compose/networking/" style="text-decoration: underline;">官方文档</a>。摘要其中一段：</p>

<pre><code>By default Compose sets up a single network for your app. Each container for a service joins the default network 
and is both reachable by other containers on that network, and discoverable by them at a hostname identical to the 
container name.

默认Docker-compose会为你的应用（被组织起来的容器）创建一个单独的网络。每个服务容器都加入到这个网络中，
并且这些容器相互之间可以访问，容器的名字作为此网络中的主机名。
</code></pre>

<p>比如在myapp目录下有如下配置的docker-compose.yml：</p>

<pre><code>version: '2'

services:
  web:
    build: .
    ports:
      - "8000:8000"
  db:
    image: postgres

When you run docker-compose up, the following happens:

1. A network called myapp_default is created. 
   一个名为myapp_default的网络被创建
2. A container is created using web’s configuration. It joins the network myapp_default under the name web.
   根据web的配置创建一个容器。这个容器以web作为主机名加入这个网络
3. A container is created using db’s configuration. It joins the network myapp_default under the name db.
   根据db的配置创建一个容器。这个容器以db作为主机名加入这个网络
</code></pre>

<p>所以使用docker-compose可以很方便的启动一个zookeeper集群，步骤如下：</p>

<h5>1. 在docker-hub仓库下拉一个官方的zookeeper镜像。（不采用自己构建的镜像是因为还需要考虑到不同zk节点需要不同的配置和myid文件，需要编写entrypoint.sh脚本进行文件的写入，为了方便直接使用官方已经写好了entrypoint.sh的容器）：</h5>

<pre><code>docker pull zookeeper
</code></pre>

<h5>2.创建compose工程目录：</h5>

<pre><code>mkdir zkcompose &amp;&amp; touch ./zkcompose/docker-compose.yml &amp;&amp; cd zkcompose
</code></pre>

<h5>3 创建数据卷：</h5>

<pre><code>mkdir zkcompose/zk1 &amp;&amp; mkdir zkcompose/zk1/data &amp;&amp; mkdir zkcompose/zk1/datalog
mkdir zkcompose/zk2 &amp;&amp; mkdir zkcompose/zk2/data &amp;&amp; mkdir zkcompose/zk2/datalog
mkdir zkcompose/zk3 &amp;&amp; mkdir zkcompose/zk3/data &amp;&amp; mkdir zkcompose/zk3/datalog
</code></pre>

<h5>4.编写docker-compose.yml：</h5>

<pre><code>version: '2'
services:
    zk1:
        image: zookeeper
        restart: always
        container_name: zk1
        ports:
            - "2181:2181"
        volumes:
            - /home/op/dev/zkcompose/zk1/data:/data
            - /home/op/dev/zkcompose/zk1/datalog:/datalog
        environment:
            ZOO_MY_ID: 1
            ZOO_SERVERS: server.1=zk1:2888:3888 server.2=zk2:2888:3888 server.3=zk3:2888:3888

    zk2:
        image: zookeeper
        restart: always
        container_name: zk2
        ports:
            - "2182:2181"
        volumes:
            - /home/op/dev/zkcompose/zk2/data:/data
            - /home/op/dev/zkcompose/zk2/datalog:/datalog
        environment:
            ZOO_MY_ID: 2
            ZOO_SERVERS: server.1=zk1:2888:3888 server.2=zk2:2888:3888 server.3=zk3:2888:3888

    zk3:
        image: zookeeper
        restart: always
        container_name: zk3
        ports:
            - "2183:2181"
        volumes:
            - /home/op/dev/zkcompose/zk3/data:/data
            - /home/op/dev/zkcompose/zk3/datalog:/datalog
        environment:
            ZOO_MY_ID: 3
            ZOO_SERVERS: server.1=zk1:2888:3888 server.2=zk2:2888:3888 server.3=zk3:2888:3888
</code></pre>

<h5>5.启动</h5>

<pre><code># -d: 后台运行
sudo docker-compose up -d
</code></pre>

<h5>6.运行客户端容器连接zk集群</h5>

<pre><code># 因为只是临时容器，使用--rm，当容器退出时就会被删掉
# 使用--net指定网络用的是docker-compose创建的zkcompose_default网络
docker run -it --rm --link zk1:zk1 --link zk2:zk2 --link zk3:zk3 --net zkcompose_default zookeeper zkCli.sh -server zk1:2181,zk2:2181,zk3:2181
</code></pre>

<p>zookeeper集群已经成功部署，现在修改代码，把连接单个zk节点改成连接zk集群</p>

<h5>1.修改server和client的bootstrap.yml</h5>

<pre><code>#server
spring:
  cloud:
    zookeeper:
      connect-string: zk1:2181,zk2:2181,zk3:2181

#client
spring:
  cloud:
    zookeeper:
      connect-string: zk1:2181,zk2:2181,zk3:2181
      discovery:
        register: false
</code></pre>

<h5>2.修改server和client容器启动命令：</h5>

<pre><code># 注意需要指明使用网络zkcompose_default

# 启动server1
sudo docker run --name ms-helloworld-server1 \
    --net zkcompose_default \
    --link zk1:zk1 --link zk2:zk2 --link zk3:zk3 \
    -p 50001:8080 \
    -v /home/op/dev/ms-app/ms-app-server/deploy:/usr/local/app \
    -d yjd/ms-helloworld-server

# 启动server2
sudo docker run --name ms-helloworld-server2 \
    --net zkcompose_default \
    --link zk1:zk1 --link zk2:zk2 --link zk3:zk3 \
    -p 50002:8080 \
    -v /home/op/dev/ms-app/ms-app-server/deploy:/usr/local/app \
    -d yjd/ms-helloworld-server

# 启动client
# 这里需要link两个server端，否则zk返回可用实例后，client端就无法与该实例的docker容器通讯
sudo docker run --name ms-helloworld-client \
    --net zkcompose_default \
    --link ms-helloworld-server1:ms-helloworld-server1 \
    --link ms-helloworld-server2:ms-helloworld-server2 \
    --link zk1:zk1 --link zk2:zk2 --link zk3:zk3 \
    -p 50003:8080 \
    -v /home/op/dev/ms-app/ms-app-client/deploy:/usr/local/app \
    -d yjd/ms-helloworld-client
</code></pre>

<p>完！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The_docker_user_guide]]></title>
    <link href="http://youngjd.com/blog/2014/07/20/the-docker-user-guide/"/>
    <updated>2014-07-20T19:29:31+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/20/the-docker-user-guide</id>
    <content type="html"><![CDATA[<p>没翻译完</p>

<!-- more -->


<h3>Docker用户指南</h3>

<p>在介绍篇中你已经了解了什么事Docker和如何利用它来工作。在这篇指南我们将带着你学习
使用Docker和如何把它集成到你的环境中的基础知识。</p>

<p>我们将指导你如何使用Docker：</p>

<ul>
<li>使用的应用Docker化</li>
<li>运行你自己的容器</li>
<li>建立Docker的镜像</li>
<li>分享你的Docker镜像</li>
<li>还有更多</li>
</ul>


<p>我们把这个指南分成了几个主要的部分来让你了解Docker的生命周期</p>

<h3>让我们开始学习Docker Hub</h3>

<p>如何使用Docker Hub?
Docker Hub是Docker中心。它存放公共的Docke镜像并提供服务来帮助你建立和管理你的Docker环境。想了解更多：
请阅读 (User Docker Hub)[]</p>

<h3>让你的应用Docker起来：A &ldquo;Hello world&rdquo;</h3>

<p>如何在容器内部运行应用?</p>

<p>Docker提供了一个基于容器的虚拟化平台来运行你的应用。</p>
]]></content>
  </entry>
  
</feed>
