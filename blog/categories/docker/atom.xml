<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | battousai's blog]]></title>
  <link href="http://youngjd.com/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://youngjd.com/"/>
  <updated>2017-01-23T02:23:55+08:00</updated>
  <id>http://youngjd.com/</id>
  <author>
    <name><![CDATA[battousai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[杀鸡用牛刀之-使用docker和springboot进行微服务实践]]></title>
    <link href="http://youngjd.com/blog/2017/01/18/docker-demo/"/>
    <updated>2017-01-18T17:44:42+08:00</updated>
    <id>http://youngjd.com/blog/2017/01/18/docker-demo</id>
    <content type="html"><![CDATA[<blockquote><p>很多事情，必须要在亲身经历和体验它的多样性之后，再去确定它的唯一性。我要一些简单和重要的东西。尝试为身边的人服务，放低自己，有所付出。也许我所做的一切，不过是滴水之力，对身边的世间推进并不大，这个世界将依旧由权利和欲望来颠覆。但我成全自己所感受到的指引。这仅是属于我自己的微小而真实的信念。 《莲花》by 庆山（安妮宝贝）</p></blockquote>

<!-- more -->


<hr />

<br>


<p>标题之所以取名为杀鸡用牛刀，并不是指进行微服务架构的时候，使用docker和springboot是杀鸡用牛刀。而是指结合这些比较复杂的技术仅仅只是为了写个demo，确实有点小题大作了，哈哈！！</p>

<p>PS：本文章基于读者已经对docker，springboot，springcloud有一定了解的基础上阅读。</p>

<p>demo的简单架构图如下。</p>

<hr />

<h3>1.使用SpringBoot编写helloworld</h3>

<p>使用springboot的方式构建好项目，写一个简单的controller进行"helloworld"的输出。</p>

<p>启动类代码如下：</p>

<pre><code>package yjd.demo.springboot.helloworld;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * @author yjd
 * @since 2017/1/18
 */
@SpringBootApplication
 public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
</code></pre>

<p>Controller代码如下：</p>

<pre><code>package yjd.demo.springboot.helloworld.controller;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import yjd.demo.springboot.helloworld.controller.base.ApiResult;

/**
 * @author yjd
 * @since 2017/1/18
 */
@RestController
public class IndexController {

    @RequestMapping("/index")
    ApiResult index() {
        return ApiResult.success().addData("msg", "helloWorld");
    }

}
</code></pre>

<p>pom.xml代码如下：</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;yjd.demo.springboot&lt;/groupId&gt;
    &lt;artifactId&gt;helloworld&lt;/artifactId&gt;
    &lt;version&gt;0.1.0&lt;/version&gt;

    &lt;packaging&gt;jar&lt;/packaging&gt;

    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;1.4.2.RELEASE&lt;/version&gt;
    &lt;/parent&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;


    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

    &lt;repositories&gt;
        &lt;repository&gt;
            &lt;id&gt;spring-releases&lt;/id&gt;
            &lt;url&gt;https://repo.spring.io/libs-release&lt;/url&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;
    &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
            &lt;id&gt;spring-releases&lt;/id&gt;
            &lt;url&gt;https://repo.spring.io/libs-release&lt;/url&gt;
        &lt;/pluginRepository&gt;
    &lt;/pluginRepositories&gt;
&lt;/project&gt;
</code></pre>

<p>服务器上新建一个目录，把打包好的jar包上传到target目录，并新建一个Dockerfile文件。</p>

<p><img src="/images/20170120-1.png" alt="Alt text" /></p>

<p>Dockerfile文件内容如下：</p>

<pre><code>FROM openjdk

MAINTAINER yjd

VOLUME ["/usr/local/app"]

EXPOSE 8080

ENTRYPOINT ["java","-jar","/usr/local/app/helloworld.jar"]
</code></pre>

<p>然后使用docker build命令构建镜像。</p>

<pre><code>sudo docker build -t yjd/helloworld .
</code></pre>

<p><img src="/images/20170120-2.png" alt="Alt text" /></p>

<p>镜像构建成功后，启动容器。PS：需要部署的文件通过挂载的方式和容器同步，这样代码更新后，替换jar包重新启动容器即可。</p>

<pre><code>sudo docker run --name helloworld1 -p 50001:8080 -v /home/op/dev/app/target:/usr/local/app -d yjd/helloworld
</code></pre>

<p>输入docker ps查看容器已经成功启动。</p>

<p><img src="/images/20170120-3.png" alt="Alt text" /></p>

<p>输入ip地址+端口测试访问是否正确。<a href="http://xxx.xxx.xxx.xxx:50001/index">http://xxx.xxx.xxx.xxx:50001/index</a></p>

<pre><code>{
    "success": true,
    "message": "",
    "apiVersion": "1.0.0",
    "apiCode": "OK",
    "data": {
        "msg": "helloWorld"
    }
}
</code></pre>

<hr />

<h3>2.使用openresty作为负载均衡</h3>

<p>首先重复上述步骤，启动一个同样功能的springboot应用，构成一个小集群。注意修改容器运行时暴露的端口(50002)和容器名字(helloworld2)</p>

<pre><code>sudo docker run --name helloworld2 -p 50002:8080 -v /home/op/dev/app/target:/usr/local/app -d yjd/helloworld
</code></pre>

<p>两个helloworld容器已经成功启动，访问测试也OK！</p>

<p><img src="/images/20170120-4.png" alt="Alt text" /></p>

<p>新建一个目录，命名为openresty，目录结构如下(conf.d和logs两个目录将会以数据卷的形式挂载到容器对应的目录，nginx.conf将拷贝覆盖容器中对应的配置文件)：</p>

<p><img src="/images/20170121-1.png" alt="Alt text" /></p>

<p>新建一个dockerfile文件，文件内容如下：</p>

<pre><code>FROM debian

MAINTAINER yjd

RUN apt-get -y update
RUN apt-get install -y libreadline-dev libncurses5-dev libpcre3-dev \
    libssl-dev perl make build-essential
RUN apt-get install -y wget

RUN wget https://openresty.org/download/openresty-1.11.2.1.tar.gz &amp;&amp; tar -zxvf openresty-1.11.2.1.tar.gz -C /usr/local

RUN cd /usr/local/openresty-1.11.2.1 &amp;&amp; ./configure --with-luajit --prefix=/opt/openresty &amp;&amp; make &amp;&amp; make install
RUN rm -rf /opt/openresty/nginx/conf/nginx.conf

COPY ./nginx.conf /opt/openresty/nginx/conf

VOLUME ["/opt/openresty/nginx/conf/conf.d", "/opt/openresty/nginx/logs"]

EXPOSE 80

CMD ["/opt/openresty/nginx/sbin/nginx", "-g", "daemon off;"]
#nginx需要以非守护程序运行，即不能后台运行，否则容器运行后又会马上停止
</code></pre>

<p>使用docker build命令构建镜像，镜像构建成功后就可以启动容器了。</p>

<pre><code>sudo docker run --name openresty --link helloworld2:helloworld2 --link helloworld1:helloworld1 -p 80:80 -v /home/op/dev/openresty/logs:/opt/openresty/nginx/logs -v /home/op/dev/openresty/conf.d:/opt/openresty/nginx/conf/conf.d -d yjd/openresty
</code></pre>

<p>如果nginx是搭建在宿主机上的话，upstream的配置直接用127.0.0.1:PORT的方式既可以，但是由于这个实验是单独把nginx服务包装成容器，容器之间的访问需要用到docker的link功能，有两个helloworld服务，则link两次。link成功后，在openresty容器查看hosts，显示如下:</p>

<p><img src="/images/20170121-2.png" alt="Alt text" /></p>

<p>再来看看对应的nginx配置。主要是upstream的配置，直接用docker的主机名进行配置，也可以用host对应的ip，只不过docker容器是无状态的，每次重新启动，ip都可能变，而因为link的时候指定了被链接容器的别名，所以helloworld1和helloworld2就不变了。PS：注意这里不是用的容器暴露给宿主机的IP，而是用的容器内部运行的后台程序的端口，springboot默认是8080(使用link就是为了容器间的内部访问)。这里我自己坑了自己很久，一直用的50001和50002，nginx一直502。还以为要去捣腾各种网络桥接的问题，各种百度谷歌都找不到解决办法。结果洗了个热水澡出来就发现是自己傻x了！！</p>

<pre><code>upstream yjd.helloworld.com {
    server helloworld1:8080 weight=5;
    server helloworld2:8080 weight=5;
}

log_format helloworld '$remote_addr - $remote_user [$time_local] $request '
              '"$status" $body_bytes_sent "$http_referer" '
              '"$http_user_agent" "$http_x_forwarded_for" "$request_time" "$request_body" ';                          
server {
        listen  80;
        server_name xxx.xxx.xxx.xxx; # 由于没有备案域名可用，此处就用IP代替
        access_log /opt/openresty/nginx/logs/helloworld.com-access.log helloworld;

        location / {
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_pass http://yjd.helloworld.com;
        }
}
</code></pre>

<p>浏览器直接访问IP，输出结果同样。查看宿主机的logs挂载目录，nginx的日志也成功输出到此目录，查看日志内容也正常，测试OK！！</p>

<p><img src="/images/20170121-3.png" alt="Alt text" /></p>

<hr />

<h3>3.使用mysql作为数据存储</h3>

<p>mysql的docker镜像直接使用docker官方hub上的mariadb镜像。</p>

<pre><code>docker pull mariadb
</code></pre>

<p><img src="/images/20170122-1.png" alt="Alt text" /></p>

<p>在宿主机上新建一个mysql目录作为数据卷，启动mariadb容器时使用-v进行挂载：</p>

<pre><code>sudo docker run --name mariadb-master -p 53306:3306 -v /home/op/dev/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mariadb
</code></pre>

<p>容器启动成功后，data目录下就会同步出现mysql的数据文件</p>

<p><img src="/images/20170122-2.png" alt="Alt text" /></p>

<p>容器启动后，使用docker exec命令进入容器, 创建helloworld数据库和测试表数据：</p>

<pre><code>sudo docker exec -ti mariadb-master /bin/bash
</code></pre>

<p>容器准备好后，回头修改springboot。pom文件增加mybatis和mysql驱动依赖：</p>

<pre><code>&lt;dependency&gt;
        &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;
        &lt;version&gt;1.2.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;version&gt;6.0.5&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>配置application.yml数据源：</p>

<pre><code>spring:
    datasource:
        name: helloworld
        url: jdbc:mysql://mariadb-master:3306/helloworld?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;autoReconnect=true&amp;serverTimezone=UTC
        username: ???
        password: ?????
        driver-class-name: com.mysql.jdbc.Driver
</code></pre>

<p>增加mapper类：</p>

<pre><code>package yjd.demo.springboot.helloworld.dao;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;
import yjd.demo.springboot.helloworld.model.User;

/**
 * @author yjd
 * @since 2017/1/22
 */
@Mapper
public interface UserMapper {
    @Select("SELECT * FROM user WHERE username = #{username}")
    User getByUsername(@Param("username") String username);
}
</code></pre>

<p>修改controller代码，新增如下代码：</p>

<pre><code>@Autowired
UserMapper userMapper;

@RequestMapping("/user")
ApiResult findUser(@RequestParam("username") String username) {
    User user = userMapper.getByUsername(username);
    if (user == null) {
        return ApiResult.fail(ApiCode.NOT_FOUND);
    }
    return ApiResult.success().addData("user", user);
}
</code></pre>

<p>修改完成后，重新打包并上传到服务器。此时，因为helloworld应用需要访问到mariadb容器中的数据库，所以同启动openresty一样需要用到link，helloworld容器需要link到mariadb容器，启动helloworld容器命令修改如下：</p>

<pre><code># 服务1
sudo docker run --name helloworld1 --link mariadb-master:mariadb-master -p 50001:8080 -v /home/op/dev/app/target:/usr/local/app -d yjd/helloworld

# 服务2
sudo docker run --name helloworld2 --link mariadb-master:mariadb-master -p 50002:8080 -v /home/op/dev/app/target:/usr/local/app -d yjd/helloworld
</code></pre>

<p>访问测试OK！！</p>

<pre><code>curl http://xxx.xxx.xxx.xxx/user?username=young

{
    "success": true,
    "message": "",
    "apiVersion": "1.0.0",
    "apiCode": "OK",
    "data": {
        "user": {
            "id": 1,
            "username": "young"
        }
    }
}
</code></pre>

<hr />

<h3>4.配置mysql主从，并使用docker包装一个mycat中间件进行读写分离</h3>

<hr />

<h3>5.使用springcloud微服务化helloworld应用</h3>

<hr />

<h3>6.使用docker-compose进行服务编排</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The_docker_user_guide]]></title>
    <link href="http://youngjd.com/blog/2014/07/20/the-docker-user-guide/"/>
    <updated>2014-07-20T19:29:31+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/20/the-docker-user-guide</id>
    <content type="html"><![CDATA[<p>没翻译完</p>

<!-- more -->


<h3>Docker用户指南</h3>

<p>在介绍篇中你已经了解了什么事Docker和如何利用它来工作。在这篇指南我们将带着你学习
使用Docker和如何把它集成到你的环境中的基础知识。</p>

<p>我们将指导你如何使用Docker：</p>

<ul>
<li>使用的应用Docker化</li>
<li>运行你自己的容器</li>
<li>建立Docker的镜像</li>
<li>分享你的Docker镜像</li>
<li>还有更多</li>
</ul>


<p>我们把这个指南分成了几个主要的部分来让你了解Docker的生命周期</p>

<h3>让我们开始学习Docker Hub</h3>

<p>如何使用Docker Hub?
Docker Hub是Docker中心。它存放公共的Docke镜像并提供服务来帮助你建立和管理你的Docker环境。想了解更多：
请阅读 (User Docker Hub)[]</p>

<h3>让你的应用Docker起来：A &ldquo;Hello world&rdquo;</h3>

<p>如何在容器内部运行应用?</p>

<p>Docker提供了一个基于容器的虚拟化平台来运行你的应用。</p>
]]></content>
  </entry>
  
</feed>
