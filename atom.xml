<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[唯有修为常青树]]></title>
  <link href="http://youngjd.com/atom.xml" rel="self"/>
  <link href="http://youngjd.com/"/>
  <updated>2017-02-20T18:34:42+08:00</updated>
  <id>http://youngjd.com/</id>
  <author>
    <name><![CDATA[YJD]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[算法学习笔记-归并排序（二路归并）]]></title>
    <link href="http://youngjd.com/blog/2017/02/18/sort-algo_merge_sort/"/>
    <updated>2017-02-18T20:30:10+08:00</updated>
    <id>http://youngjd.com/blog/2017/02/18/sort-algo_merge_sort</id>
    <content type="html"><![CDATA[<blockquote><p>佛法在世间，不离世间觉。离世觅菩提，恰如求兔角。&mdash;《原经般若品 * 无相颂》</p></blockquote>

<!-- more -->


<hr />

<h3>归并排序 &ndash; Merge sort</h3>

<p><sup>> 以下是来自wikipedia的解释<sup></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>In computer science, merge sort (also commonly spelled mergesort) is an efficient, general-purpose, comparison-based sorting algorithm. 
</span><span class='line'>Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output. 
</span><span class='line'>Mergesort is a divide and conquer algorithm that was invented by John von Neumann in 1945.[1] 
</span><span class='line'>A detailed description and analysis of bottom-up mergesort appeared in a report by Goldstine and Neumann as early as 1948.[2]
</span><span class='line'>
</span><span class='line'>归并排序是一个基于比较的排序算法。大部分的归并排序的实现都属于稳定排序，即最终的输出序列保持原有
</span><span class='line'>序列中那些相等的元素的位置。归并排序是一个基于分治算法产生的排序算法。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Conceptually, a merge sort works as follows:
</span><span class='line'>Divide the unsorted list into n sublists, each containing 1 element (a list of 1 element is considered sorted).
</span><span class='line'>Repeatedly merge sublists to produce new sorted sublists until there is only 1 sublist remaining. This will be the sorted list.
</span><span class='line'>
</span><span class='line'>归并排序的步骤如下：
</span><span class='line'>1. 把未排序的序列分成n个子序列，每个子序列仅仅包含一个元素（只有一个元素的序列自然有序）。
</span><span class='line'>2. 重复地把子序列合并成新的有序子序列，直到只剩下一个子序列，那么这个子序列就是最终的有序序列。
</span></code></pre></td></tr></table></div></figure>


<p>一般的归并排序又称为<font color=#0B0080><strong>二路归并排序</strong></font>，即归并过程中总是以2个子序列作为一组合并单元。归并排序又分为<font color=#0B0080><strong>&ldquo;Top-down implementation(自顶向下)&rdquo;</strong></font>和<font color=#0B0080><strong>&ldquo;Bottom-up implementation(自底向下)&rdquo;</strong></font>两种实现方式。不管是哪种方式，都必须进行两个子序列合并这一步，也称作<font color=#0B0080><strong>一次归并</strong></font>。下面先看看一次归并的思路和算法。</p>

<p>图1为合并过程的示意图。因为归并排序是基于两个已经有序的子序列前提下进行合并的，所以只要同时遍历两个子序列，然后依次比较就可以至少处理完一个子序列，然后把还有剩余元素的子序列中的元素追加到新序列即可，时间复杂度是O(n)。合并过程如下图1所示：</p>

<p><sup>图1：一次归并示意图</sup><br>
<img src="http://youngjd.com/images/2017-02-20-1.png" height="500" width="400" alt="Alt text" /></p>

<p><sup>> 一次归并代码实现如下：</sup></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">merge</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">mid</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// b1[] =&gt; a[left .. mid]  左子数组</span>
</span><span class='line'>  <span class="c1">// b2[] =&gt; b[mid + 1.. right - 1] 右子数组</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 定义临时数组用于存放两个子数组合并后的结果，长度为两个子数组的长度和</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">temp</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">b1_i</span> <span class="o">=</span> <span class="n">left</span><span class="o">,</span> <span class="n">b2_i</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">temp_i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 合并两个已排序的子数组为一个有序数组</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">b1_i</span> <span class="o">&lt;=</span> <span class="n">mid</span> <span class="o">&amp;&amp;</span> <span class="n">b2_i</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">temp</span><span class="o">[</span><span class="n">temp_i</span><span class="o">++]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">b1_i</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">a</span><span class="o">[</span><span class="n">b2_i</span><span class="o">]</span> <span class="o">?</span> <span class="n">a</span><span class="o">[</span><span class="n">b1_i</span><span class="o">++]</span> <span class="o">:</span> <span class="n">a</span><span class="o">[</span><span class="n">b2_i</span><span class="o">++];</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 如果左子数组还有剩余元素，则追加到临时数组的末尾</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">b1_i</span> <span class="o">&lt;=</span> <span class="n">mid</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">temp</span><span class="o">[</span><span class="n">temp_i</span><span class="o">++]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">b1_i</span><span class="o">++];</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 如果右子数组还有剩余元素，则追加到临时数组的末尾</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">b2_i</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">temp</span><span class="o">[</span><span class="n">temp_i</span><span class="o">++]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">b2_i</span><span class="o">++];</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 拷贝临时数组中合并好的有序数组到原数组</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">temp_i</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">a</span><span class="o">[</span><span class="n">left</span> <span class="o">+</span> <span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着分别说明&#8221;Top-down implementation(自顶向下)&ldquo;和&#8221;Bottom-up implementation(自底向下)&#8221;两种实现方式。</p>

<h4>一、 自顶向下</h4>

<p>自顶向下就是递归地拆序列为子序列，直到子序列长度为1，然后两两合并子序列成新的有序序列。假设初始数组是A[left&hellip;right]，则步骤如下：</p>

<h5>1) 分解：</h5>

<p>将当前数组划分为两个子数组，划分下标mid = (left + right) / 2， 即划分为B1[left&hellip;mid]和B2[mid + 1&hellip;right]两个子数组。</p>

<h5>2) 求解:</h5>

<p>递归地对B1[left&hellip;mid]和B2[mid + 1&hellip;right]两个子数组求解（排序），直到子数组长度为1（即仅剩一个元素，一个元素自然有序，则得出问题解）。</p>

<h5>3) 合并:</h5>

<p>将两个已求解的子问题（两个已排序的子数组）合并成一个有序的解数组（得出上一层的问题解），如此类推逐层往上归并相邻的两个已排好序的子数组最后得到一个有序的最终解数组。</p>

<p><sup>图2：自顶向下的归并排序过程示意图</sup><br>
<img src="http://youngjd.com/images/2017-02-20-2.png" height="400" width="450" alt="Alt text" /></p>

<p><sup>> 自顶向下的递归版本</sup></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">mergeSortRecursively</span> <span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// 分解数组</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>      <span class="c1">// 对左子数组递归地进行归并排序</span>
</span><span class='line'>      <span class="n">mergeSort</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">mid</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// 对右子数组递归地进行归并排序</span>
</span><span class='line'>      <span class="n">mergeSort</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">right</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// 合并两个已排序的数组为一个有序数组和复制到原数组上</span>
</span><span class='line'>      <span class="n">merge</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">mid</span><span class="o">,</span> <span class="n">right</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">5</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">13</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">11</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">10</span><span class="o">};</span>
</span><span class='line'>  <span class="n">mergeSortRecursively</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="n">PrintHelper</span><span class="o">.</span><span class="na">printArray</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 自顶向下的递归版本的输出结果</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">5</span> <span class="mi">9</span> <span class="mi">3</span> <span class="mi">6</span> <span class="mi">4</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">12</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">9</span> <span class="mi">6</span> <span class="mi">4</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">12</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">9</span> <span class="mi">6</span> <span class="mi">4</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">12</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">9</span> <span class="mi">4</span> <span class="mi">6</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">12</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">9</span> <span class="mi">4</span> <span class="mi">6</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">12</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">9</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">12</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">9</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">12</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">9</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">7</span> <span class="mi">12</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">9</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">7</span> <span class="mi">12</span> <span class="mi">8</span> <span class="mi">11</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">9</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">7</span> <span class="mi">12</span> <span class="mi">8</span> <span class="mi">10</span> <span class="mi">11</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">9</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">7</span> <span class="mi">8</span> <span class="mi">10</span> <span class="mi">11</span> <span class="mi">12</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span> <span class="mi">8</span> <span class="mi">9</span> <span class="mi">10</span> <span class="mi">11</span> <span class="mi">12</span> <span class="mi">13</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><sup>> 自顶向下的非递归版本</sup></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">class</span> <span class="nc">StackItem</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="n">left</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="n">right</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="n">read</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">StackItem</span><span class="o">(</span><span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">left</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">right</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// read = 0：还没有拆分子问题</span>
</span><span class='line'><span class="c1">// read = 1: 如果当前栈的read=1，则说明它的左子问题已经处理完出栈</span>
</span><span class='line'><span class="c1">// read = 2：如果当前栈的read=2，则说明它的右子问题已经处理完出栈。也就说明两个子问题已经解决，可以进行合并。</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">mergeSortUnRecursively</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Stack</span><span class="o">&lt;</span><span class="n">StackItem</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 推入初始栈顶</span>
</span><span class='line'>  <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="k">new</span> <span class="n">StackItem</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">));</span>
</span><span class='line'>  <span class="c1">// 一直遍历直到栈为空</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(!</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// 拿到当前栈顶元素</span>
</span><span class='line'>      <span class="n">StackItem</span> <span class="n">si</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">peek</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">// 表示左右子序列已经排好序，可以进行合并</span>
</span><span class='line'>      <span class="c1">// 合并完之后出栈</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">si</span><span class="o">.</span><span class="na">read</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">merge</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">si</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="o">(</span><span class="n">si</span><span class="o">.</span><span class="na">left</span> <span class="o">+</span> <span class="n">si</span><span class="o">.</span><span class="na">right</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">,</span> <span class="n">si</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span><span class='line'>          <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">// 分解序列</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">_mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">si</span><span class="o">.</span><span class="na">left</span> <span class="o">+</span> <span class="n">si</span><span class="o">.</span><span class="na">right</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">si</span><span class="o">.</span><span class="na">left</span> <span class="o">&lt;</span> <span class="n">si</span><span class="o">.</span><span class="na">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// 当前序列还没有进行分解，首先拆分左子序列，入栈</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">si</span><span class="o">.</span><span class="na">read</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="k">new</span> <span class="n">StackItem</span><span class="o">(</span><span class="n">si</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">_mid</span><span class="o">));</span>
</span><span class='line'>              <span class="c1">// 标志左序列已经推入栈中</span>
</span><span class='line'>              <span class="n">si</span><span class="o">.</span><span class="na">read</span><span class="o">++;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="c1">// 左子数组已经处理完，回到上一个栈状态，继续拆分右子数组，入栈</span>
</span><span class='line'>          <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">si</span><span class="o">.</span><span class="na">read</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="k">new</span> <span class="n">StackItem</span><span class="o">(</span><span class="n">_mid</span><span class="o">,</span> <span class="n">si</span><span class="o">.</span><span class="na">right</span><span class="o">));</span>
</span><span class='line'>              <span class="c1">// 标志右序列已经推入栈中</span>
</span><span class='line'>              <span class="n">si</span><span class="o">.</span><span class="na">read</span><span class="o">++;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// 如果已经是最小子序列（序列中只有一个元素），则不用处理，直接出栈</span>
</span><span class='line'>          <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">5</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">13</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">11</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">10</span><span class="o">};</span>
</span><span class='line'>  <span class="n">mergeSortUnRecursively</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="n">PrintHelper</span><span class="o">.</span><span class="na">printArray</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 自顶向下的非递归版本的输出结果</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">5</span> <span class="mi">9</span> <span class="mi">3</span> <span class="mi">6</span> <span class="mi">4</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">12</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">9</span> <span class="mi">6</span> <span class="mi">4</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">12</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">9</span> <span class="mi">6</span> <span class="mi">4</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">12</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">9</span> <span class="mi">4</span> <span class="mi">6</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">12</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">9</span> <span class="mi">4</span> <span class="mi">6</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">12</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">9</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">12</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">9</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">12</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">9</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">7</span> <span class="mi">12</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">9</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">7</span> <span class="mi">12</span> <span class="mi">8</span> <span class="mi">11</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">9</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">7</span> <span class="mi">12</span> <span class="mi">8</span> <span class="mi">10</span> <span class="mi">11</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">9</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">7</span> <span class="mi">8</span> <span class="mi">10</span> <span class="mi">11</span> <span class="mi">12</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span> <span class="mi">8</span> <span class="mi">9</span> <span class="mi">10</span> <span class="mi">11</span> <span class="mi">12</span> <span class="mi">13</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>二、 自底向上</h4>

<p>自底向上就是把序列当作是由n个长度为1的子序列组成的序列，然后以2个序列为单元循环来回地合并子序列。如图3所示，开始时把序列看成是一个由5个长度为1的子序列组成的序列，然后第1个子序列和第2个子序列归并，第3个子序列和第4个子序列归并，第5个（n为奇数的情况）不进行归并，这样就产生了2个长度为2的子序列和1个长度为1的子序列，每次循环都来回地归并元素，这样的一次循环操作称作是<font color=#0B0080><strong>一趟归并</strong></font>。接着是第2躺归并，仍然把序列当作是由2个长度为2的子序列组成的序列，最后一个长度为1的序列依然不进行归并，然后像第1躺归并一样，以2个序列为单元归并。如此反复，直到最终得到一个长度为n的子序列为止。</p>

<p><sup>图3：自底向上的归并排序过程示意图</sup><br>
<img src="http://youngjd.com/images/2017-02-20-3.png" height="400" width="400" alt="Alt text" /></p>

<p><sup>> 自底向上的归并排序版本</sup></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">downTopMerge</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>  <span class="c1">// 进行log(2为底)N + 1趟归并</span>
</span><span class='line'>  <span class="c1">// sublistLen: 当前这趟归并的子序列长度</span>
</span><span class='line'>  <span class="c1">// 从1开始，每次以2的倍数递增（因为是以2个序列为单元进行两两合并，1&gt;2&gt;4&gt;8&gt;16....）</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">sublistLen</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">sublistLen</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">sublistLen</span> <span class="o">*=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// i: 当前归并序列的左子序列的起始坐标</span>
</span><span class='line'>      <span class="c1">// 每次归并2个序列，每个序列长度为sublistLen，因此下一个左子序列的起始坐标就是 i = i + 2 * sublistLen</span>
</span><span class='line'>      <span class="c1">// 左子序列的下标不能大于整个原序列的长度</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">sublistLen</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// 进行一次归并</span>
</span><span class='line'>          <span class="c1">// 左子序列[i .. i + sublistLen], 右子序列 [i + sublistLen + 1 ... i + 2 * sublistLen - 1]</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">sublistLen</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// i + sublistLen : 右子序列的起始坐标，减1就是左子序列的结束坐标，</span>
</span><span class='line'>                                        <span class="c1">// 即被这两个序列合并成的新序列的中间坐标</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">sublistLen</span><span class="o">)</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// i + 2 * sublistLen : 下一个左子序列的起始坐标</span>
</span><span class='line'>                                                <span class="c1">// 所以右子序列的结束坐标就是它的前一个坐标= (i + 2 * sublistLen) - 1</span>
</span><span class='line'>          <span class="n">merge</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">mid</span><span class="o">,</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="o">),</span>  <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">right</span><span class="o">,</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="o">));</span>
</span><span class='line'>          <span class="n">PrintHelper</span><span class="o">.</span><span class="na">printArray</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">5</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">13</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">11</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">10</span><span class="o">};</span>
</span><span class='line'>  <span class="n">downTopMerge</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'>  <span class="n">PrintHelper</span><span class="o">.</span><span class="na">printArray</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 自底向上的输出结果</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">5</span> <span class="mi">9</span> <span class="mi">3</span> <span class="mi">6</span> <span class="mi">4</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">12</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">9</span> <span class="mi">6</span> <span class="mi">4</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">12</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">9</span> <span class="mi">4</span> <span class="mi">6</span> <span class="mi">13</span> <span class="mi">1</span> <span class="mi">12</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">9</span> <span class="mi">4</span> <span class="mi">6</span> <span class="mi">1</span> <span class="mi">13</span> <span class="mi">12</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">9</span> <span class="mi">4</span> <span class="mi">6</span> <span class="mi">1</span> <span class="mi">13</span> <span class="mi">7</span> <span class="mi">12</span> <span class="mi">11</span> <span class="mi">8</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">9</span> <span class="mi">4</span> <span class="mi">6</span> <span class="mi">1</span> <span class="mi">13</span> <span class="mi">7</span> <span class="mi">12</span> <span class="mi">8</span> <span class="mi">11</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">9</span> <span class="mi">4</span> <span class="mi">6</span> <span class="mi">1</span> <span class="mi">13</span> <span class="mi">7</span> <span class="mi">12</span> <span class="mi">8</span> <span class="mi">11</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">9</span> <span class="mi">4</span> <span class="mi">6</span> <span class="mi">1</span> <span class="mi">13</span> <span class="mi">7</span> <span class="mi">12</span> <span class="mi">8</span> <span class="mi">11</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">9</span> <span class="mi">1</span> <span class="mi">4</span> <span class="mi">6</span> <span class="mi">13</span> <span class="mi">7</span> <span class="mi">12</span> <span class="mi">8</span> <span class="mi">11</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">9</span> <span class="mi">1</span> <span class="mi">4</span> <span class="mi">6</span> <span class="mi">13</span> <span class="mi">7</span> <span class="mi">8</span> <span class="mi">11</span> <span class="mi">12</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">9</span> <span class="mi">1</span> <span class="mi">4</span> <span class="mi">6</span> <span class="mi">13</span> <span class="mi">7</span> <span class="mi">8</span> <span class="mi">11</span> <span class="mi">12</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">9</span> <span class="mi">13</span> <span class="mi">7</span> <span class="mi">8</span> <span class="mi">11</span> <span class="mi">12</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">9</span> <span class="mi">13</span> <span class="mi">7</span> <span class="mi">8</span> <span class="mi">10</span> <span class="mi">11</span> <span class="mi">12</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span> <span class="mi">8</span> <span class="mi">9</span> <span class="mi">10</span> <span class="mi">11</span> <span class="mi">12</span> <span class="mi">13</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>完！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[算法学习笔记-插入排序]]></title>
    <link href="http://youngjd.com/blog/2017/02/18/sort-algo/"/>
    <updated>2017-02-18T17:27:42+08:00</updated>
    <id>http://youngjd.com/blog/2017/02/18/sort-algo</id>
    <content type="html"><![CDATA[<blockquote><p>Surviving is not relevant.Living is. （生存本身没有意义，生活才有。) by 电影《机器纪元》</p></blockquote>

<!-- more -->


<hr />

<h3>插入排序 &ndash; Insertion sort</h3>

<p><sup>> 以下是来自wikipedia的解释<sup></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort. However, insertion sort provides several advantages:
</span><span class='line'>Simple implementation: Jon Bentley shows a three-line C version, and a five-line optimized version[1]:116
</span><span class='line'>Efficient for (quite) small data sets, much like other quadratic sorting algorithms
</span><span class='line'>More efficient in practice than most other simple quadratic (i.e., O(n2)) algorithms such as selection sort or bubble sort
</span><span class='line'>Adaptive, i.e., efficient for data sets that are already substantially sorted: the time complexity is O(nk) when each element in the input is no more than k places away from its sorted position
</span><span class='line'>Stable; i.e., does not change the relative order of elements with equal keys
</span><span class='line'>In-place; i.e., only requires a constant amount O(1) of additional memory space
</span><span class='line'>Online; i.e., can sort a list as it receives it
</span><span class='line'>When people manually sort cards in a bridge hand, most use a method that is similar to insertion sort.</span></code></pre></td></tr></table></div></figure>


<p>插入排序就好像打扑克牌的时候，从牌堆中一张张牌依次取牌，然后和手上已有的牌大小比较，插入到适合的位置上。比如打大老二扑克游戏，通过发牌已经发了13张牌到你的位置上，现在你从这13张牌堆中一张张地依次拿到手上。比如13张牌堆是[5, 2, 9, 3, 6, 4, 13(K), 1(A), 12(Q), 7, 11(J), 8, 10]，假设是按照升序排序，那么整理手牌的顺序如下：</p>

<h5>STEP 1：因为手上没有牌，所以5放到第一个位置</h5>

<pre><code>5 - - - - - - - - - - - -
</code></pre>

<h5>STEP 2：手上是一张5，从牌堆拿到2，2比5小，所以2替换5放到第一个位置，5放到第二个位置</h5>

<pre><code>2 5 - - - - - - - - - - -
</code></pre>

<h5>STEP 3: 从牌堆拿到9，9比5和2大，所以直接插入到5的后面</h5>

<pre><code>2 5 9 - - - - - - - - - -
</code></pre>

<h5>STEP 4：现在手上是2，5，9顺序的手牌，从牌堆拿到3，3比5和9小，所以5，9顺延往后整理，3比2大，所以3就会插入到2的后面，5的前面</h5>

<pre><code>2 3 5 9 - - - - - - - - -
</code></pre>

<p>如此类推直到取完牌堆上所有的牌。</p>

<p>以下是wikipedia上插入排序的伪代码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for i ← 1 to length(A)
</span><span class='line'>    j ← i
</span><span class='line'>    while j &gt; 0 and A[j-1] &gt; A[j]
</span><span class='line'>        swap A[j] and A[j-1]
</span><span class='line'>        j ← j - 1
</span><span class='line'>    end while
</span><span class='line'>end for</span></code></pre></td></tr></table></div></figure>


<p>但是刚开始看的时候看不太清楚这个思路，所以我按照上面整理扑克牌的思路写了一个易于自己理解的版本，然后再进行优化。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// 定义和初始化13张扑克牌牌堆</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">[]</span> <span class="n">_13pokers</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">5</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">13</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">11</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">10</span><span class="o">};</span>
</span><span class='line'>  <span class="n">sort1</span><span class="o">(</span><span class="n">_13pokers</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sort1</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">_13pokers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">_13pokers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>  <span class="c1">// 手牌数组</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">[]</span> <span class="n">handPokers</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">len</span><span class="o">];</span>
</span><span class='line'>  <span class="c1">// 当前手牌数量</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">currentHandPokerNum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="c1">// 依次从牌堆取牌</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// 从牌堆取出的第i张牌</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">newPokerVal</span> <span class="o">=</span> <span class="n">_13pokers</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>      <span class="c1">// 新牌与手牌比较并获取插入位置</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">insertIndex</span> <span class="o">=</span> <span class="n">getInsertPosition</span><span class="o">(</span><span class="n">newPokerVal</span><span class="o">,</span> <span class="n">currentHandPokerNum</span><span class="o">,</span> <span class="n">handPokers</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// 插入新牌到手牌</span>
</span><span class='line'>      <span class="n">handPokers</span><span class="o">[</span><span class="n">insertIndex</span><span class="o">]</span> <span class="o">=</span> <span class="n">newPokerVal</span><span class="o">;</span>
</span><span class='line'>      <span class="c1">// 当前手牌数量加1</span>
</span><span class='line'>      <span class="n">currentHandPokerNum</span> <span class="o">++;</span>
</span><span class='line'>      <span class="n">PrintHelper</span><span class="o">.</span><span class="na">printArray</span><span class="o">(</span><span class="n">handPokers</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getInsertPosition</span><span class="o">(</span><span class="kt">int</span> <span class="n">newPokerVal</span><span class="o">,</span> <span class="kt">int</span> <span class="n">currentHandPokerNum</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">handPokers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// 从手牌的尾端(大)至开头(小)进行比较</span>
</span><span class='line'>  <span class="c1">// 末尾牌的下标即手牌数量-1，开始时手上没有牌，所以下标为-1</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">handIndex</span> <span class="o">=</span> <span class="n">currentHandPokerNum</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// 1. 没手牌时，不需要进行比较。所以新取到的手牌插入到第一个位置，即下标为0，所以handIndex+1</span>
</span><span class='line'>      <span class="c1">// 2. 所有手牌比较完毕时，新牌依然没有找到插入位置，则说明，新牌是现在手牌当中最小的牌，所以插入到开头位置，即handIndex+1</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">handIndex</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">handIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">// 取出当前需要和新牌比较的手牌</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">handIndexPokerVal</span> <span class="o">=</span> <span class="n">handPokers</span><span class="o">[</span><span class="n">handIndex</span><span class="o">];</span>
</span><span class='line'>      <span class="c1">// 如果新牌的值比当前手牌的值小</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">newPokerVal</span> <span class="o">&lt;</span> <span class="n">handIndexPokerVal</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// 把当前这张手牌往后移一位，腾出的空间或许给新手牌，或给下一张也比新牌大的手牌</span>
</span><span class='line'>          <span class="n">handPokers</span><span class="o">[</span><span class="n">handIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">handPokers</span><span class="o">[</span><span class="n">handIndex</span><span class="o">];</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">// 如果新牌的值比当前手牌的值大，则新牌应该插入到当前手牌的后一位，所以handIndex+1</span>
</span><span class='line'>      <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">handIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">// 比较下一张手牌（方向往手牌开头，值小的一端 &lt;--- ）</span>
</span><span class='line'>      <span class="n">handIndex</span> <span class="o">--;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="mi">5</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">5</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">5</span> <span class="mi">9</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">9</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">9</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">9</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">9</span> <span class="mi">13</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">9</span> <span class="mi">13</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">9</span> <span class="mi">12</span> <span class="mi">13</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span> <span class="mi">9</span> <span class="mi">12</span> <span class="mi">13</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span> <span class="mi">9</span> <span class="mi">11</span> <span class="mi">12</span> <span class="mi">13</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span> <span class="mi">8</span> <span class="mi">9</span> <span class="mi">11</span> <span class="mi">12</span> <span class="mi">13</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span> <span class="mi">8</span> <span class="mi">9</span> <span class="mi">10</span> <span class="mi">11</span> <span class="mi">12</span> <span class="mi">13</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>写完第一个版本之后，思路清晰了一点，现在看看哪些地方可以进行简化和优化，直到接近伪代码的样子。</p>

<h5>1.当前手牌数量就是从牌堆拿的数量，比如我现在从牌堆拿第一张牌，则当前手牌就是1。</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">handIndex</span> <span class="o">=</span> <span class="n">currentHandPokerNum</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="o">=</span><span class="err">》</span> <span class="kt">int</span> <span class="n">handIndex</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.wiki中有一段解释，插入排序是一个in-place的算法，即不需要申请额外空间的算法，其前后结果没有依赖关系，从内存角度来说，可以直接原地覆盖掉。而第一个版本的算法明显的申请了一个额外的空间，即handPokers，它的大小和输入的数组一样。按照这个解释，这两个数组是可以共用的而不影响结果的计算。所以可以去掉handPokers，用原数组直接进行计算。PS：改成一个数组，从扑克牌的角度，就是原本是从牌堆依次取牌，现在改成把13张未排序的牌一次全部拿到手上，然后从第一张开始进行依次比较和插入。第一张牌同样地不需要比较，直接插入到手牌第一张，即什么都不做。第二张牌和第一张比较，如果第一张牌小，则第一张牌挪到第二张牌的位置上，然后当前牌插入到位置1。就是手牌的右半部份就相当于牌堆，左半部分相当于手牌。</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sort1</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">_13pokers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">_13pokers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">newPokerVal</span> <span class="o">=</span> <span class="n">_13pokers</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">insertIndex</span> <span class="o">=</span> <span class="n">getInsertPosition</span><span class="o">(</span><span class="n">newPokerVal</span><span class="o">,</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">_13pokers</span><span class="o">);</span>
</span><span class='line'>      <span class="n">_13pokers</span><span class="o">[</span><span class="n">insertIndex</span><span class="o">]</span> <span class="o">=</span> <span class="n">newPokerVal</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>3. 把do-while改成while</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getInsertPosition</span><span class="o">(</span><span class="kt">int</span> <span class="n">newPokerVal</span><span class="o">,</span> <span class="kt">int</span> <span class="n">handIndex</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">handPokers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">handIndex</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">handPokers</span><span class="o">[</span><span class="n">handIndex</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">newPokerVal</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">handPokers</span><span class="o">[</span><span class="n">handIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">handPokers</span><span class="o">[</span><span class="n">handIndex</span><span class="o">];</span>
</span><span class='line'>      <span class="n">handIndex</span> <span class="o">--;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">handIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>4. 合并代码并通用化常量</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">5</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">13</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">11</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">10</span><span class="o">};</span>
</span><span class='line'>  <span class="n">sort2</span><span class="o">(</span><span class="n">array</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sort2</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">ai</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">insertIndex</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">insertIndex</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">array</span><span class="o">[</span><span class="n">insertIndex</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">ai</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">array</span><span class="o">[</span><span class="n">insertIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">insertIndex</span><span class="o">];</span>
</span><span class='line'>          <span class="n">insertIndex</span> <span class="o">--;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">array</span><span class="o">[</span><span class="n">insertIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">ai</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">PrintHelper</span><span class="o">.</span><span class="na">printArray</span><span class="o">(</span><span class="n">array</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>sort2基本就和伪代码差不多了。</p>

<p>完！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kafka集群部署与简单应用]]></title>
    <link href="http://youngjd.com/blog/2017/02/16/kafka-study-record/"/>
    <updated>2017-02-16T17:27:42+08:00</updated>
    <id>http://youngjd.com/blog/2017/02/16/kafka-study-record</id>
    <content type="html"><![CDATA[<blockquote></blockquote>

<!-- more -->


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker之牛刀小试]]></title>
    <link href="http://youngjd.com/blog/2017/01/18/docker-demo/"/>
    <updated>2017-01-18T17:44:42+08:00</updated>
    <id>http://youngjd.com/blog/2017/01/18/docker-demo</id>
    <content type="html"><![CDATA[<blockquote><p>很多事情，必须要在亲身经历和体验它的多样性之后，再去确定它的唯一性。我要一些简单和重要的东西。尝试为身边的人服务，放低自己，有所付出。也许我所做的一切，不过是滴水之力，对身边的世间推进并不大，这个世界将依旧由权利和欲望来颠覆。但我成全自己所感受到的指引。这仅是属于我自己的微小而真实的信念。 《莲花》by 庆山（安妮宝贝）</p></blockquote>

<!-- more -->


<hr />

<br>


<p><img src="http://youngjd.com/images/20170123-3.png" height="150" width="150" alt="Alt text" /></p>

<p>本文章基于读者已经对docker，springboot，springcloud有一定了解的基础上阅读。</p>

<p>文章目录 <a name="000" id="000"></a></p>

<h6>1. <a href="#001">使用SpringBoot编写helloworld</a></h6>

<h6>2. <a href="#002">使用openresty作为负载均衡</a></h6>

<h6>3. <a href="#003">使用mysql作为数据存储</a></h6>

<h6>4. <a href="#004">配置mysql主从，并使用docker包装一个mycat中间件进行读写分离</a></h6>

<h6>5. <a href="#005">使用springcloud+zookeeper进行服务注册和发现</a></h6>

<h6>6. <a href="#006">单机多容器管理利器docker-compose</a></h6>

<hr />

<p><a name="001" id="001"></a></p>

<h4>1.使用SpringBoot编写helloworld <a style="text-decoration:none;" href="#000">◥</a></h4>

<p>使用springboot的方式构建好项目，写一个简单的controller进行&#8221;helloworld&#8221;的输出。</p>

<p>启动类代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">yjd</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">springboot</span><span class="o">.</span><span class="na">helloworld</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @author yjd</span>
</span><span class='line'><span class="cm"> * @since 2017/1/18</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@SpringBootApplication</span>
</span><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Controller代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">yjd</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">springboot</span><span class="o">.</span><span class="na">helloworld</span><span class="o">.</span><span class="na">controller</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">yjd.demo.springboot.helloworld.controller.base.ApiResult</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @author yjd</span>
</span><span class='line'><span class="cm"> * @since 2017/1/18</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@RestController</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">IndexController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/index&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">ApiResult</span> <span class="nf">index</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ApiResult</span><span class="o">.</span><span class="na">success</span><span class="o">().</span><span class="na">addData</span><span class="o">(</span><span class="s">&quot;msg&quot;</span><span class="o">,</span> <span class="s">&quot;helloWorld&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>pom.xml代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>yjd.demo.springboot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>helloworld<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>0.1.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;packaging&gt;</span>jar<span class="nt">&lt;/packaging&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;parent&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>1.4.2.RELEASE<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/parent&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>      <span class="nt">&lt;java.version&gt;</span>1.8<span class="nt">&lt;/java.version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;build&gt;</span>
</span><span class='line'>      <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>          <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>              <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/build&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;repositories&gt;</span>
</span><span class='line'>      <span class="nt">&lt;repository&gt;</span>
</span><span class='line'>          <span class="nt">&lt;id&gt;</span>spring-releases<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>          <span class="nt">&lt;url&gt;</span>https://repo.spring.io/libs-release<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/repository&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/repositories&gt;</span>
</span><span class='line'>  <span class="nt">&lt;pluginRepositories&gt;</span>
</span><span class='line'>      <span class="nt">&lt;pluginRepository&gt;</span>
</span><span class='line'>          <span class="nt">&lt;id&gt;</span>spring-releases<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>          <span class="nt">&lt;url&gt;</span>https://repo.spring.io/libs-release<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/pluginRepository&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/pluginRepositories&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>服务器上新建一个目录，把打包好的jar包上传到target目录，并新建一个Dockerfile文件。</p>

<p><img src="http://youngjd.com/images/20170120-1.png" alt="Alt text" /></p>

<p>Dockerfile文件内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>FROM openjdk
</span><span class='line'>
</span><span class='line'>MAINTAINER yjd
</span><span class='line'>
</span><span class='line'>VOLUME [&quot;/usr/local/app&quot;]
</span><span class='line'>
</span><span class='line'>EXPOSE 8080
</span><span class='line'>
</span><span class='line'>ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/local/app/helloworld.jar&quot;]
</span></code></pre></td></tr></table></div></figure>


<p>然后使用docker build命令构建镜像。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker build -t yjd/helloworld .
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://youngjd.com/images/20170120-2.png" alt="Alt text" /></p>

<p>镜像构建成功后，启动容器。PS：需要部署的文件通过挂载的方式和容器同步，这样代码更新后，替换jar包重新启动容器即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker run --name helloworld1 -p 50001:8080 -v /home/op/dev/app/target:/usr/local/app -d yjd/helloworld
</span></code></pre></td></tr></table></div></figure>


<p>输入docker ps查看容器已经成功启动。</p>

<p><img src="http://youngjd.com/images/20170120-3.png" alt="Alt text" /></p>

<p>输入ip地址+端口测试访问是否正确。<a href="http://xxx.xxx.xxx.xxx:50001/index">http://xxx.xxx.xxx.xxx:50001/index</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;success&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;apiVersion&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;apiCode&quot;</span><span class="p">:</span> <span class="s2">&quot;OK&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;data&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;msg&quot;</span><span class="p">:</span> <span class="s2">&quot;helloWorld&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><a name="002" id="002"></a></p>

<h4>2.使用openresty作为负载均衡 <a style="text-decoration:none;" href="#000">◥</a></h4>

<p>首先重复上述步骤，启动一个同样功能的springboot应用，构成一个小集群。注意修改容器运行时暴露的端口(50002)和容器名字(helloworld2)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker run --name helloworld2 -p 50002:8080 -v /home/op/dev/app/target:/usr/local/app -d yjd/helloworld
</span></code></pre></td></tr></table></div></figure>


<p>两个helloworld容器已经成功启动，访问测试也OK！</p>

<p><img src="http://youngjd.com/images/20170120-4.png" alt="Alt text" /></p>

<p>新建一个目录，命名为openresty，目录结构如下(conf.d和logs两个目录将会以数据卷的形式挂载到容器对应的目录，nginx.conf将拷贝覆盖容器中对应的配置文件)：</p>

<p><img src="http://youngjd.com/images/20170121-1.png" alt="Alt text" /></p>

<p>新建一个dockerfile文件，文件内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>FROM debian
</span><span class='line'>
</span><span class='line'>MAINTAINER yjd
</span><span class='line'>
</span><span class='line'>RUN apt-get -y update
</span><span class='line'>RUN apt-get install -y libreadline-dev libncurses5-dev libpcre3-dev <span class="se">\</span>
</span><span class='line'>  libssl-dev perl make build-essential
</span><span class='line'>RUN apt-get install -y wget
</span><span class='line'>
</span><span class='line'>RUN wget https://openresty.org/download/openresty-1.11.2.1.tar.gz <span class="o">&amp;&amp;</span> tar -zxvf openresty-1.11.2.1.tar.gz -C /usr/local
</span><span class='line'>
</span><span class='line'>RUN <span class="nb">cd</span> /usr/local/openresty-1.11.2.1 <span class="o">&amp;&amp;</span> ./configure --with-luajit --prefix<span class="o">=</span>/opt/openresty <span class="o">&amp;&amp;</span> make <span class="o">&amp;&amp;</span> make install
</span><span class='line'>RUN rm -rf /opt/openresty/nginx/conf/nginx.conf
</span><span class='line'>
</span><span class='line'>COPY ./nginx.conf /opt/openresty/nginx/conf
</span><span class='line'>
</span><span class='line'>VOLUME <span class="o">[</span><span class="s2">&quot;/opt/openresty/nginx/conf/conf.d&quot;</span>, <span class="s2">&quot;/opt/openresty/nginx/logs&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>EXPOSE 80
</span><span class='line'>
</span><span class='line'>CMD <span class="o">[</span><span class="s2">&quot;/opt/openresty/nginx/sbin/nginx&quot;</span>, <span class="s2">&quot;-g&quot;</span>, <span class="s2">&quot;daemon off;&quot;</span><span class="o">]</span>
</span><span class='line'><span class="c">#nginx需要以非守护程序运行，即不能后台运行，否则容器运行后又会马上停止</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用docker build命令构建镜像，镜像构建成功后就可以启动容器了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker run --name openresty --link helloworld2:helloworld2 --link helloworld1:helloworld1 -p 80:80 -v /home/op/dev/openresty/logs:/opt/openresty/nginx/logs -v /home/op/dev/openresty/conf.d:/opt/openresty/nginx/conf/conf.d -d yjd/openresty
</span></code></pre></td></tr></table></div></figure>


<p>如果nginx是搭建在宿主机上的话，upstream的配置直接用127.0.0.1:PORT的方式既可以，但是由于这个实验是单独把nginx服务包装成容器，容器之间的访问需要用到docker的link功能，有两个helloworld服务，则link两次。link成功后，在openresty容器查看hosts，显示如下:</p>

<p><img src="http://youngjd.com/images/20170121-2.png" alt="Alt text" /></p>

<p>再来看看对应的nginx配置。主要是upstream的配置，直接用docker的主机名进行配置，也可以用host对应的ip，只不过docker容器是无状态的，每次重新启动，ip都可能变，而因为link的时候指定了被链接容器的别名，所以helloworld1和helloworld2就不变了。PS：注意这里不是用的容器暴露给宿主机的IP，而是用的容器内部运行的后台程序的端口，springboot默认是8080(使用link就是为了容器间的内部访问)。这里我自己坑了自己很久，一直用的50001和50002，nginx一直502。还以为要去捣腾各种网络桥接的问题，各种百度谷歌都找不到解决办法。结果洗了个热水澡出来就发现是自己傻x了！！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>upstream yjd.helloworld.com <span class="o">{</span>
</span><span class='line'>  server helloworld1:8080 <span class="nv">weight</span><span class="o">=</span>5;
</span><span class='line'>  server helloworld2:8080 <span class="nv">weight</span><span class="o">=</span>5;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>log_format helloworld <span class="s1">&#39;$remote_addr - $remote_user [$time_local] $request &#39;</span>
</span><span class='line'>            <span class="s1">&#39;&quot;$status&quot; $body_bytes_sent &quot;$http_referer&quot; &#39;</span>
</span><span class='line'>            <span class="s1">&#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &quot;$request_time&quot; &quot;$request_body&quot; &#39;</span>;                        
</span><span class='line'>server <span class="o">{</span>
</span><span class='line'>      listen  80;
</span><span class='line'>      server_name xxx.xxx.xxx.xxx; <span class="c"># 由于没有备案域名可用，此处就用IP代替</span>
</span><span class='line'>      access_log /opt/openresty/nginx/logs/helloworld.com-access.log helloworld;
</span><span class='line'>
</span><span class='line'>      location / <span class="o">{</span>
</span><span class='line'>              proxy_set_header Host <span class="nv">$host</span>;
</span><span class='line'>              proxy_set_header X-Real-IP <span class="nv">$remote_addr</span>;
</span><span class='line'>              proxy_set_header X-Forwarded-For <span class="nv">$proxy_add_x_forwarded_for</span>;
</span><span class='line'>              proxy_pass http://yjd.helloworld.com;
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>浏览器直接访问IP，输出结果同样。查看宿主机的logs挂载目录，nginx的日志也成功输出到此目录，查看日志内容也正常，测试OK！！</p>

<p><img src="http://youngjd.com/images/20170121-3.png" alt="Alt text" /></p>

<hr />

<p><a name="003" id="003"></a></p>

<h4>3.使用mysql作为数据存储 <a style="text-decoration:none;" href="#000">◥</a></h4>

<p>mysql的docker镜像直接使用docker官方hub上的mariadb镜像。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker pull mariadb
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://youngjd.com/images/20170122-1.png" alt="Alt text" /></p>

<p>在宿主机上新建一个mysql目录作为数据卷，启动mariadb容器时使用-v进行挂载：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker run --name mariadb-master -p 53306:3306 -v /home/op/dev/mysql/data:/var/lib/mysql -e <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span>123456 -d mariadb
</span></code></pre></td></tr></table></div></figure>


<p>容器启动成功后，data目录下就会同步出现mysql的数据文件</p>

<p><img src="http://youngjd.com/images/20170122-2.png" alt="Alt text" /></p>

<p>容器启动后，使用docker exec命令进入容器, 创建helloworld数据库和测试表数据：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker <span class="nb">exec</span> -ti mariadb-master /bin/bash
</span></code></pre></td></tr></table></div></figure>


<p>容器准备好后，回头修改springboot。pom文件增加mybatis和mysql驱动依赖：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>org.mybatis.spring.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>mybatis-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>1.2.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>5.1.40<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置application.yml数据源：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>spring:
</span><span class='line'>  datasource:
</span><span class='line'>      name: helloworld
</span><span class='line'>      url: jdbc:mysql://mariadb-master:3306/helloworld?useUnicode=true<span class="err">&amp;</span>characterEncoding=UTF-8<span class="err">&amp;</span>zeroDateTimeBehavior=convertToNull<span class="err">&amp;</span>autoReconnect=true<span class="err">&amp;</span>serverTimezone=UTC
</span><span class='line'>      username: ???
</span><span class='line'>      password: ?????
</span><span class='line'>      driver-class-name: com.mysql.jdbc.Driver
</span></code></pre></td></tr></table></div></figure>


<p>增加mapper类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">yjd</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">springboot</span><span class="o">.</span><span class="na">helloworld</span><span class="o">.</span><span class="na">dao</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ibatis.annotations.Mapper</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ibatis.annotations.Param</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ibatis.annotations.Select</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">yjd.demo.springboot.helloworld.model.User</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @author yjd</span>
</span><span class='line'><span class="cm"> * @since 2017/1/22</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Mapper</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Select</span><span class="o">(</span><span class="s">&quot;SELECT * FROM user WHERE username = #{username}&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">User</span> <span class="nf">getByUsername</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">&quot;username&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">username</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改controller代码，新增如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Autowired</span>
</span><span class='line'><span class="n">UserMapper</span> <span class="n">userMapper</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/user&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">ApiResult</span> <span class="nf">findUser</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;username&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getByUsername</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ApiResult</span><span class="o">.</span><span class="na">fail</span><span class="o">(</span><span class="n">ApiCode</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ApiResult</span><span class="o">.</span><span class="na">success</span><span class="o">().</span><span class="na">addData</span><span class="o">(</span><span class="s">&quot;user&quot;</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改完成后，重新打包并上传到服务器。此时，因为helloworld应用需要访问到mariadb容器中的数据库，所以同启动openresty一样需要用到link，helloworld容器需要link到mariadb容器，启动helloworld容器命令修改如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 服务1</span>
</span><span class='line'>sudo docker run --name helloworld1 --link mariadb-master:mariadb-master -p 50001:8080 -v /home/op/dev/app/target:/usr/local/app -d yjd/helloworld
</span><span class='line'>
</span><span class='line'><span class="c"># 服务2</span>
</span><span class='line'>sudo docker run --name helloworld2 --link mariadb-master:mariadb-master -p 50002:8080 -v /home/op/dev/app/target:/usr/local/app -d yjd/helloworld
</span></code></pre></td></tr></table></div></figure>


<p>访问测试OK！！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">curl</span> <span class="err">http://xxx.xxx.xxx.xxx/user?username=young</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;success&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;apiVersion&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;apiCode&quot;</span><span class="p">:</span> <span class="s2">&quot;OK&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;data&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;username&quot;</span><span class="p">:</span> <span class="s2">&quot;young&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><a name="004" id="004"></a></p>

<h4>4.配置mysql主从，并使用docker包装一个mycat中间件进行读写分离 <a style="text-decoration:none;" href="#000">◥</a></h4>

<p>首先按照上一步再启动一个mariadb-slave容器。PS:这里注意宿主机的数据目录也要新建一个，简单更改为mysql2，同事暴露的端口也要修改。如果了解mysql主从配置的读者应该知道，从服务器是需要和主服务器进行通信的，即从服务器会启用一个专门的线程通过网络通信去抓取主服务器的binlog来进行数据同步。由此可知，mariadb-slave容器需要link到mariadb-master容器，启动命令如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker run --name mariadb-slave --link mariadb-master:mariadb-master -p 53307:3306 -v /home/op/dev/mysql2/data:/var/lib/mysql -e <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span>123456 -d mariadb
</span></code></pre></td></tr></table></div></figure>


<p>容器启动后，就是按照通常的mysql主从配置进行配置即可，步骤如下：</p>

<h5>STEP 1.修改master配置，然后重启容器（即重启数据库，使得配置生效）</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vi /etc/mysql/my.cnf
</span><span class='line'>
</span><span class='line'><span class="o">[</span>mysqld<span class="o">]</span>
</span><span class='line'>server-id <span class="o">=</span> 1
</span><span class='line'><span class="nv">log_bin</span> <span class="o">=</span> /var/log/mysql/mariadb-bin
</span></code></pre></td></tr></table></div></figure>


<h5>STEP 2.修改slave配置（修改server-id），然后重启容器（即重启数据库，使得配置生效）</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vi /etc/mysql/my.cnf
</span><span class='line'>
</span><span class='line'><span class="o">[</span>mysqld<span class="o">]</span>
</span><span class='line'>server-id <span class="o">=</span> 2
</span><span class='line'><span class="nv">log_bin</span> <span class="o">=</span> /var/log/mysql/mariadb-bin
</span></code></pre></td></tr></table></div></figure>


<h5>STEP 3.在master上创建和授权主从复制账号</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>MariaDB <span class="o">[(</span>none<span class="o">)]</span>&gt; grant replication slave on *.* to <span class="s1">&#39;rwsync&#39;</span>@<span class="s1">&#39;%&#39;</span> identified by <span class="s1">&#39;rwsync&#39;</span>;
</span></code></pre></td></tr></table></div></figure>


<p>查询master状态</p>

<p><img src="http://youngjd.com/images/20170123-1.png" alt="Alt text" /></p>

<h5>STEP 4.根据master状态，配置slave</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>MariaDB <span class="o">[(</span>none<span class="o">)]</span>&gt; change master to <span class="nv">master_host</span><span class="o">=</span><span class="s1">&#39;mariadb-master&#39;</span>,master_user<span class="o">=</span><span class="s1">&#39;rwsync&#39;</span>,master_password<span class="o">=</span><span class="s1">&#39;rwsync&#39;</span>,master_log_file<span class="o">=</span><span class="s1">&#39;mariadb-bin.000001&#39;</span>,master_log_pos<span class="o">=</span>315;
</span></code></pre></td></tr></table></div></figure>


<p>开启slave复制</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>MariaDB <span class="o">[(</span>none<span class="o">)]</span>&gt; start slave;
</span></code></pre></td></tr></table></div></figure>


<p>查看slave状态，Slave_IO_Running和Slave_SQL_Running均为YES则表示主从同步正常</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>MariaDB <span class="o">[(</span>none<span class="o">)]</span>&gt; show slave status;
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://youngjd.com/images/20170123-2.png" alt="Alt text" /></p>

<p>接着部署mycat中间件。在官方网站下载mycat releasse版本安装包，上传至服务器新建的mycat目录，目录结构如下：</p>

<p><img src="http://youngjd.com/images/20170124-2.png" alt="Alt text" /></p>

<p>先在宿主机上解压，提取里面的配置文件到数据卷目录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tar -zxvpf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz <span class="o">&amp;&amp;</span> cp -R /home/op/dev/mycat/mycat/conf/. /home/op/dev/mycat/conf <span class="o">&amp;&amp;</span> rm -rf /home/op/dev/mycat/mycat
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://youngjd.com/images/20170124-1.png" alt="Alt text" /></p>

<p>修改server.xml和schema.xml，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>// server.xml，其他配置不变，根据实际情况修改以下部分
</span><span class='line'><span class="nt">&lt;user</span> <span class="na">name=</span><span class="s">&quot;root&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span><span class="nt">&gt;</span>123456<span class="nt">&lt;/property&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;schemas&quot;</span><span class="nt">&gt;</span>helloworld<span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/user&gt;</span>
</span><span class='line'>
</span><span class='line'>// schema.xml
</span><span class='line'>// balance=3：所有读请求随机的路由到写库对应的读库上执行
</span><span class='line'>// writeType=0：所有写操作第一个写库上，即mariadb-master
</span><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;mycat:schema</span> <span class="na">xmlns:mycat=</span><span class="s">&quot;http://io.mycat/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;schema</span> <span class="na">name=</span><span class="s">&quot;helloworld&quot;</span> <span class="na">checkSQLschema=</span><span class="s">&quot;false&quot;</span> <span class="na">dataNode=</span><span class="s">&quot;dn1&quot;</span><span class="nt">&gt;&lt;/schema&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dataNode</span> <span class="na">name=</span><span class="s">&quot;dn1&quot;</span> <span class="na">dataHost=</span><span class="s">&quot;localhost1&quot;</span> <span class="na">database=</span><span class="s">&quot;helloworld&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dataHost</span> <span class="na">name=</span><span class="s">&quot;localhost1&quot;</span> <span class="na">maxCon=</span><span class="s">&quot;1000&quot;</span> <span class="na">minCon=</span><span class="s">&quot;10&quot;</span> <span class="na">balance=</span><span class="s">&quot;3&quot;</span>
</span><span class='line'>                        <span class="na">writeType=</span><span class="s">&quot;0&quot;</span> <span class="na">dbType=</span><span class="s">&quot;mysql&quot;</span> <span class="na">dbDriver=</span><span class="s">&quot;native&quot;</span> <span class="na">switchType=</span><span class="s">&quot;1&quot;</span>  <span class="na">slaveThreshold=</span><span class="s">&quot;100&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;heartbeat&gt;</span>select user()<span class="nt">&lt;/heartbeat&gt;</span>
</span><span class='line'>              <span class="c">&lt;!-- can have multi write hosts --&gt;</span>
</span><span class='line'>              <span class="nt">&lt;writeHost</span> <span class="na">host=</span><span class="s">&quot;mariadb-master&quot;</span> <span class="na">url=</span><span class="s">&quot;mariadb-master:3306&quot;</span> <span class="na">user=</span><span class="s">&quot;root&quot;</span>
</span><span class='line'>                                 <span class="na">password=</span><span class="s">&quot;123456&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                      <span class="c">&lt;!-- can have multi read hosts --&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;readHost</span> <span class="na">host=</span><span class="s">&quot;mariadb-slave&quot;</span> <span class="na">url=</span><span class="s">&quot;mariadb-slave:3306&quot;</span> <span class="na">user=</span><span class="s">&quot;root&quot;</span> <span class="na">password=</span><span class="s">&quot;123456&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/writeHost&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dataHost&gt;</span>
</span><span class='line'><span class="nt">&lt;/mycat:schema&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dockerfile内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>FROM openjdk
</span><span class='line'>
</span><span class='line'>MAINTAINER yjd
</span><span class='line'>
</span><span class='line'>VOLUME [&quot;/opt/mycat/conf&quot;]
</span><span class='line'>
</span><span class='line'>ADD Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz /opt
</span><span class='line'>#使用ADD，docker会自动解压
</span><span class='line'>
</span><span class='line'>EXPOSE 8066 9066
</span><span class='line'>
</span><span class='line'>CMD [&quot;/opt/mycat/bin/mycat&quot;,&quot;console&quot;]
</span></code></pre></td></tr></table></div></figure>


<p>构建镜像：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker build -t yjd/mycat .
</span></code></pre></td></tr></table></div></figure>


<p>由于mycat中间件容器需要访问mariadb-master和mariadb-slave两个数据库容器，所以也需要用到link指令，启动命令如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker run --name mycat --link mariadb-master:mariadb-master --link mariadb-slave:mariadb-slave -v /home/op/dev/mycat/conf:/opt/mycat/conf -p 8066:8066 -p 9066:9066 yjd/mycat
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>在springboot代码里编写新增用户的代码逻辑:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Controller</span>
</span><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/user&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span>
</span><span class='line'><span class="n">ApiResult</span> <span class="nf">createUser</span><span class="o">(</span><span class="nd">@ModelAttribute</span> <span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">userMapper</span><span class="o">.</span><span class="na">createUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ApiResult</span><span class="o">.</span><span class="na">success</span><span class="o">().</span><span class="na">addData</span><span class="o">(</span><span class="s">&quot;new user ID&quot;</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Mapper</span>
</span><span class='line'><span class="nd">@Insert</span><span class="o">(</span><span class="s">&quot;INSERT INTO user(username) VALUES (#{user.username})&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Options</span><span class="o">(</span><span class="n">useGeneratedKeys</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="n">keyProperty</span> <span class="o">=</span> <span class="s">&quot;user.id&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">createUser</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">&quot;user&quot;</span><span class="o">)</span> <span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于helloworld服务器由直接访问mariadb改成通过mycat中间件路由主从数据库，因此需要修改两处地方：</p>

<p>1.修改hellworld数据源配置，主要修改连接host(mycat)和端口(8066)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">spring:</span>
</span><span class='line'><span class="nl">datasource:</span>
</span><span class='line'>  <span class="nl">name:</span> <span class="n">helloworld</span>
</span><span class='line'>  <span class="nl">url:</span> <span class="nl">jdbc:mysql:</span><span class="c1">//mycat:8066/helloworld?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;autoReconnect=true&amp;serverTimezone=UTC</span>
</span><span class='line'>  <span class="nl">username:</span> <span class="n">root</span>
</span><span class='line'>  <span class="nl">password:</span> <span class="mi">123456</span>
</span><span class='line'>  <span class="n">driver</span><span class="o">-</span><span class="n">class</span><span class="o">-</span><span class="nl">name:</span> <span class="n">com</span><span class="o">.</span><span class="na">mysql</span><span class="o">.</span><span class="na">jdbc</span><span class="o">.</span><span class="na">Driver</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.helloworld容器需要从link到mariadb改成link到mycat，修改启动命令如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 服务1</span>
</span><span class='line'>sudo docker run --name helloworld1 --link mycat:mycat -p 50001:8080 -v /home/op/dev/app/target:/usr/local/app -d yjd/helloworld
</span><span class='line'>
</span><span class='line'><span class="c"># 服务2</span>
</span><span class='line'>sudo docker run --name helloworld2 --link mycat:mycat -p 50002:8080 -v /home/op/dev/app/target:/usr/local/app -d yjd/helloworld
</span></code></pre></td></tr></table></div></figure>


<p>打包helloworld应用上传到服务器，用新的命令restart两个helloworld容器。现在来测试下是否成功进行读写分离：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">#</span> <span class="err">新增一个用户</span>
</span><span class='line'><span class="err">curl</span> <span class="err">-d</span> <span class="s2">&quot;username=&quot;</span><span class="err">Trump</span><span class="s2">&quot; http://106.14.60.228/user</span>
</span><span class='line'><span class="s2">{</span>
</span><span class='line'><span class="s2"> &quot;</span><span class="err">success</span><span class="s2">&quot;: true,</span>
</span><span class='line'><span class="s2"> &quot;</span><span class="err">message</span><span class="s2">&quot;: &quot;&quot;,</span>
</span><span class='line'><span class="s2"> &quot;</span><span class="err">apiVersion</span><span class="s2">&quot;: &quot;</span><span class="mf">1.0</span><span class="err">.</span><span class="mi">0</span><span class="s2">&quot;,</span>
</span><span class='line'><span class="s2"> &quot;</span><span class="err">apiCode</span><span class="s2">&quot;: &quot;</span><span class="err">OK</span><span class="s2">&quot;,</span>
</span><span class='line'><span class="s2"> &quot;</span><span class="err">data</span><span class="s2">&quot;: {</span>
</span><span class='line'><span class="s2">     &quot;</span><span class="err">new</span> <span class="err">user</span> <span class="err">ID</span><span class="s2">&quot;: 11</span>
</span><span class='line'><span class="s2"> }</span>
</span><span class='line'><span class="s2">}</span>
</span><span class='line'>
</span><span class='line'><span class="s2"># 查询Trump用户</span>
</span><span class='line'><span class="s2">curl http://106.14.60.228/user?username=Trump</span>
</span><span class='line'><span class="s2">{</span>
</span><span class='line'><span class="s2"> &quot;</span><span class="err">success</span><span class="s2">&quot;: true,</span>
</span><span class='line'><span class="s2"> &quot;</span><span class="err">message</span><span class="s2">&quot;: &quot;&quot;,</span>
</span><span class='line'><span class="s2"> &quot;</span><span class="err">apiVersion</span><span class="s2">&quot;: &quot;</span><span class="mf">1.0</span><span class="err">.</span><span class="mi">0</span><span class="s2">&quot;,</span>
</span><span class='line'><span class="s2"> &quot;</span><span class="err">apiCode</span><span class="s2">&quot;: &quot;</span><span class="err">OK</span><span class="s2">&quot;,</span>
</span><span class='line'><span class="s2"> &quot;</span><span class="err">data</span><span class="s2">&quot;: {</span>
</span><span class='line'><span class="s2">     &quot;</span><span class="err">user</span><span class="s2">&quot;: {</span>
</span><span class='line'><span class="s2">         &quot;</span><span class="err">id</span><span class="s2">&quot;: 11,</span>
</span><span class='line'><span class="s2">         &quot;</span><span class="err">username</span><span class="s2">&quot;: &quot;</span><span class="err">Trump&quot;</span>
</span><span class='line'>      <span class="err">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>进入mycat容器追踪mycat的日志(把log4j2.xml的日志级别改成DEBUG)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tail /opt/mycat/logs/mycat.log -f -n 30
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>新增用户日志，从红色划线部分即可看出，写操作已经成功路由到master上</p>

<p><img src="http://youngjd.com/images/20170124-3.png" alt="Alt text" /></p>

<p>查询用户日志，从红色划线部分即可看出，写操作已经成功路由到slave上</p>

<p><img src="http://youngjd.com/images/20170124-4.png" alt="Alt text" /></p>

<p>测试OK！！</p>

<hr />

<p><a name="005" id="005"></a></p>

<h4>5.使用springcloud+zookeeper进行服务注册和发现 <a style="text-decoration:none;" href="#000">◥</a></h4>

<p>首先使用docker包装一个zookeeper容器。创建如下目录结构：</p>

<p><img src="http://youngjd.com/images/2017-02-13-1.png" alt="Alt text" /></p>

<p>解压zookeeper安装包并提取配置文件到conf目录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tar -zxvpf zookeeper-3.4.9.tar.gz <span class="o">&amp;&amp;</span> cp -R /home/op/dev/zookeeper/zookeeper-3.4.9/conf/. /home/op/dev/zookeeper/conf <span class="o">&amp;&amp;</span> rm -rf /home/op/dev/zookeeper/zookeeper-3.4.9
</span></code></pre></td></tr></table></div></figure>


<p>使用Dockerfile构建容器，Dockerfile内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>FROM openjdk
</span><span class='line'><span class="c">#zookeeper使用java编写的，所以需要java运行环境</span>
</span><span class='line'>
</span><span class='line'>MAINTAINER yjd
</span><span class='line'>
</span><span class='line'>RUN mkdir /var/lib/zookeeper
</span><span class='line'><span class="c">#这个目录作为zookeeper的data目录</span>
</span><span class='line'>
</span><span class='line'>VOLUME <span class="o">[</span><span class="s2">&quot;/var/lib/zookeeper&quot;</span>, <span class="s2">&quot;/opt/zookeeper-3.4.9/conf&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>ADD zookeeper-3.4.9.tar.gz /opt
</span><span class='line'>
</span><span class='line'>CMD <span class="o">[</span><span class="s2">&quot;/opt/zookeeper-3.4.9/bin/zkServer.sh&quot;</span>, <span class="s2">&quot;start-foreground&quot;</span><span class="o">]</span>
</span><span class='line'><span class="c">#start-foreground：使用前台运行模式，否则（后台运行）容器启动后就自动关闭</span>
</span></code></pre></td></tr></table></div></figure>


<p>构建镜像后启动容器，挂载conf和data两个数据卷目录：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker build -ti yjd/zookeeper .
</span><span class='line'>
</span><span class='line'>sudo docker run --name zk1 <span class="se">\</span>
</span><span class='line'>      -p 2181:2181 <span class="se">\</span>
</span><span class='line'>      -v /home/op/dev/zookeeper/conf:/opt/zookeeper-3.4.9/conf <span class="se">\</span>
</span><span class='line'>      -v /home/op/dev/zookeeper/data:/var/lib/zookeeper <span class="se">\</span>
</span><span class='line'>      -d yjd/zookeeper
</span></code></pre></td></tr></table></div></figure>


<p>进入容器，使用zookeeper客户端连接zookeeper本地服务端，检查是否正常启动zookeeper：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>op@iZuf6ikqrgj1kq9sbrou5fZ:~/dev/zookeeper<span class="nv">$ </span>sudo docker <span class="nb">exec</span> -ti zk1 /bin/bash
</span><span class='line'>root@fb6b4983dbb7:/# <span class="nb">cd </span>opt
</span><span class='line'>root@fb6b4983dbb7:/opt# <span class="nb">cd </span>zookeeper-3.4.9/
</span><span class='line'>root@fb6b4983dbb7:/opt/zookeeper-3.4.9# <span class="nb">cd </span>bin/
</span><span class='line'>root@fb6b4983dbb7:/opt/zookeeper-3.4.9/bin# ./zkCli.sh -server localhost:2181
</span><span class='line'>Connecting to localhost:2181
</span><span class='line'>2017-02-13 13:49:16,018 <span class="o">[</span>myid:<span class="o">]</span> - INFO  <span class="o">[</span>main:Environment@100<span class="o">]</span> - Client environment:zookeeper.version<span class="o">=</span>3.4.9-1757313, built on 08/23/2016 06:50 GMT
</span><span class='line'>2017-02-13 13:49:16,021 <span class="o">[</span>myid:<span class="o">]</span> - INFO  <span class="o">[</span>main:Environment@100<span class="o">]</span> - Client environment:host.name<span class="o">=</span>fb6b4983dbb7
</span><span class='line'>2017-02-13 13:49:16,021 <span class="o">[</span>myid:<span class="o">]</span> - INFO  <span class="o">[</span>main:Environment@100<span class="o">]</span> - Client environment:java.version<span class="o">=</span>1.8.0_111
</span><span class='line'>2017-02-13 13:49:16,023 <span class="o">[</span>myid:<span class="o">]</span> - INFO  <span class="o">[</span>main:Environment@100<span class="o">]</span> - Client environment:java.vendor<span class="o">=</span>Oracle Corporation
</span><span class='line'>2017-02-13 13:49:16,023 <span class="o">[</span>myid:<span class="o">]</span> - INFO  <span class="o">[</span>main:Environment@100<span class="o">]</span> - Client environment:java.home<span class="o">=</span>/usr/lib/jvm/java-8-openjdk-amd64/jre
</span><span class='line'>2017-02-13 13:49:16,023 <span class="o">[</span>myid:<span class="o">]</span> - INFO  <span class="o">[</span>main:Environment@100<span class="o">]</span> - Client environment:java.class.path<span class="o">=</span>/opt/zookeeper-3.4.9/bin/../build/classes:/opt/zookeeper-3.4.9/bin/../build/lib/*.jar:/opt/zookeeper-3.4.9/bin/../lib/slf4j-log4j12-1.6.1.jar:/opt/zookeeper-3.4.9/bin/../lib/slf4j-api-1.6.1.jar:/opt/zookeeper-3.4.9/bin/../lib/netty-3.10.5.Final.jar:/opt/zookeeper-3.4.9/bin/../lib/log4j-1.2.16.jar:/opt/zookeeper-3.4.9/bin/../lib/jline-0.9.94.jar:/opt/zookeeper-3.4.9/bin/../zookeeper-3.4.9.jar:/opt/zookeeper-3.4.9/bin/../src/java/lib/*.jar:/opt/zookeeper-3.4.9/bin/../conf:
</span><span class='line'>2017-02-13 13:49:16,024 <span class="o">[</span>myid:<span class="o">]</span> - INFO  <span class="o">[</span>main:Environment@100<span class="o">]</span> - Client environment:java.library.path<span class="o">=</span>/usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib
</span><span class='line'>2017-02-13 13:49:16,024 <span class="o">[</span>myid:<span class="o">]</span> - INFO  <span class="o">[</span>main:Environment@100<span class="o">]</span> - Client environment:java.io.tmpdir<span class="o">=</span>/tmp
</span><span class='line'>2017-02-13 13:49:16,024 <span class="o">[</span>myid:<span class="o">]</span> - INFO  <span class="o">[</span>main:Environment@100<span class="o">]</span> - Client environment:java.compiler<span class="o">=</span>&lt;NA&gt;
</span><span class='line'>2017-02-13 13:49:16,024 <span class="o">[</span>myid:<span class="o">]</span> - INFO  <span class="o">[</span>main:Environment@100<span class="o">]</span> - Client environment:os.name<span class="o">=</span>Linux
</span><span class='line'>2017-02-13 13:49:16,024 <span class="o">[</span>myid:<span class="o">]</span> - INFO  <span class="o">[</span>main:Environment@100<span class="o">]</span> - Client environment:os.arch<span class="o">=</span>amd64
</span><span class='line'>2017-02-13 13:49:16,024 <span class="o">[</span>myid:<span class="o">]</span> - INFO  <span class="o">[</span>main:Environment@100<span class="o">]</span> - Client environment:os.version<span class="o">=</span>3.13.0-106-generic
</span><span class='line'>2017-02-13 13:49:16,024 <span class="o">[</span>myid:<span class="o">]</span> - INFO  <span class="o">[</span>main:Environment@100<span class="o">]</span> - Client environment:user.name<span class="o">=</span>root
</span><span class='line'>2017-02-13 13:49:16,024 <span class="o">[</span>myid:<span class="o">]</span> - INFO  <span class="o">[</span>main:Environment@100<span class="o">]</span> - Client environment:user.home<span class="o">=</span>/root
</span><span class='line'>2017-02-13 13:49:16,024 <span class="o">[</span>myid:<span class="o">]</span> - INFO  <span class="o">[</span>main:Environment@100<span class="o">]</span> - Client environment:user.dir<span class="o">=</span>/opt/zookeeper-3.4.9/bin
</span><span class='line'>2017-02-13 13:49:16,025 <span class="o">[</span>myid:<span class="o">]</span> - INFO  <span class="o">[</span>main:ZooKeeper@438<span class="o">]</span> - Initiating client connection, <span class="nv">connectString</span><span class="o">=</span>localhost:2181 <span class="nv">sessionTimeout</span><span class="o">=</span>30000 <span class="nv">watcher</span><span class="o">=</span>org.apache.zookeeper.ZooKeeperMain<span class="nv">$MyWatcher</span>@41906a77
</span><span class='line'>2017-02-13 13:49:16,047 <span class="o">[</span>myid:<span class="o">]</span> - INFO  <span class="o">[</span>main-SendThread<span class="o">(</span>localhost:2181<span class="o">)</span>:ClientCnxn<span class="nv">$SendThread</span>@1032<span class="o">]</span> - Opening socket connection to server localhost/127.0.0.1:2181. Will not attempt to authenticate using SASL <span class="o">(</span>unknown error<span class="o">)</span>
</span><span class='line'>Welcome to ZooKeeper!
</span><span class='line'>JLine support is enabled
</span><span class='line'>2017-02-13 13:49:16,122 <span class="o">[</span>myid:<span class="o">]</span> - INFO  <span class="o">[</span>main-SendThread<span class="o">(</span>localhost:2181<span class="o">)</span>:ClientCnxn<span class="nv">$SendThread</span>@876<span class="o">]</span> - Socket connection established to localhost/127.0.0.1:2181, initiating session
</span><span class='line'><span class="o">[</span>zk: localhost:2181<span class="o">(</span>CONNECTING<span class="o">)</span> 0<span class="o">]</span> 2017-02-13 13:49:16,211 <span class="o">[</span>myid:<span class="o">]</span> - INFO  <span class="o">[</span>main-SendThread<span class="o">(</span>localhost:2181<span class="o">)</span>:ClientCnxn<span class="nv">$SendThread</span>@1299<span class="o">]</span> - Session establishment <span class="nb">complete </span>on server localhost/127.0.0.1:2181, <span class="nv">sessionid</span> <span class="o">=</span> 0x15a37bba5810000, negotiated <span class="nv">timeout</span> <span class="o">=</span> 30000
</span><span class='line'>
</span><span class='line'>WATCHER::
</span><span class='line'>
</span><span class='line'>WatchedEvent state:SyncConnected <span class="nb">type</span>:None path:null
</span><span class='line'>
</span><span class='line'><span class="o">[</span>zk: localhost:2181<span class="o">(</span>CONNECTED<span class="o">)</span> 0<span class="o">]</span> ls /
</span><span class='line'><span class="o">[</span>zookeeper<span class="o">]</span>
</span><span class='line'><span class="o">[</span>zk: localhost:2181<span class="o">(</span>CONNECTED<span class="o">)</span> 1<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>zk中间件已经准备好，现在进行代码改造。还是基于上面的helloworld进行修改，在不改动原工程下，拷贝两个新的工程，分别是ms-helloworld-server和ms-helloworld-client。</p>

<h4>1. ms-helloworld-server：</h4>

<p>pom.xml，新增spring-cloud和zookeeper的依赖：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>yjd.demo.springboot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>ms-helloworld-server<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.0.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;packaging&gt;</span>jar<span class="nt">&lt;/packaging&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;parent&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>1.4.4.RELEASE<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/parent&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;dependencyManagement&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>          <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>              <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;artifactId&gt;</span>spring-cloud-dependencies<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;version&gt;</span>Camden.SR5<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>              <span class="nt">&lt;type&gt;</span>pom<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>              <span class="nt">&lt;scope&gt;</span>import<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencyManagement&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-zookeeper-all<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>      <span class="nt">&lt;java.version&gt;</span>1.8<span class="nt">&lt;/java.version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;build&gt;</span>
</span><span class='line'>      <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>          <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>              <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/build&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;repositories&gt;</span>
</span><span class='line'>      <span class="nt">&lt;repository&gt;</span>
</span><span class='line'>          <span class="nt">&lt;id&gt;</span>spring-releases<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>          <span class="nt">&lt;url&gt;</span>https://repo.spring.io/libs-release<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/repository&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/repositories&gt;</span>
</span><span class='line'>  <span class="nt">&lt;pluginRepositories&gt;</span>
</span><span class='line'>      <span class="nt">&lt;pluginRepository&gt;</span>
</span><span class='line'>          <span class="nt">&lt;id&gt;</span>spring-releases<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>          <span class="nt">&lt;url&gt;</span>https://repo.spring.io/libs-release<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/pluginRepository&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/pluginRepositories&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了简单，服务方和调用方还是使用最简单的http服务，不引入rpc框架，服务方服务接口代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">yjd</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">springboot</span><span class="o">.</span><span class="na">helloworld</span><span class="o">.</span><span class="na">controller</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">yjd.demo.springboot.helloworld.controller.base.ApiCode</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">yjd.demo.springboot.helloworld.controller.base.ApiResult</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.InetAddress</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.UnknownHostException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @author yjd</span>
</span><span class='line'><span class="cm"> * @since 2017/2/13</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@RestController</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloworldRestService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/index&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">ApiResult</span> <span class="nf">index</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">UnknownHostException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">ip</span> <span class="o">=</span> <span class="n">InetAddress</span><span class="o">.</span><span class="na">getLocalHost</span><span class="o">().</span><span class="na">getHostAddress</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ApiResult</span><span class="o">.</span><span class="na">success</span><span class="o">().</span><span class="na">addData</span><span class="o">(</span><span class="s">&quot;msg&quot;</span><span class="o">,</span> <span class="s">&quot;helloWorld, ip:&quot;</span> <span class="o">+</span> <span class="n">ip</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>启动类代码，增加@EnableDiscoveryClient注解即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">yjd</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">springboot</span><span class="o">.</span><span class="na">helloworld</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.cloud.client.discovery.EnableDiscoveryClient</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @author yjd</span>
</span><span class='line'><span class="cm"> * @since 2017/2/13</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@SpringBootApplication</span>
</span><span class='line'><span class="nd">@EnableDiscoveryClient</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>application.yml</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">spring:</span>
</span><span class='line'>  <span class="nl">application:</span>
</span><span class='line'>    <span class="nl">name:</span> <span class="n">helloworld</span><span class="o">-</span><span class="n">server</span>
</span></code></pre></td></tr></table></div></figure>


<p>bootstrap.yml</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">spring:</span>
</span><span class='line'>  <span class="nl">cloud:</span>
</span><span class='line'>  <span class="nl">zookeeper:</span>
</span><span class='line'>    <span class="n">connect</span><span class="o">-</span><span class="nl">string:</span> <span class="nl">zk1:</span><span class="mi">2181</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2. ms-helloworld-client：</h4>

<p>pom.xml，增加spring-cloud，zookeeper，feign（一个http客户端库）依赖：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>yjd.demo.springboot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>helloworld<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.0.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;packaging&gt;</span>jar<span class="nt">&lt;/packaging&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;parent&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>1.4.4.RELEASE<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/parent&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;dependencyManagement&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>          <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>              <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;artifactId&gt;</span>spring-cloud-dependencies<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;version&gt;</span>Camden.SR5<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>              <span class="nt">&lt;type&gt;</span>pom<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>              <span class="nt">&lt;scope&gt;</span>import<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencyManagement&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-feign<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.mybatis.spring.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>mybatis-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>1.2.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>5.1.40<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-zookeeper-all<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>      <span class="nt">&lt;java.version&gt;</span>1.8<span class="nt">&lt;/java.version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;build&gt;</span>
</span><span class='line'>      <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>          <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>              <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/build&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;repositories&gt;</span>
</span><span class='line'>      <span class="nt">&lt;repository&gt;</span>
</span><span class='line'>          <span class="nt">&lt;id&gt;</span>spring-releases<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>          <span class="nt">&lt;url&gt;</span>https://repo.spring.io/libs-release<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/repository&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/repositories&gt;</span>
</span><span class='line'>  <span class="nt">&lt;pluginRepositories&gt;</span>
</span><span class='line'>      <span class="nt">&lt;pluginRepository&gt;</span>
</span><span class='line'>          <span class="nt">&lt;id&gt;</span>spring-releases<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>          <span class="nt">&lt;url&gt;</span>https://repo.spring.io/libs-release<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/pluginRepository&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/pluginRepositories&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>客户端调用服务端代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">yjd</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">springboot</span><span class="o">.</span><span class="na">helloworld</span><span class="o">.</span><span class="na">api</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.cloud.client.ServiceInstance</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.cloud.client.discovery.DiscoveryClient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">yjd.demo.springboot.helloworld.api.base.ApiResult</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">yjd.demo.springboot.helloworld.rmi.IndexRmi</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.stream.Collectors</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @author yjd</span>
</span><span class='line'><span class="cm"> * @since 2017/2/13</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@RestController</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">IndexApi</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Autowired</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">DiscoveryClient</span> <span class="n">discovery</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Autowired</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">IndexRmi</span> <span class="n">indexRmi</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/info&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">ApiResult</span> <span class="nf">info</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">ServiceInstance</span><span class="o">&gt;</span> <span class="n">instanceList</span> <span class="o">=</span> <span class="n">discovery</span><span class="o">.</span><span class="na">getInstances</span><span class="o">(</span><span class="s">&quot;helloworld-server&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">instances</span> <span class="o">=</span> <span class="n">instanceList</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">map</span><span class="o">(</span><span class="n">it</span> <span class="o">-&gt;</span> <span class="n">it</span><span class="o">.</span><span class="na">getHost</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">it</span><span class="o">.</span><span class="na">getPort</span><span class="o">()).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">(</span><span class="s">&quot;; &quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ApiResult</span><span class="o">.</span><span class="na">success</span><span class="o">().</span><span class="na">addData</span><span class="o">(</span><span class="s">&quot;instances&quot;</span><span class="o">,</span> <span class="n">instances</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/index&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">ApiResult</span> <span class="nf">index</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">indexRmi</span><span class="o">.</span><span class="na">index</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>feign代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">yjd</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">springboot</span><span class="o">.</span><span class="na">helloworld</span><span class="o">.</span><span class="na">rmi</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.cloud.netflix.feign.FeignClient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">yjd.demo.springboot.helloworld.api.base.ApiResult</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by young on 2017/2/13.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;helloworld-server&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">IndexRmi</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/index&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">ApiResult</span> <span class="nf">index</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>启动类代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">yjd</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">springboot</span><span class="o">.</span><span class="na">helloworld</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.cloud.client.discovery.EnableDiscoveryClient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.cloud.netflix.feign.EnableFeignClients</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @author yjd</span>
</span><span class='line'><span class="cm"> * @since 2017/2/13</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@SpringBootApplication</span>
</span><span class='line'><span class="nd">@EnableFeignClients</span>
</span><span class='line'><span class="nd">@EnableDiscoveryClient</span>
</span><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>application.yml：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">spring:</span>
</span><span class='line'>  <span class="nl">application:</span>
</span><span class='line'>    <span class="nl">name:</span> <span class="n">helloworld</span><span class="o">-</span><span class="n">client</span>
</span></code></pre></td></tr></table></div></figure>


<p>bootstrap.yml</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">spring:</span>
</span><span class='line'>  <span class="nl">cloud:</span>
</span><span class='line'>  <span class="nl">zookeeper:</span>
</span><span class='line'>    <span class="n">connect</span><span class="o">-</span><span class="nl">string:</span> <span class="nl">zk1:</span><span class="mi">2181</span>
</span><span class='line'>    <span class="nl">discovery:</span>
</span><span class='line'>      <span class="nl">register:</span> <span class="kc">false</span> <span class="err">#</span> <span class="err">注意要设为</span><span class="kc">false</span><span class="err">，为否</span><span class="n">client</span><span class="err">也会被注册的</span><span class="n">zk</span><span class="err">上</span>
</span></code></pre></td></tr></table></div></figure>


<p>打包server和client代码上传到服务器，目录结构如下：</p>

<p><img src="http://youngjd.com/images/2017-02-13-2.png" alt="Alt text" /></p>

<p>server和client的Dockerfile内容与上面的helloworld几乎一样，只更改了jar包名字：</p>

<p>server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">FROM</span> <span class="n">openjdk</span>
</span><span class='line'>
</span><span class='line'><span class="n">MAINTAINER</span> <span class="n">yjd</span>
</span><span class='line'>
</span><span class='line'><span class="n">VOLUME</span> <span class="o">[</span><span class="s">&quot;/usr/local/app&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">EXPOSE</span> <span class="mi">8080</span>
</span><span class='line'>
</span><span class='line'><span class="n">ENTRYPOINT</span> <span class="o">[</span><span class="s">&quot;java&quot;</span><span class="o">,</span><span class="s">&quot;-jar&quot;</span><span class="o">,</span><span class="s">&quot;/usr/local/app/ms-helloworld-server.jar&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>client:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">FROM</span> <span class="n">openjdk</span>
</span><span class='line'>
</span><span class='line'><span class="n">MAINTAINER</span> <span class="n">yjd</span>
</span><span class='line'>
</span><span class='line'><span class="n">VOLUME</span> <span class="o">[</span><span class="s">&quot;/usr/local/app&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">EXPOSE</span> <span class="mi">8080</span>
</span><span class='line'>
</span><span class='line'><span class="n">ENTRYPOINT</span> <span class="o">[</span><span class="s">&quot;java&quot;</span><span class="o">,</span><span class="s">&quot;-jar&quot;</span><span class="o">,</span><span class="s">&quot;/usr/local/app/ms-helloworld-client.jar&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>构建server和client镜像并启动2个server容器和1个client容器：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 启动server1</span>
</span><span class='line'>sudo docker run --name ms-helloworld-server1 --link zk1:zk1 -p 50001:8080 -v /home/op/dev/ms-app/ms-app-server/deploy:/usr/local/app -d yjd/ms-helloworld-server
</span><span class='line'>
</span><span class='line'><span class="c"># 启动server2</span>
</span><span class='line'>sudo docker run --name ms-helloworld-server2 --link zk1:zk1 -p 50002:8080 -v /home/op/dev/ms-app/ms-app-server/deploy:/usr/local/app -d yjd/ms-helloworld-server
</span><span class='line'>
</span><span class='line'><span class="c"># 启动client</span>
</span><span class='line'><span class="c"># 这里需要link两个server端，否则zk返回可用实例后，client端就无法与该实例的docker容器通讯</span>
</span><span class='line'>sudo docker run --name ms-helloworld-client --link zk1:zk1 --link ms-helloworld-server1:ms-helloworld-server1 --link ms-helloworld-server2:ms-helloworld-server2 -p 50003:8080 -v /home/op/dev/ms-app/ms-app-client/deploy:/usr/local/app -d yjd/ms-helloworld-client
</span></code></pre></td></tr></table></div></figure>


<p>curl访问测试结果如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">curl</span> <span class="err">http://IP:</span><span class="mi">50003</span><span class="err">/info</span>
</span><span class='line'><span class="err">#</span> <span class="err">打印出两个server实例</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;success&quot;</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;message&quot;</span><span class="p">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;apiVersion&quot;</span><span class="p">:</span><span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;apiCode&quot;</span><span class="p">:</span><span class="s2">&quot;OK&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;data&quot;</span><span class="p">:{</span>
</span><span class='line'>      <span class="nt">&quot;instances&quot;</span><span class="p">:</span><span class="s2">&quot;192.168.0.3:8080; 192.168.0.4:8080&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">curl</span> <span class="err">http://IP:</span><span class="mi">50003</span><span class="err">/index</span>
</span><span class='line'><span class="err">#</span> <span class="err">刷新会打印出不同的IP，证明有进行load</span> <span class="err">balance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;success&quot;</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;message&quot;</span><span class="p">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;apiVersion&quot;</span><span class="p">:</span><span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;apiCode&quot;</span><span class="p">:</span><span class="s2">&quot;OK&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;data&quot;</span><span class="p">:{</span>
</span><span class='line'>      <span class="nt">&quot;msg&quot;</span><span class="p">:</span><span class="s2">&quot;helloWorld, ip:192.168.0.3&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;success&quot;</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;message&quot;</span><span class="p">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;apiVersion&quot;</span><span class="p">:</span><span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;apiCode&quot;</span><span class="p">:</span><span class="s2">&quot;OK&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;data&quot;</span><span class="p">:{</span>
</span><span class='line'>      <span class="nt">&quot;msg&quot;</span><span class="p">:</span><span class="s2">&quot;helloWorld, ip:192.168.0.4&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再进入zookeeper查看znode信息，可以看到/services/helloworld-server下注册了两个节点：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>zk: localhost:2181<span class="o">(</span>CONNECTED<span class="o">)</span> 2<span class="o">]</span> ls /services/helloworld-server
</span><span class='line'><span class="o">[</span>e4af27b2-613f-4f26-9a4a-fa0b979a2658, 128e338a-f10b-4047-b593-d60969b95aa3<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>
__</p>

<p><a name="006" id="006"></a></p>

<h4>6.单机多容器管理利器docker-compose <a style="text-decoration:none;" href="#000">◥</a></h4>

<p>上一步进行了zookeeper的standalong部署，现在使用docker进行单机3个节点的集群部署。按照正常的思路的话，将会使用docker run依次启动3个节点并使用link的方式互相连接，然后每个节点进行定制化配置，如下：</p>

<p>配置zookeeper zoo.cfg文件，新增集群实例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>...
</span><span class='line'>server.1<span class="o">=</span>zk1:2881:3881
</span><span class='line'>server.2<span class="o">=</span>zk2:2882:3882
</span><span class='line'>server.3<span class="o">=</span>zk3:2883:3883
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>这里会遇到的问题是，zookeeper启动时就会去检测配置的集群节点，这时候如果容器本身没有互相连接，就无法知道zk1,zk2,zk3这3个主机名对应的是哪个容器IP地址，zk就无法成功启动。所以每个zk容器运行的时候都需要加上link，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>op@iZuf6ikqrgj1kq9sbrou5fZ:~/dev/zookeeper<span class="nv">$ </span>sudo docker run --name zk1 <span class="se">\</span>
</span><span class='line'>      --link zk2:zk2 --link zk3:zk3 <span class="se">\</span>
</span><span class='line'>      -p 2181:2181 <span class="se">\</span>
</span><span class='line'>      -v /home/op/dev/zookeeper/conf:/opt/zookeeper-3.4.9/conf <span class="se">\</span>
</span><span class='line'>      -v /home/op/dev/zookeeper/data:/var/lib/zookeeper <span class="se">\</span>
</span><span class='line'>      -d yjd/zookeeper
</span><span class='line'>      
</span><span class='line'>op@iZuf6ikqrgj1kq9sbrou5fZ:~/dev/zookeeper<span class="nv">$ </span>sudo docker run --name zk2 <span class="se">\</span>
</span><span class='line'>      --link zk1:zk1 --link zk3:zk3 <span class="se">\</span>
</span><span class='line'>      -p 2181:2181 <span class="se">\</span>
</span><span class='line'>      -v /home/op/dev/zookeeper2/conf:/opt/zookeeper-3.4.9/conf <span class="se">\</span>
</span><span class='line'>      -v /home/op/dev/zookeeper2/data:/var/lib/zookeeper <span class="se">\</span>
</span><span class='line'>      -d yjd/zookeeper
</span><span class='line'>      
</span><span class='line'>op@iZuf6ikqrgj1kq9sbrou5fZ:~/dev/zookeeper<span class="nv">$ </span>sudo docker run --name zk3 <span class="se">\</span>
</span><span class='line'>      --link zk1:zk1 --link zk2:zk2 <span class="se">\</span>
</span><span class='line'>      -p 2181:2181 <span class="se">\</span>
</span><span class='line'>      -v /home/op/dev/zookeeper3/conf:/opt/zookeeper-3.4.9/conf <span class="se">\</span>
</span><span class='line'>      -v /home/op/dev/zookeeper3/data:/var/lib/zookeeper <span class="se">\</span>
</span><span class='line'>      -d yjd/zookeeper
</span></code></pre></td></tr></table></div></figure>


<p>从运行命令可以看到，3个节点link是循环依赖的，所以单独执行任何一条启动命令都是失败的。无法link就无法在容器内部建立IP与主机名的映射关系。如果是先不进行link启动，启动成功后再用容器IP去配置zk集群，则会出现容器重启后IP变化的问题。当然这个问题一般只存在于单机情况下，如果是多物理机或多云主机的话，直接配置IP即可。这时候就可以用到docker-compose来解决问题，docker-compose是用于多容器的容器管理与编排，它的其中一个特性解决了这个问题。一开始学习docker-compose的时候，以为只是把不同的容器通过一个配置文件统一起来，方便管理和描述一组服务间的关系，然后按照不同容器的依赖关系(link参数指出依赖顺序)启动容器，其实docker-compose是创建了一个网络来组织这些被配置起来的容器。具体可以查看<a href="https://docs.docker.com/compose/networking/" style="text-decoration: underline;">官方文档</a>。摘要其中一段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>By default Compose sets up a single network <span class="k">for </span>your app. Each container <span class="k">for </span>a service joins the default network
</span><span class='line'>and is both reachable by other containers on that network, and discoverable by them at a hostname identical to the
</span><span class='line'>container name.
</span><span class='line'>
</span><span class='line'>默认Docker-compose会为你的应用（被组织起来的容器）创建一个单独的网络。每个服务容器都加入到这个网络中，
</span><span class='line'>并且这些容器相互之间可以访问，容器的名字作为此网络中的主机名。
</span></code></pre></td></tr></table></div></figure>


<p>比如在myapp目录下有如下配置的docker-compose.yml：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>version: <span class="s1">&#39;2&#39;</span>
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  web:
</span><span class='line'>  build: .
</span><span class='line'>  ports:
</span><span class='line'>    - <span class="s2">&quot;8000:8000&quot;</span>
</span><span class='line'>  db:
</span><span class='line'>  image: postgres
</span><span class='line'>  
</span><span class='line'>When you run docker-compose up, the following happens:
</span><span class='line'>
</span><span class='line'>1. A network called myapp_default is created.
</span><span class='line'>   一个名为myapp_default的网络被创建
</span><span class='line'>2. A container is created using web’s configuration. It joins the network myapp_default under the name web.
</span><span class='line'>   根据web的配置创建一个容器。这个容器以web作为主机名加入这个网络
</span><span class='line'>3. A container is created using db’s configuration. It joins the network myapp_default under the name db.
</span><span class='line'>   根据db的配置创建一个容器。这个容器以db作为主机名加入这个网络
</span></code></pre></td></tr></table></div></figure>


<p>所以使用docker-compose可以很方便的启动一个zookeeper集群，步骤如下：</p>

<h5>1. 在docker-hub仓库下拉一个官方的zookeeper镜像。（不采用自己构建的镜像是因为还需要考虑到不同zk节点需要不同的配置和myid文件，需要编写entrypoint.sh脚本进行文件的写入，为了方便直接使用官方已经写好了entrypoint.sh的容器）：</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker pull zookeeper
</span></code></pre></td></tr></table></div></figure>


<h5>2.创建compose工程目录：</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir zkcompose <span class="o">&amp;&amp;</span> touch ./zkcompose/docker-compose.yml <span class="o">&amp;&amp;</span> <span class="nb">cd </span>zkcompose
</span></code></pre></td></tr></table></div></figure>


<h5>3 创建数据卷：</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir zkcompose/zk1 <span class="o">&amp;&amp;</span> mkdir zkcompose/zk1/data <span class="o">&amp;&amp;</span> mkdir zkcompose/zk1/datalog
</span><span class='line'>mkdir zkcompose/zk2 <span class="o">&amp;&amp;</span> mkdir zkcompose/zk2/data <span class="o">&amp;&amp;</span> mkdir zkcompose/zk2/datalog
</span><span class='line'>mkdir zkcompose/zk3 <span class="o">&amp;&amp;</span> mkdir zkcompose/zk3/data <span class="o">&amp;&amp;</span> mkdir zkcompose/zk3/datalog
</span></code></pre></td></tr></table></div></figure>


<h5>4.编写docker-compose.yml：</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>version: <span class="s1">&#39;2&#39;</span>
</span><span class='line'>services:
</span><span class='line'>zk1:
</span><span class='line'>  image: zookeeper
</span><span class='line'>  restart: always
</span><span class='line'>  container_name: zk1
</span><span class='line'>  ports:
</span><span class='line'>      - <span class="s2">&quot;2181:2181&quot;</span>
</span><span class='line'>  volumes:
</span><span class='line'>      - /home/op/dev/zkcompose/zk1/data:/data
</span><span class='line'>      - /home/op/dev/zkcompose/zk1/datalog:/datalog
</span><span class='line'>  environment:
</span><span class='line'>      ZOO_MY_ID: 1
</span><span class='line'>      ZOO_SERVERS: server.1<span class="o">=</span>zk1:2888:3888 server.2<span class="o">=</span>zk2:2888:3888 server.3<span class="o">=</span>zk3:2888:3888
</span><span class='line'>
</span><span class='line'>zk2:
</span><span class='line'>  image: zookeeper
</span><span class='line'>  restart: always
</span><span class='line'>  container_name: zk2
</span><span class='line'>  ports:
</span><span class='line'>      - <span class="s2">&quot;2182:2181&quot;</span>
</span><span class='line'>  volumes:
</span><span class='line'>      - /home/op/dev/zkcompose/zk2/data:/data
</span><span class='line'>      - /home/op/dev/zkcompose/zk2/datalog:/datalog
</span><span class='line'>  environment:
</span><span class='line'>      ZOO_MY_ID: 2
</span><span class='line'>      ZOO_SERVERS: server.1<span class="o">=</span>zk1:2888:3888 server.2<span class="o">=</span>zk2:2888:3888 server.3<span class="o">=</span>zk3:2888:3888
</span><span class='line'>
</span><span class='line'>zk3:
</span><span class='line'>  image: zookeeper
</span><span class='line'>  restart: always
</span><span class='line'>  container_name: zk3
</span><span class='line'>  ports:
</span><span class='line'>      - <span class="s2">&quot;2183:2181&quot;</span>
</span><span class='line'>  volumes:
</span><span class='line'>      - /home/op/dev/zkcompose/zk3/data:/data
</span><span class='line'>      - /home/op/dev/zkcompose/zk3/datalog:/datalog
</span><span class='line'>  environment:
</span><span class='line'>      ZOO_MY_ID: 3
</span><span class='line'>      ZOO_SERVERS: server.1<span class="o">=</span>zk1:2888:3888 server.2<span class="o">=</span>zk2:2888:3888 server.3<span class="o">=</span>zk3:2888:3888
</span></code></pre></td></tr></table></div></figure>


<h5>5.启动</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># -d: 后台运行</span>
</span><span class='line'>sudo docker-compose up -d
</span></code></pre></td></tr></table></div></figure>


<h5>6.运行客户端容器连接zk集群</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 因为只是临时容器，使用--rm，当容器退出时就会被删掉</span>
</span><span class='line'><span class="c"># 使用--net指定网络用的是docker-compose创建的zkcompose_default网络</span>
</span><span class='line'>sudo docker run -it --rm --link zk1:zk1 --link zk2:zk2 --link zk3:zk3 --net zkcompose_default zookeeper zkCli.sh -server zk1:2181,zk2:2181,zk3:2181
</span></code></pre></td></tr></table></div></figure>


<p>zookeeper集群已经成功部署，现在修改代码，把连接单个zk节点改成连接zk集群</p>

<h5>1.修改server和client的bootstrap.yml</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#server</span>
</span><span class='line'>spring:
</span><span class='line'>  cloud:
</span><span class='line'>  zookeeper:
</span><span class='line'>    connect-string: zk1:2181,zk2:2181,zk3:2181
</span><span class='line'>
</span><span class='line'><span class="c">#client</span>
</span><span class='line'>spring:
</span><span class='line'>  cloud:
</span><span class='line'>  zookeeper:
</span><span class='line'>    connect-string: zk1:2181,zk2:2181,zk3:2181
</span><span class='line'>    discovery:
</span><span class='line'>      register: <span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure>


<h5>2.修改server和client容器启动命令：</h5>

<p>&#8220;`</p>

<h1>注意需要指明使用网络zkcompose_default</h1>

<h1>启动server1</h1>

<p>sudo docker run &mdash;name ms-helloworld-server1 \</p>

<pre><code>--net zkcompose_default \
--link zk1:zk1 --link zk2:zk2 --link zk3:zk3 \
-p 50001:8080 \
-v /home/op/dev/ms-app/ms-app-server/deploy:/usr/local/app \
-d yjd/ms-helloworld-server
</code></pre>

<h1>启动server2</h1>

<p>sudo docker run &mdash;name ms-helloworld-server2 \</p>

<pre><code>--net zkcompose_default \
--link zk1:zk1 --link zk2:zk2 --link zk3:zk3 \
-p 50002:8080 \
-v /home/op/dev/ms-app/ms-app-server/deploy:/usr/local/app \
-d yjd/ms-helloworld-server
</code></pre>

<h1>启动client</h1>

<h1>这里需要link两个server端，否则zk返回可用实例后，client端就无法与该实例的docker容器通讯</h1>

<p>sudo docker run &mdash;name ms-helloworld-client \</p>

<pre><code>--net zkcompose_default \
--link ms-helloworld-server1:ms-helloworld-server1 \
--link ms-helloworld-server2:ms-helloworld-server2 \
--link zk1:zk1 --link zk2:zk2 --link zk3:zk3 \
-p 50003:8080 \
-v /home/op/dev/ms-app/ms-app-client/deploy:/usr/local/app \
-d yjd/ms-helloworld-client
</code></pre>

<p>···</p>

<p>完！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[leetcode-Database Problems]]></title>
    <link href="http://youngjd.com/blog/2016/07/06/leetcode-sql/"/>
    <updated>2016-07-06T14:34:52+08:00</updated>
    <id>http://youngjd.com/blog/2016/07/06/leetcode-sql</id>
    <content type="html"><![CDATA[<blockquote><p>人是为了活着本身而活着，而不是为了活着之外的任何事物而活着。 &mdash; 余华《活着》</p></blockquote>

<!-- more -->


<hr />

<br>


<p>| 262        | Trips and Users           | Hard  |</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select t1.Day,
</span><span class='line'>case 
</span><span class='line'>  when t2.sub is null then 0.00
</span><span class='line'>  else round(t2.sub/t1.total,2) end as 'Cancellation Rate'
</span><span class='line'> from (
</span><span class='line'>select a.Request_at as Day, count(*) as total
</span><span class='line'>from Trips a join Users b 
</span><span class='line'>on a.Client_Id=b.Users_Id where b.Banned='No' group by Request_at ) t1 left join (
</span><span class='line'>select a.Request_at as Day, count(*) as sub 
</span><span class='line'>from Trips a join Users b 
</span><span class='line'>on a.Client_Id=b.Users_Id where 
</span><span class='line'>a.Status in ('cancelled_by_client','cancelled_by_driver')
</span><span class='line'>and b.Banned='No' group by Request_at
</span><span class='line'>) t2 on t1.Day=t2.Day where t1.Day &gt;= '2013-10-01' and t1.Day &lt;= '2013-10-03'</span></code></pre></td></tr></table></div></figure>


<p>| 197        | Rising Temperature          | Easy  |</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select a.Id from Weather a join Weather b 
</span><span class='line'>on DATE_ADD(b.Date,INTERVAL 1 Day)=a.Date where a.Temperature&gt;b.Temperature</span></code></pre></td></tr></table></div></figure>


<p>| 196        | Delete Duplicate Emails          | Easy  |</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>delete from Person where Id not in (
</span><span class='line'>select mid from (select min(Id) mid from Person group by Email) t1
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>| 185        | Department Top Three Salaries          | Hard  |</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select a.Name as Department, b.Name as Employee, b.Salary from Department a join (
</span><span class='line'>  select t3.id,t3.DepartmentId,t3.Name,t3.Salary from Employee t3 
</span><span class='line'>  where (
</span><span class='line'>      select count(distinct t2.Salary) from Employee as t1 left join Employee as t2
</span><span class='line'>      on t1.DepartmentId=t2.DepartmentId and t1.Salary&lt;=t2.Salary where t1.id=t3.id
</span><span class='line'>  ) &lt;=3
</span><span class='line'>) b on a.Id=b.DepartmentId order by a.Name, b.Salary desc</span></code></pre></td></tr></table></div></figure>


<p>| 184        | Department Highest Salary          | Medium  |</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select t2.Name as 'Department', t1.Name as 'Employee', t1.Salary as Salary 
</span><span class='line'>from Employee t1 join (
</span><span class='line'>  select b.Id as deptId, b.Name, max(Salary) as Salary 
</span><span class='line'>  from Employee a join Department b on a.DepartmentId = b.Id group by b.Id 
</span><span class='line'>) t2 on t1.Salary=t2.Salary and t2.deptId=t1.DepartmentId; </span></code></pre></td></tr></table></div></figure>


<p>| 183        | Customers Who Never Order          | Easy  |</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select a.Name as Customers 
</span><span class='line'>from Customers a left join Orders b on a.Id=b.CustomerId where b.Id is null;</span></code></pre></td></tr></table></div></figure>


<p>| 182        | Duplicate Emails          | Easy  |</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select Email from Person group by Email having count(Email)&gt;1;</span></code></pre></td></tr></table></div></figure>


<p>| 181        | Employees Earning More Than Their Managers         | Easy  |</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select a.Name as 'Employee' from Employee  a join Employee  b
</span><span class='line'>on a.ManagerId=b.Id where a.ManagerId is not null and a.Salary&gt;b.Salary;</span></code></pre></td></tr></table></div></figure>


<p>| 180        | Consecutive Numbers         | Medium  |</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select distinct Num as ConsecutiveNums from (
</span><span class='line'>    select
</span><span class='line'>        Num,
</span><span class='line'>        case
</span><span class='line'>            when @prevNum = Num then @count := @count + 1
</span><span class='line'>            when (@prevNum := Num) is not null then @count := 1
</span><span class='line'>        end n, select (@preNum := null) r
</span><span class='line'>    from Logs
</span><span class='line'>) a where n &gt;= 3</span></code></pre></td></tr></table></div></figure>


<p>| 178        | Rank Scores         | Medium  |</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select o1.Score, o2.total-o1.gn as Rank from 
</span><span class='line'>(select m0.Score,ifnull(m1.tn,0) gn from Scores m0 left join
</span><span class='line'>(select t.s1,count(*) tn from (
</span><span class='line'>select a.Score s1, b.Score s2 from Scores a join Scores b 
</span><span class='line'>on a.Score &gt; b.Score group by s1,s2
</span><span class='line'>) t group by t.s1) m1 on m0.Score=m1.s1) o1,
</span><span class='line'>(select count(*) total from (
</span><span class='line'>select count(*) from Scores group by Score ) cc) o2 order by o1.Score desc</span></code></pre></td></tr></table></div></figure>


<p>| 177        | Nth Highest Salary         | Medium  |</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
</span><span class='line'>BEGIN
</span><span class='line'>  declare startIndex int;
</span><span class='line'>  set startIndex = N - 1;
</span><span class='line'>  RETURN (
</span><span class='line'>      # Write your MySQL query statement below.
</span><span class='line'>      
</span><span class='line'>      select Salary from Employee group by Salary order by Salary desc limit startIndex, 1
</span><span class='line'>  );
</span><span class='line'>END</span></code></pre></td></tr></table></div></figure>


<p>| 176        | Second Highest Salary         | Easy  |</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select case when b.Salary  is null then null else a.Salary end as SecondHighestSalary 
</span><span class='line'>from Employee a left join 
</span><span class='line'>(
</span><span class='line'>  select Salary  from Employee group by Salary  order by Salary  desc limit 1,1
</span><span class='line'>) b on a.Salary=b.Salary  
</span><span class='line'>order by b.Salary  desc limit 1</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select max(Salary) as SecondHighestSalary  
</span><span class='line'>from Employee 
</span><span class='line'>where salary &lt; (select max(Salary) from Employee)</span></code></pre></td></tr></table></div></figure>


<p>| 175        | Combine Two Tables         | Easy  |</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select a.FirstName,a.LastName,b.City,b.State 
</span><span class='line'>from Person a left join Address b on a.PersonId=b.PersonId;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch集群配置]]></title>
    <link href="http://youngjd.com/blog/2016/06/25/elasticsearch-cluster/"/>
    <updated>2016-06-25T15:28:52+08:00</updated>
    <id>http://youngjd.com/blog/2016/06/25/elasticsearch-cluster</id>
    <content type="html"><![CDATA[<blockquote><p>如果你半夜醒来发现自己已经好长时间没读书，而且没有任何负罪感的时候，你就必须知道，你已经堕落了。不是说书本本身特了不起，而是读书这个行为意味着你没有完全认同于这个现世和现实，你还有追求，还在奋斗，你还有不满，你还在寻找另一种可能性，另一种生活方式</p></blockquote>

<!-- more -->


<hr />

<br>


<p>由于业务大量的使用了elasticsearch来做各种的数据查询，导致在年中促销的时候单机出现了300以上的CPU负载。Client端凡是通过调用搜索引擎获取数据的请求响应都变得异常的慢并且一度出现超时。所以需要做一下搜索引擎的集群，把压力进行负载均衡。由于服务器资源有限又是在云服务器上(无法在单台ECS上再虚拟机器出来)，所以目前先使用两台ECS主机进行简单的集群，后面再一步步优化并根据业务考虑是否需要再扩展机器。</p>

<p>elasticsearch集群的配置比较简单，网上资料都比较详细。下面是两台即将进行集群的机器。</p>

<pre><code>ECS1：
外网IP：120.XXX.XXX.1 
内网IP：10.XXX.XXX.1
(http port:9200, tcp port:9300)
ECS2：
外网IP：120.XXX.XXX.2 
内网IP：10.XXX.XXX.2
(http port:9200, tcp port:9300)
</code></pre>

<p>修改两台搜索引擎的配置文件：/elasticsearch/config/elasticsearch.yml</p>

<pre><code>节点1：
#集群名字默认是elasticsearch，但是最好是用特定的前缀标识下
cluster.name: xxx_elasticsearch
node.name: es_node1
#默认是同时为主节点和数据节点
node.master: true
node.data: true

#默认也是不采用多播
discovery.zen.ping.multicast.enabled: false
#配置单播发现，这里配置节点2的ip和tcp端口，如果有还有其它节点则用逗号分开
discovery.zen.ping.unicast.hosts: ["10.XXX.XXX.2:9300"]

#下面这段是日志打印的配置，query和fetch都配置上，主要是用于测试搜索请求是否真的有效地动态负载到两台机器上
#为了测试方便，时间阈值都设置成0ms，这样基本所有的搜索请求都能打印出来
#对应的logging.yml也需要有相应的日志配置信息，下面会有提及
index.search.slowlog.threshold.query.warn: 0ms
index.search.slowlog.threshold.query.info: 0ms
index.search.slowlog.threshold.query.debug: 0ms
index.search.slowlog.threshold.query.trace: 0ms

index.search.slowlog.threshold.fetch.warn: 0ms
index.search.slowlog.threshold.fetch.info: 0ms
index.search.slowlog.threshold.fetch.debug: 0ms
index.search.slowlog.threshold.fetch.trace: 0ms
</code></pre>

<br/>


<pre><code>#两台集群的配置基本无异
节点2：
#集群名字和节点1的集群名字相同
cluster.name: xxx_elasticsearch 
node.name: es_node2

#这里需要稍微提一下，这个配置完全是根据具体的业务量来配置的。如果节点2并不设置成数据节点的话，则节点2
#不会保存索引数据，一旦节点1当掉了就搜不出数据了。即便两个都设置成false，节点2仍然能够做数据的聚合处理
#减轻数据节点的数据聚合操作的压力，让数据节点能处理更多的索引请求
node.master: false 
node.data: true

#默认也是不采用多播
discovery.zen.ping.multicast.enabled: false 
#配置单播发现，这里配置节点1的ip和tcp端口，如果有还有其它节点则用逗号分开
discovery.zen.ping.unicast.hosts: ["10.XXX.XXX.1:9300"]

#日志配置同节点1
index.search.slowlog.threshold.query.warn: 0ms
index.search.slowlog.threshold.query.info: 0ms
index.search.slowlog.threshold.query.debug: 0ms
index.search.slowlog.threshold.query.trace: 0ms

index.search.slowlog.threshold.fetch.warn: 0ms
index.search.slowlog.threshold.fetch.info: 0ms
index.search.slowlog.threshold.fetch.debug: 0ms
index.search.slowlog.threshold.fetch.trace: 0ms
</code></pre>

<p>修改两台搜索引擎的日志配置文件：/elasticsearch/config/logging.yml</p>

<pre><code># 这里只贴出主要的几段配置
index.search.slowlog: DEBUG, index_search_slow_log_file
# 打开index.search.slowlog
additivity:
  index.search.slowlog: true
#添加appender
appender:
    index_search_slow_log_file:
    type: dailyRollingFile
    file: ${path.logs}/${cluster.name}_index_search_slowlog.log
    datePattern: "'.'yy-MM-dd"
    layout:
      type: pattern
      conversionPattern: "[%d{ISO8601}][%-5p][%-25c] %m%n"
</code></pre>

<p>Java API集群调用</p>

<pre><code>public static Client newClient(String clusterName, boolean clientTransportSniff, 
                            int port, String... hosts) {
    Settings settings = ImmutableSettings.settingsBuilder()
            .put("cluster.name", clusterName)
            // 不知道为什么配置了这个就会很慢，暂时先关闭，因为短时间内不会出现动态添加机器的情况
            //.put("client.transport.sniff", clientTransportSniff) 
            .build();

    TransportClient transportClient = new TransportClient(settings);
    if(hosts != null) {
        for (String host: hosts) {
            transportClient.addTransportAddress(new InetSocketTransportAddress(host, port));
        }
    }
    return transportClient;
}
</code></pre>

<p>然后跑多次单元测试，观察两台es的slowlog，看看请求有否有效地动态负载到两台机器上</p>

<p>请求1：有3个query负载到了节点1的3个分片(0,3,1), 有2个query负载到了节点2的2个分片(2,4), 最后由节点2做fetch操作</p>

<pre><code>ECS1：
[2016-06-25 16:49:49,346][WARN ][index.search.slowlog.query] [node1] [test_index][0] took[1.7ms], took_millis[1], types[tag], stats[], search_type[DFS_QUERY_THEN_FETCH], total_shards[5], source[{"from":0,"size":1000,"query":{"bool":{"must":{"term":{"id":1}}}},"explain":false,"facets":{"typeFacetName":{"terms":{"field":"pidvids","size":2147483647},"facet_filter":{"query":{"bool":{"must":{"term":{"id":1}}}}}}}}], extra_source[], 

[2016-06-25 16:49:49,348][WARN ][index.search.slowlog.query] [node1] [test_index][3] took[3.7ms], took_millis[3], types[tag], stats[], search_type[DFS_QUERY_THEN_FETCH], total_shards[5], source[{"from":0,"size":1000,"query":{"bool":{"must":{"term":{"id":1}}}},"explain":false,"facets":{"typeFacetName":{"terms":{"field":"pidvids","size":2147483647},"facet_filter":{"query":{"bool":{"must":{"term":{"id":1}}}}}}}}], extra_source[], 

[2016-06-25 16:49:49,349][WARN ][index.search.slowlog.query] [node1] [test_index][1] took[4.9ms], took_millis[4], types[tag], stats[], search_type[DFS_QUERY_THEN_FETCH], total_shards[5], source[{"from":0,"size":1000,"query":{"bool":{"must":{"term":{"id":1}}}},"explain":false,"facets":{"typeFacetName":{"terms":{"field":"pidvids","size":2147483647},"facet_filter":{"query":{"bool":{"must":{"term":{"id":1}}}}}}}}], extra_source[], 

ECS2：
[2016-06-25 16:49:49,347][WARN ][index.search.slowlog.query] [node2] [test_index][2] took[2.9ms], took_millis[2], types[tag], stats[], search_type[DFS_QUERY_THEN_FETCH], total_shards[5], source[{"from":0,"size":1000,"query":{"bool":{"must":{"term":{"id":1}}}},"explain":false,"facets":{"typeFacetName":{"terms":{"field":"pidvids","size":2147483647},"facet_filter":{"query":{"bool":{"must":{"term":{"id":1}}}}}}}}], extra_source[], 

[2016-06-25 16:49:49,348][WARN ][index.search.slowlog.query] [node2] [test_index][4] took[3.1ms], took_millis[3], types[tag], stats[], search_type[DFS_QUERY_THEN_FETCH], total_shards[5], source[{"from":0,"size":1000,"query":{"bool":{"must":{"term":{"id":1}}}},"explain":false,"facets":{"typeFacetName":{"terms":{"field":"pidvids","size":2147483647},"facet_filter":{"query":{"bool":{"must":{"term":{"id":1}}}}}}}}], extra_source[], 

[2016-06-25 16:49:49,350][WARN ][index.search.slowlog.fetch] [node2] [test_index][2] took[460.3micros], took_millis[0], types[tag], stats[], search_type[DFS_QUERY_THEN_FETCH], total_shards[5], source[{"from":0,"size":1000,"query":{"bool":{"must":{"term":{"id":1}}}},"explain":false,"facets":{"typeFacetName":{"terms":{"field":"pidvids","size":2147483647},"facet_filter":{"query":{"bool":{"must":{"term":{"id":1}}}}}}}}], extra_source[], 
</code></pre>

<br/>


<p>请求2：有2个query负载到了节点1的2个分片(2,4), 有3个query负载到了节点2的3个分片(0,3,1), 最后由节点1做fetch操作</p>

<pre><code>ECS1:
[2016-06-25 16:55:36,687][WARN ][index.search.slowlog.query] [node1] [test_index][4] took[729micros], took_millis[0], types[tag], stats[], search_type[DFS_QUERY_THEN_FETCH], total_shards[5], source[{"from":0,"size":1000,"query":{"bool":{"must":{"term":{"id":1}}}},"explain":false,"facets":{"typeFacetName":{"terms":{"field":"pidvids","size":2147483647},"facet_filter":{"query":{"bool":{"must":{"term":{"id":1}}}}}}}}], extra_source[], 

[2016-06-25 16:55:36,687][WARN ][index.search.slowlog.query] [node1] [test_index][2] took[1.4ms], took_millis[1], types[tag], stats[], search_type[DFS_QUERY_THEN_FETCH], total_shards[5], source[{"from":0,"size":1000,"query":{"bool":{"must":{"term":{"id":1}}}},"explain":false,"facets":{"typeFacetName":{"terms":{"field":"pidvids","size":2147483647},"facet_filter":{"query":{"bool":{"must":{"term":{"id":1}}}}}}}}], extra_source[], 

[2016-06-25 16:55:36,689][WARN ][index.search.slowlog.fetch] [node1] [test_index][2] took[286.7micros], took_millis[0], types[tag], stats[], search_type[DFS_QUERY_THEN_FETCH], total_shards[5], source[{"from":0,"size":1000,"query":{"bool":{"must":{"term":{"id":1}}}},"explain":false,"facets":{"typeFacetName":{"terms":{"field":"pidvids","size":2147483647},"facet_filter":{"query":{"bool":{"must":{"term":{"id":1}}}}}}}}], extra_source[], 

ECS2:
[2016-06-25 16:55:36,687][WARN ][index.search.slowlog.query] [node2] [test_index][1] took[705.4micros], took_millis[0], types[tag], stats[], search_type[DFS_QUERY_THEN_FETCH], total_shards[5], source[{"from":0,"size":1000,"query":{"bool":{"must":{"term":{"id":1}}}},"explain":false,"facets":{"typeFacetName":{"terms":{"field":"pidvids","size":2147483647},"facet_filter":{"query":{"bool":{"must":{"term":{"id":1}}}}}}}}], extra_source[], 

[2016-06-25 16:55:36,687][WARN ][index.search.slowlog.query] [node2] [test_index][0] took[874.9micros], took_millis[0], types[tag], stats[], search_type[DFS_QUERY_THEN_FETCH], total_shards[5], source[{"from":0,"size":1000,"query":{"bool":{"must":{"term":{"id":1}}}},"explain":false,"facets":{"typeFacetName":{"terms":{"field":"pidvids","size":2147483647},"facet_filter":{"query":{"bool":{"must":{"term":{"id":1}}}}}}}}], extra_source[], 

[2016-06-25 16:55:36,688][WARN ][index.search.slowlog.query] [node2] [test_index][3] took[519.1micros], took_millis[0], types[tag], stats[], search_type[DFS_QUERY_THEN_FETCH], total_shards[5], source[{"from":0,"size":1000,"query":{"bool":{"must":{"term":{"id":1}}}},"explain":false,"facets":{"typeFacetName":{"terms":{"field":"pidvids","size":2147483647},"facet_filter":{"query":{"bool":{"must":{"term":{"id":1}}}}}}}}], extra_source[],
</code></pre>

<p>从日志来看可以验证集群已经配置成功，我们可以安装es的head plugin，从浏览器视图更直观的观察两个集群节点的状态和健康情况。直接浏览器访问<a href="http://host:port/_plugin/head">http://host:port/_plugin/head</a></p>

<p>节点1
<img src="http://youngjd.com/images/node1.png" alt="Alt text" /></p>

<p>节点2
<img src="http://youngjd.com/images/node2.png" alt="Alt text" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux安装ruby,rubygem,bundle及redis插件]]></title>
    <link href="http://youngjd.com/blog/2016/04/25/setup-ruby/"/>
    <updated>2016-04-25T10:42:52+08:00</updated>
    <id>http://youngjd.com/blog/2016/04/25/setup-ruby</id>
    <content type="html"><![CDATA[<blockquote><p>人生有一百次谨小慎微，你要有一次拍案而起；人生有一百次放浪形骸，也要认真的爱一次；人生有一百次不越雷池一步，你也要潇洒走一回</p></blockquote>

<!-- more -->


<hr />

<br>


<h3>安装ruby</h3>

<pre><code>1. [软件包链接下载地址](https://www.ruby-lang.org/zh_cn/downloads/)
2. wget https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.1.tar.gz
3. tar -zxvpf ruby-2.3.1.tar.gz
4. su -
5. cd ruby-2.3.1/
6. /configure  --prefix=/usr/local/ruby
7. make &amp;&amp; make install
8. export PATH=/usr/local/ruby/bin:$PATH
</code></pre>

<h3>安装rubygem</h3>

<pre><code>1. [软件包链接下载地址](https://rubygems.org/pages/download)
2. wget https://rubygems.org/rubygems/rubygems-2.6.4.zip
3. unzip rubygems-2.6.4.zip
4. cd ruby-2.3.1/
5. ruby setup.rb
</code></pre>

<h3>安装bundle</h3>

<pre><code>1. gem sources --remove https://rubygems.org/
2. gem sources --add https://ruby.taobao.org/
3. gem sources (查看确认镜像)
4. gem install bundler
</code></pre>

<h3>安装redis-audit</h3>

<pre><code>1. bundle install redis-audit
2. bundle exec ruby redis-audit.rb 127.0.0.1 6379 0 10000
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring_message_converter]]></title>
    <link href="http://youngjd.com/blog/2014/07/27/spring-message-converter/"/>
    <updated>2014-07-27T23:21:19+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/27/spring-message-converter</id>
    <content type="html"><![CDATA[<blockquote><p>与其说星巴克是在卖咖啡，不如说是在卖预先定制好的体验。如果考虑星巴克顾客实际消费的产品，就会发现咖啡其实并不是关键产品。实际上，星巴克希望自己成为你的另一个家。星巴克在其2004年的年报中解释道，公司的目标是成为人们除了家庭和工作场所之外的第三个场所，让人在其中感到舒适并保持忠诚。&mdash; <a href="http://book.douban.com/subject/19934344/">《交互设计沉思录》</a></p></blockquote>

<!-- more -->


<hr />

<p>工作的时候有个同事提出了这样一个疑问。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- 省略了namespace --&gt;</span>
</span><span class='line'><span class="nt">&lt;beans&gt;</span>
</span><span class='line'>  <span class="nt">&lt;mvc:annotation-driven/&gt;</span>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloController</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@ResponseBody</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">JsonResult</span> <span class="nf">printWelcome</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">JsonResult</span><span class="o">(</span><span class="mi">1001</span><span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">).</span><span class="na">putData</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;imyoung&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为什么这么简单的配置，spring就能够识别到你返回的是一个Json，从配置里压根就看不到任何头绪。我头一蒙，原来自己还真没有考虑过这个问题，所以就去捣腾了一下。我还记得以前spring的COC(convention over configuration)还没有成风潮，那时候配置这个的时候，我翻阅了一下资料，有两行配置大概是这个样子的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看一下RequestMappingHandlerAdapter的源码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">RequestMappingHandlerAdapter</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">messageConverters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ByteArrayHttpMessageConverter</span><span class="o">());</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">messageConverters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">stringHttpMessageConverter</span><span class="o">);</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">messageConverters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">SourceHttpMessageConverter</span><span class="o">&lt;</span><span class="n">Source</span><span class="o">&gt;());</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">messageConverters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">AllEncompassingFormHttpMessageConverter</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>按照这种配置，RequestMappingHandlerAdapter就只是注册了4个信息转换器，清晰的看到，这里面并没有我们熟悉的mappingJacksonHttpMessageConverter。所以我们以前配置这个的时候，还会加上mappingJacksonHttpMessageConverter的bean注入。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">bean</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">property</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;messageConverters&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">list</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">ref</span> <span class="n">bean</span><span class="o">=</span><span class="s">&quot;mappingJacksonHttpMessageConverter&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">list</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">property</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">bean</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个配置方式就是以前常看到的一种比较传统的配置方式。随着spring的发展，spring越来越重视这种约定大于配置的能够减少很多代码量的风格。就会有了文章开头的那种简洁的配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- 这个配置其实还包含了很多东西,我这里写的只是其中一小项 --&gt;</span>
</span><span class='line'><span class="nt">&lt;mvc:annotation-driven/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>假如我们在配置文件里面使用了这种配置方式，来看看spring大概做了些什么。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="o">*/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MvcNamespaceHandler</span> <span class="kd">extends</span> <span class="n">NamespaceHandlerSupport</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">registerBeanDefinitionParser</span><span class="o">(</span><span class="s">&quot;annotation-driven&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">AnnotationDrivenBeanDefinitionParser</span><span class="o">());</span>
</span><span class='line'>      <span class="n">registerBeanDefinitionParser</span><span class="o">(</span><span class="s">&quot;default-servlet-handler&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">DefaultServletHandlerBeanDefinitionParser</span><span class="o">());</span>
</span><span class='line'>      <span class="n">registerBeanDefinitionParser</span><span class="o">(</span><span class="s">&quot;interceptors&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">InterceptorsBeanDefinitionParser</span><span class="o">());</span>
</span><span class='line'>      <span class="n">registerBeanDefinitionParser</span><span class="o">(</span><span class="s">&quot;resources&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">ResourcesBeanDefinitionParser</span><span class="o">());</span>
</span><span class='line'>      <span class="n">registerBeanDefinitionParser</span><span class="o">(</span><span class="s">&quot;view-controller&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">ViewControllerBeanDefinitionParser</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个类里面，init方法里面的第一行就是注册一个bean的对于annotation-driven这个定义的解释器，再来看看解释器的几个方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//我抽取了我们关注的代码</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">AnnotationDrivenBeanDefinitionParser</span> <span class="kd">implements</span> <span class="n">BeanDefinitionParser</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">BeanDefinition</span> <span class="nf">parse</span><span class="o">(</span><span class="n">Element</span> <span class="n">element</span><span class="o">,</span> <span class="n">ParserContext</span> <span class="n">parserContext</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>      <span class="n">ManagedList</span><span class="o">&lt;?&gt;</span> <span class="n">messageConverters</span> <span class="o">=</span> <span class="n">getMessageConverters</span><span class="o">(</span><span class="n">element</span><span class="o">,</span> <span class="n">source</span><span class="o">,</span> <span class="n">parserContext</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>      <span class="n">handlerAdapterDef</span><span class="o">.</span><span class="na">getPropertyValues</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;messageConverters&quot;</span><span class="o">,</span> <span class="n">messageConverters</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">ManagedList</span><span class="o">&lt;?&gt;</span> <span class="n">getMessageConverters</span><span class="o">(</span><span class="n">Element</span> <span class="n">element</span><span class="o">,</span> <span class="n">Object</span> <span class="n">source</span><span class="o">,</span> <span class="n">ParserContext</span> <span class="n">parserContext</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">jackson2Present</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">messageConverters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">createConverterDefinition</span><span class="o">(</span><span class="n">MappingJackson2HttpMessageConverter</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">source</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看到这里，我们似乎看到一些些苗头了。在getMessageConverters方法里，它会判断是否<strong>jackson2Present(全局boolean常量)</strong>，如果是，则会默认地把MappingJackson2HttpMessageConverter添加到messageConverters列表中。而MappingJackson2HttpMessageConverter就会用到jackson包去做解释json的工作了。所以现在关键就是看看<strong>jackson2Present</strong>到底是什么东东。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">jackson2Present</span> <span class="o">=</span>
</span><span class='line'>          <span class="n">ClassUtils</span><span class="o">.</span><span class="na">isPresent</span><span class="o">(</span><span class="s">&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;</span><span class="o">,</span> <span class="n">AnnotationDrivenBeanDefinitionParser</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">())</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                  <span class="n">ClassUtils</span><span class="o">.</span><span class="na">isPresent</span><span class="o">(</span><span class="s">&quot;com.fasterxml.jackson.core.JsonGenerator&quot;</span><span class="o">,</span> <span class="n">AnnotationDrivenBeanDefinitionParser</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>看到这行代码，应该就会有种&#8221;原来如此&#8221;的感觉了。它是通过判断类加载器有没有加载到与jackson相关的依赖包来决定是否把MappingJackson2HttpMessageConverter添加到转换器队列中的。接下来，我们再稍微看看它是如何写信息的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractMessageConverterMethodProcessor</span> <span class="kd">extends</span> <span class="n">AbstractMessageConverterMethodArgumentResolver</span> <span class="kd">implements</span> <span class="n">HandlerMethodReturnValueHandler</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">writeWithMessageConverters</span><span class="o">(</span><span class="n">T</span> <span class="n">returnValue</span><span class="o">,</span> <span class="n">MethodParameter</span> <span class="n">returnType</span><span class="o">,</span> <span class="n">ServletServerHttpRequest</span> <span class="n">inputMessage</span><span class="o">,</span> <span class="n">ServletServerHttpResponse</span> <span class="n">outputMessage</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">HttpMediaTypeNotAcceptableException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">MediaType</span><span class="o">&gt;</span> <span class="n">requestedMediaTypes</span> <span class="o">=</span> <span class="n">getAcceptableMediaTypes</span><span class="o">(</span><span class="n">servletRequest</span><span class="o">);</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">MediaType</span><span class="o">&gt;</span> <span class="n">producibleMediaTypes</span> <span class="o">=</span> <span class="n">getProducibleMediaTypes</span><span class="o">(</span><span class="n">servletRequest</span><span class="o">,</span> <span class="n">returnValueClass</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">selectedMediaType</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">selectedMediaType</span> <span class="o">=</span> <span class="n">selectedMediaType</span><span class="o">.</span><span class="na">removeQualityValue</span><span class="o">();</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="n">HttpMessageConverter</span><span class="o">&lt;?&gt;</span> <span class="n">messageConverter</span> <span class="o">:</span> <span class="k">this</span><span class="o">.</span><span class="na">messageConverters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">messageConverter</span><span class="o">.</span><span class="na">canWrite</span><span class="o">(</span><span class="n">returnValueClass</span><span class="o">,</span> <span class="n">selectedMediaType</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                  <span class="o">((</span><span class="n">HttpMessageConverter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;)</span> <span class="n">messageConverter</span><span class="o">).</span><span class="na">write</span><span class="o">(</span><span class="n">returnValue</span><span class="o">,</span> <span class="n">selectedMediaType</span><span class="o">,</span> <span class="n">outputMessage</span><span class="o">);</span>
</span><span class='line'>                  <span class="k">if</span> <span class="o">(</span><span class="n">logger</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Written [&quot;</span> <span class="o">+</span> <span class="n">returnValue</span> <span class="o">+</span> <span class="s">&quot;] as \&quot;&quot;</span> <span class="o">+</span> <span class="n">selectedMediaType</span> <span class="o">+</span> <span class="s">&quot;\&quot; using [&quot;</span> <span class="o">+</span>
</span><span class='line'>                              <span class="n">messageConverter</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">);</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>                  <span class="k">return</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>      
</span></code></pre></td></tr></table></div></figure>


<p>这里我只是简单地带过一下(因为我也没有太深入地去追踪到里面)。这个方法其实就是把信息转换器列表的每一个信息转换器与MediaType做一个匹配，匹配上了就用匹配的信息转换器来写返回信息。开始的时候，已经默认地带上了一些requestedMediaTypes了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">text</span><span class="o">/</span><span class="n">html</span>
</span><span class='line'><span class="n">image</span><span class="o">/</span><span class="n">gif</span>
</span><span class='line'><span class="n">image</span><span class="o">/</span><span class="n">jpeg</span>
</span><span class='line'><span class="o">*/*;</span><span class="n">q</span><span class="o">=.</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里主要看的是最后一个，wildcard（通配符形式）的。再看看producibleMediaTypes，就是要产出的mediaType是怎么生成的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">MediaType</span><span class="o">&gt;</span> <span class="nf">getProducibleMediaTypes</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">returnValueClass</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">MediaType</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">MediaType</span><span class="o">&gt;();</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="n">HttpMessageConverter</span><span class="o">&lt;?&gt;</span> <span class="n">converter</span> <span class="o">:</span> <span class="n">messageConverters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">converter</span><span class="o">.</span><span class="na">canWrite</span><span class="o">(</span><span class="n">returnValueClass</span><span class="o">,</span> <span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">result</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">converter</span><span class="o">.</span><span class="na">getSupportedMediaTypes</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>它主要是通过判断你的返回值的类型去作判断的。我这里的例子用的是下面这个返回类</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JsonResult</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">code</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">msg</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>spring会用一系列的方法去判断当前这个converter是否能以返回值的类型来正确输出(校验很多，没细看，大家可以去研究一下，反正大概就是这个样子了)。如果可以就把这个转换器的自身的SupportedMediaTypes加入到producibleMediaTypes中。后面还会再循环判断一次，但后面的判断是，一旦遇到了合适的转换器就会使用它来写返回信息。假如后面还有与producibleMediaTypes匹配的converter，就被忽略了(这里会有一个简单的默认排序和优先规则在这里)。</p>

<p>时间仓促，讲得比较粗略，这篇文章以后还会继续完善。希望文章对大家有所帮助。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ibatis_faq]]></title>
    <link href="http://youngjd.com/blog/2014/07/25/ibatis-faq/"/>
    <updated>2014-07-25T13:04:05+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/25/ibatis-faq</id>
    <content type="html"><![CDATA[<blockquote><p>怎样表述一个命题才算是科学的？按照证伪派，它必须有可能被证明是错误的。
比如“所有的乌鸦都是黑的”，那么你只要找到一只不是黑色的乌鸦，就可以证明这
个命题的错误，因此这个命题没有问题。相反，如果非要“证实”才接受这个论断的
话，那可就困难了，而且实际上是不可能的！除非你把所有的乌鸦都抓来看过，但你
又怎么能知道你已经抓尽了天下所有的乌鸦呢？ &mdash; <a href="http://book.douban.com/subject/1467022/">《上帝掷骰子吗》</a></p></blockquote>

<!-- more -->


<hr />

<br>


<h2>ibatis中#与$的区别</h2>

<p>案例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/** </span>
</span><span class='line'><span class="cm">* Spring Controller </span>
</span><span class='line'><span class="cm">* 访问的url -&gt; http://localhost:8080/promotions?start=1&amp;limit=0</span>
</span><span class='line'><span class="cm">**/</span>
</span><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">JsonResult</span> <span class="nf">list</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">Promotion</span><span class="o">&gt;</span> <span class="n">promotions</span> <span class="o">=</span> <span class="n">promotionMapper</span><span class="o">.</span><span class="na">list</span><span class="o">(</span><span class="n">params</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">// remaining code here</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* Mapper接口</span>
</span><span class='line'><span class="cm">**/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PromotionMapper</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Promotion</span><span class="o">&gt;</span> <span class="nf">list</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">params</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;list&quot;</span> <span class="na">resultType=</span><span class="s">&quot;Promotion&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  SELECT id, productId, imgUrls
</span><span class='line'>  FROM limitedtimediscount WHERE status = 1 AND endDate &gt;= now()
</span><span class='line'>  ORDER BY beginDate DESC
</span><span class='line'>  <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&quot;start != null and limit != null&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      LIMIT #{start}, #{limit}
</span><span class='line'>  <span class="nt">&lt;/if&gt;</span>
</span><span class='line'><span class="nt">&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码中，我用了#号来获取map参数集合中的对应的start和limit值。运行报错</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>### The error may involve defaultParameterMap
</span><span class='line'>### The error occurred while setting parameters
</span><span class='line'>### SQL: SELECT id, productId, imgUrls         FROM limitedtimediscount WHERE status = 1 AND endDate &gt;= now()  ORDER BY beginDate DESC  LIMIT ?, ?
</span><span class='line'>### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#39;&#39;1&#39;, &#39;0&#39;&#39; at line 5
</span><span class='line'>; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#39;&#39;1&#39;, &#39;0&#39;&#39; at line 5
</span></code></pre></td></tr></table></div></figure>


<p>从log可以看出，我传进来的1和0被当成了字符串&#8217;1&#8217;和&#8217;0&#8217;了，在mysql limit的语法中，这显然是错误的。
这时候我想到的是能不能转型，所以我又把sql改成下面这样子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;list&quot;</span> <span class="na">resultType=</span><span class="s">&quot;Promotion&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  SELECT id, productId, imgUrls
</span><span class='line'>  FROM limitedtimediscount WHERE status = 1 AND endDate &gt;= now()
</span><span class='line'>  ORDER BY beginDate DESC
</span><span class='line'>  <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&quot;start != null and limit != null&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      LIMIT #{start, javaType=int}, #{limit, javaType=int}
</span><span class='line'>  <span class="nt">&lt;/if&gt;</span>
</span><span class='line'><span class="nt">&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行后又报了不一样的错误</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>### Error querying database.  Cause: java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer
</span><span class='line'>### The error may exist in sqlmap/PromotionMapper.xml
</span><span class='line'>### The error may involve defaultParameterMap
</span><span class='line'>### The error occurred while setting parameters
</span><span class='line'>### SQL: SELECT id, productId, imgUrls         FROM limitedtimediscount WHERE status = 1 AND endDate &gt;= now()         ORDER BY beginDate DESC                       LIMIT ?, ?
</span><span class='line'>### Cause: java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer
</span></code></pre></td></tr></table></div></figure>


<p>这次是说String不能转换成Integer
接着我在网上搜索资料，找到了这么一篇<a href="http://shenzhenchufa.blog.51cto.com/730213/254561">文章</a>，哦，原来ibatis中#和$是不一样的，引用原文的话</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>1.#是把传入的数据当作字符串，如#field#传入的是id,则sql语句生成是这样，order by &quot;id&quot;,这当然会报错.
</span><span class='line'>2.$传入的数据直接生成在sql里，如#field#传入的是id,则sql语句生成是这样，order by id, 这就对了.
</span></code></pre></td></tr></table></div></figure>


<p>因此，只要把#{start}, #{limit}改成${start}, ${limit}就可以返回正确的结果。但在这个案例中，还存在另外一个问题。根据原文提到的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>$方式一般用于传入数据库对象．例如传入表名.
</span><span class='line'>#方式一般用于传入插入/更新的值或查询/删除的where条件
</span></code></pre></td></tr></table></div></figure>


<p>他的说法我基本认同，因此在我的案例中使用$解决问题只是一个trick，我觉得还是不够科学。下面我写了几行代码验证了几个基础知识</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;();</span>
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;2&quot;</span><span class="o">,</span> <span class="s">&quot;2&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;3&quot;</span><span class="o">,</span> <span class="mf">2.1</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;---------------check int--------------&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;1 instanceof Integer:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">Integer</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;1 instanceof String:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;1 instanceof Object:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">Object</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;---------------check string--------------&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&#39;2&#39; instanceof Double:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;2&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&#39;2&#39; instanceof Integer:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;2&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">Integer</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&#39;2&#39; instanceof Object:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;2&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">Object</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;---------------check double--------------&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;2.1 instanceof Double:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;3&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">Double</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;2.1 instanceof Integer:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;3&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">Integer</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;2.1 instanceof String:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;3&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;2.1 instanceof Object:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;3&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">Object</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nl">output:</span>
</span><span class='line'><span class="o">---------------</span><span class="n">check</span> <span class="kt">int</span><span class="o">--------------</span>
</span><span class='line'><span class="mi">1</span> <span class="k">instanceof</span> <span class="nl">Integer:</span><span class="kc">true</span>
</span><span class='line'><span class="mi">1</span> <span class="k">instanceof</span> <span class="nl">String:</span><span class="kc">false</span>
</span><span class='line'><span class="mi">1</span> <span class="k">instanceof</span> <span class="nl">Object:</span><span class="kc">true</span>
</span><span class='line'>
</span><span class='line'><span class="o">---------------</span><span class="n">check</span> <span class="n">string</span><span class="o">--------------</span>
</span><span class='line'><span class="s">&quot;2&quot;</span> <span class="k">instanceof</span> <span class="nl">Double:</span><span class="kc">true</span>
</span><span class='line'><span class="s">&quot;2&quot;</span> <span class="k">instanceof</span> <span class="nl">Integer:</span><span class="kc">false</span>
</span><span class='line'><span class="s">&quot;2&quot;</span> <span class="k">instanceof</span> <span class="nl">Object:</span><span class="kc">true</span>
</span><span class='line'>
</span><span class='line'><span class="o">---------------</span><span class="n">check</span> <span class="kt">double</span><span class="o">--------------</span>
</span><span class='line'><span class="mf">2.1</span> <span class="k">instanceof</span> <span class="nl">Double:</span><span class="kc">true</span>
</span><span class='line'><span class="mf">2.1</span> <span class="k">instanceof</span> <span class="nl">Integer:</span><span class="kc">false</span>
</span><span class='line'><span class="mf">2.1</span> <span class="k">instanceof</span> <span class="nl">String:</span><span class="kc">false</span>
</span><span class='line'><span class="mf">2.1</span> <span class="k">instanceof</span> <span class="nl">Object:</span><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">JsonResult</span> <span class="nf">list</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;start instanceof Integer:&quot;</span> <span class="o">+</span> <span class="n">params</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;start&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;start instanceof String:&quot;</span> <span class="o">+</span> <span class="n">params</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;start&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="c1">// remaining code here</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nl">output:</span>
</span><span class='line'><span class="n">start</span> <span class="k">instanceof</span> <span class="nl">Integer:</span><span class="kc">false</span>
</span><span class='line'><span class="n">start</span> <span class="k">instanceof</span> <span class="nl">String:</span><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>没写完&hellip;&hellip;&hellip;&hellip;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java: Getters and Setters]]></title>
    <link href="http://youngjd.com/blog/2014/07/25/java-getters-and-setters/"/>
    <updated>2014-07-25T00:58:11+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/25/java-getters-and-setters</id>
    <content type="html"><![CDATA[<blockquote><p>我不在创业，就在去创业的路上 —— <a href="http://baike.baidu.com/view/1737286.htm?fr=aladdin">冯大辉</a> <a href="http://book.douban.com/subject/25800616/">《创业时，我们在知乎聊什么》</a></p></blockquote>

<!-- more -->


<hr />

<br>


<p>本文翻译自<a href="http://java.dzone.com/articles/getter-setter-use-or-not-use">http://java.dzone.com/articles/getter-setter-use-or-not-use</a></p>

<br>


<p>主要谈到Java的setter和getter方法.翻译内容不完全直译,带有个人感情,请读者冷静.</p>

<br>


<blockquote><p>我们为什么要把实例变量保持私有呢?因为我们并不希望其他的类过度地依赖它们,并且我们不希望它们会被随意的更改.为什么很多程序员在用IDE编写程序的时候,都会不假思索,娴熟地利用快捷键自动生成getter和setter方法,并且这些setter和getter方法并没有特殊的实现,他们用这种形式去暴露私有变量,这样的话,那跟直接设置成public有什么区别呢?</p></blockquote>

<h2>Accessor methods(访问方法)</h2>

<p>Accessor(通常也称之为getter和setter方法)是一种让你能够读取和修改对象的实例变量的一种手段或方法.</p>

<h2>为什么要使用Accessors呢?</h2>

<p>使用Accessors确实比直接暴露类的属性更好一些.使用Getter和Setter似乎也能够使得API更加稳定.举例来说,考虑有这么一个类,它有一个公共变量,并且这个公共变量能够被其他的类访问.过了一阵子,你想在能够获取和读取变量的同时额外添加一些业务逻辑.这就会直接影响到API的调用者了.所以这个变量的任何变更都会要求依赖到它的每个类作出相应的变更.相反,使用访问方法,能够简单地在以后添加诸如数据缓存，延迟初始化等的逻辑。此外,一旦一个属性被触发更新事件,如果新的值不同于之前的值.所有使用get方法获取值的类都能无缝对接。(这段翻译得不好哇)</p>

<h2>我们应该把所有的属性都加上Accessor方法吗?</h2>

<p>我们都知道,属性有好几个访问修饰符,如public,pakcage,private.对于添加访问方法,直接暴露属性能带来更少的视觉上的混乱感,这种感觉在定义类和客户端使用的时候也尤其明显.</p>

<blockquote><p>如果一个类是包内私有的或者是一个私有的内部类,直接暴露(不添加访问方法)其实并不是错的&mdash;这里假设已经很好地抽象了这个类的行为.(这里不知道怎么翻译)</p></blockquote>

<p>这些代码其实已经被限定在该类所在包的作用域之内了,调用端代码也被绑定到了类的内部表现中.我们可以变更它而不用修改包外面的任何代码.并且,对于内部类这种情况,作用域范围内的变更都已经被严格限制在包裹类中了.(这段也不好翻译)</p>

<p>另外使用public来设计的例子还有<a href="http://baike.baidu.com/view/209603.htm">JavaSpace</a>的entry objects.Ken Arnold描述了他们的历程,来阐明他们为什么会选择public而不是get和set方法.</p>

<blockquote><p>当今很多时候都会让人很烦心,因为他们都被告诉不要去使用public,public字段并不是一种好的做法.并且很多时候,人们都变得教条主义了.但是我们并没有被教条束缚住.规则应该是由它的理由的.但是私有性的规则并不适合我们这种特殊的情况.这确实是一个罕见的特殊情况.我也经常告诉人们,不要设置对象的属性为public,但例外总是存在的.我们这个就是例外,因为定义它为一个属性更见简单和安全.我们常回过头问自己：为什么要这样规定?这些规定是否总是适用?至少我们的情况并不适用.</p></blockquote>

<h2>私有属性 + 公共访问方法 == 封装</h2>

<p>考虑一下这个例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通常上面的代码被认为是不好的,因为它违背了封装原则,一个替代的方法是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setA</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">=</span><span class="n">a</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getA</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">a</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有人认为这就是对属性的封装.但是你真的认为它就是真正意义上的封装了吗?</p>

<p>实际上,getter和setter对于封装性一点意义都没有.在上面的代码中,加上了getter和setter之后,内部的数据也并没有比直接暴露(public)属性获得更好的隐蔽性和封装性.其它的对象依然能够很轻易地就了解到这个类的内部信息.这个类的变更能够或多或少地对依赖其的类产生波动(影响)并迫使他们也作出相应的变更.以这种方式去使用getter和setter,其实也是打破了封装性.一个比较确切的良好的封装类应该是没有setter,最好也没有getter方法.相比于直接访问一个类来获取数据,然后计算它,再重新把计算好的值赋值给这个类(哇靠,啰不啰嗦啊),其实还不如(更应该)由这个类本身去承担计算的责任,并返回计算后的结果.</p>

<p>再来看看下面这个例子吧,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Screens</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Map</span> <span class="n">screens</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Map</span> <span class="nf">getScreens</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">screens</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setScreens</span><span class="o">(</span><span class="n">Map</span> <span class="n">screens</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">screens</span> <span class="o">=</span> <span class="n">screens</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// remaining code here</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们需要一个特别一点的screen,那我们就写成下面这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Screen</span> <span class="n">s</span> <span class="o">=</span> <span class="o">(</span><span class="n">Screen</span><span class="o">)</span><span class="n">screens</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">screenId</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码有一些细节值得我们去思考</p>

<p>代码调用者需要从Map里面获得一个对象,并把它强制转换为我们需要的类型(Screen).并且,更不能忍的是,居然任何一个代码的调用者都有能力去把Screen里面的screens对象给清空掉.</p>

<p>一个替代上面如此脑残的代码的方法我认为是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Screens</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Map</span> <span class="n">screens</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Screen</span> <span class="nf">getById</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">Screen</span><span class="o">)</span> <span class="n">screens</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// remaining code here</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>像这样子,Map实例和Map内部的所有接口就都能够做到更好的隐秘性和封装性了,你认为是吗?</p>

<h2>哎,getter和setter在很多情况下都被滥用了(尤其Java)</h2>

<p>创建一个私有属性,然后娴熟地使用IDE去自动生成getter和setter的方法已经成为很多程序员的&#8221;必杀技&#8221;.这些完全没有任何意义的getter/setter代码居然比真正的业务逻辑都还有长,并且你还要去阅读(这里读者应该指单纯地看,我是不会去阅读的)这些代码一遍又一遍,即便你一点都不愿意
(所以现在的IDE自动折叠功能还是有用的).</p>

<p>所有的属性都应该保持私有,当只有把对象设置成不可变的时候,setter方法才有那么一点能够被理解.增加一个没啥必要的getter方法,揭露了类的内部信息,增加了产生耦合的可能性.</p>

<p><strong>所以啊,为了规避上述这些脑子被门缝夹过后才有可能会干出的鸟事,大伙在使用快捷键愉快地自动生成get/set方法,在妹子面前炫耀你牛A闪闪的手速之前,还是先多拍几下自己的脑袋,也许能够拍出个更美妙的封装方法也说不定哦.</strong></p>

<p>最后一个例子了,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Money</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">double</span> <span class="n">amount</span><span class="o">;</span>  
</span><span class='line'>  
</span><span class='line'>    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getAmount</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">amount</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAmount</span><span class="o">(</span><span class="kt">double</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">amount</span> <span class="o">=</span> <span class="n">amount</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="c1">//client</span>
</span><span class='line'>    <span class="n">Money</span> <span class="n">pocketMoney</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Money</span><span class="o">();</span>
</span><span class='line'>    <span class="n">pocketMoney</span><span class="o">.</span><span class="na">setAmount</span><span class="o">(</span><span class="mi">15</span><span class="n">d</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">amount</span> <span class="o">=</span> <span class="n">pocketMoney</span><span class="o">.</span><span class="na">getAmount</span><span class="o">();</span>  <span class="c1">// we know its double  </span>
</span><span class='line'>    <span class="n">pocketMoney</span><span class="o">.</span><span class="na">setAmount</span><span class="o">(</span><span class="n">amount</span> <span class="o">+</span> <span class="mi">10</span><span class="n">d</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>按照上面的逻辑,一段时间后,我们假设double类型已经不适用了,要用BigDecimal代替它,这时候,所有的的代码调用者都崩溃了(调用代码全部报错,一片红色的海洋,还能不崩溃吗?)</p>

<p>唯有重构上面那堆垃圾代码了.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Money</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Money</span><span class="o">(</span><span class="n">String</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">amount</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">Money</span> <span class="n">toAdd</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">amount</span> <span class="o">=</span> <span class="n">amount</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">toAdd</span><span class="o">.</span><span class="na">amount</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// client</span>
</span><span class='line'>  <span class="n">Money</span> <span class="n">balance1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Money</span><span class="o">(</span><span class="s">&quot;10.0&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Money</span> <span class="n">balance2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Money</span><span class="o">(</span><span class="s">&quot;6.0&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">balance1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">balance2</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在,不再是去访问一个值了,Money类已经拥有自我提升的责任(能力)了.现在这种方式无论你以后怎么改变amount的数据类型,都不会影响到代码的调用者了.其实这里,已不单只是数据被封装起来,它存储的数据和与它相关联的存在的所有事实也被封装起来了.(这里有点哲学)</p>

<h2>结论</h2>

<p>与直接暴露变量相比,使用访问方法去限制对变量的直接访问应该是优先考虑的.但是,每一个变量都加上getter和setter方法就有点矫枉过正了,我们还是要根据实际情况做出适当的决策.因为有时你可能只是需要一个又隆又哑的数据对象而已.访问方法只有在实际需要的情况下才去使用.一个类应该暴露一个粒度更粗的行为接口,这个行为接口要能恰如其分地表达它当且的状态,而不是把一堆状态的集合暴露出来,随意让人操作.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The_docker_user_guide]]></title>
    <link href="http://youngjd.com/blog/2014/07/20/the-docker-user-guide/"/>
    <updated>2014-07-20T19:29:31+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/20/the-docker-user-guide</id>
    <content type="html"><![CDATA[<p>没翻译完</p>

<!-- more -->


<h3>Docker用户指南</h3>

<p>在介绍篇中你已经了解了什么事Docker和如何利用它来工作。在这篇指南我们将带着你学习
使用Docker和如何把它集成到你的环境中的基础知识。</p>

<p>我们将指导你如何使用Docker：</p>

<ul>
<li>使用的应用Docker化</li>
<li>运行你自己的容器</li>
<li>建立Docker的镜像</li>
<li>分享你的Docker镜像</li>
<li>还有更多</li>
</ul>


<p>我们把这个指南分成了几个主要的部分来让你了解Docker的生命周期</p>

<h3>让我们开始学习Docker Hub</h3>

<p>如何使用Docker Hub?
Docker Hub是Docker中心。它存放公共的Docke镜像并提供服务来帮助你建立和管理你的Docker环境。想了解更多：
请阅读 (User Docker Hub)[]</p>

<h3>让你的应用Docker起来：A &ldquo;Hello world&rdquo;</h3>

<p>如何在容器内部运行应用?</p>

<p>Docker提供了一个基于容器的虚拟化平台来运行你的应用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install-jdk-on-ubuntu]]></title>
    <link href="http://youngjd.com/blog/2014/07/16/install-jdk-on-ubuntu/"/>
    <updated>2014-07-16T14:04:43+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/16/install-jdk-on-ubuntu</id>
    <content type="html"><![CDATA[<blockquote><p>利用对立想法构建新的解决方案的思考者，与那些每次只考虑一个模式的人相比，具有更大的内在优势。&mdash;&mdash;马丁<br/>
马丁发现，最成功的领导者“欢迎混乱”。他们允许复杂性的存在，至少在寻找解决方案时如此，因为复杂性是创造性机会最可靠的来源。&mdash;&mdash; <a href="http://book.douban.com/subject/6522698/">《ideo,设计改变一切》</a></p></blockquote>

<!-- more -->


<hr />

<br>


<h3>Install jdk7 on ubuntu step by step</h3>

<h4>1. Unpack install package</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo tar xvzf jdk-7u51-linux-x64.gz</span></code></pre></td></tr></table></div></figure>


<h4>2. Set environment.</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'>* JAVA_HOME=/usr/local/jdk7
</span><span class='line'>* PATH=$PATH:$HOME/bin:$JAVA_HOME/bin
</span><span class='line'>* export JAVA_HOME
</span><span class='line'>* export PATH
</span><span class='line'>**/
</span><span class='line'>sudo vi /etc/profile</span></code></pre></td></tr></table></div></figure>


<h4>3. Inform system where jdk7 located</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo update-alternatives --install "/usr/bin/java" "java" "/usr/local/jdk7/bin/java" 1
</span><span class='line'>sudo update-alternatives --install "/usr/bin/javac" "javac" "/usr/local/jdk7/bin/javac" 1
</span><span class='line'>sudo update-alternatives --install "/usr/bin/javaws" "javaws" "/usr/local/jdk7/bin/javaws" 1</span></code></pre></td></tr></table></div></figure>


<h4>4. Set jdk7 to be the default jdk</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo update-alternatives --set java /usr/local/jdk7/bin/java
</span><span class='line'>sudo update-alternatives --set javac /usr/local/jdk7/bin/javac
</span><span class='line'>sudo update-alternatives --set javaws /usr/local/jdk7/bin/javaws</span></code></pre></td></tr></table></div></figure>


<h4>5. Apply /etc/profile</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source /etc/profile</span></code></pre></td></tr></table></div></figure>


<h4>6. Check.</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -version
</span><span class='line'>javac -version</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-webflow]]></title>
    <link href="http://youngjd.com/blog/2014/07/15/spring-webflow/"/>
    <updated>2014-07-15T13:31:52+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/15/spring-webflow</id>
    <content type="html"><![CDATA[<blockquote><p>通过判例可以迅速灵活地反映社会发展对法律调整提出的不同要求，及时确立合乎社会需要的法律规范。成文法考虑的是立法时的社会价值标准，而不是案件发生时的社会价值标准，因此，只要法律没有改变，不管现实的价值标准同立法时的价值标准发生怎样的冲突，都只能依照法律的规定处理案件。<br/>
&mdash;&mdash; <a href="http://book.douban.com/subject/1391975/">《普通法与自由主义理论:柯克霍布斯及美国宪政主义之诸源头》</a></p></blockquote>

<!-- more -->


<p>这篇博客先从宏观上认识spring-webflow。主要了解如何定义一个简单的流程。</p>

<hr />

<br>


<h3>元素</h3>

<h4>1. flow</h4>

<p>流程节点，是一个流程中的根节点元素，作为整个流程的输入，流程的所有状态都要定义在这个节点的内部。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;flow</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/webflow&quot;</span>
</span><span class='line'>      <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>      <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/webflow</span>
</span><span class='line'><span class="s">                          http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/flow&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2. view-state</h4>

<p>视图状态节点，用于定义流程中渲染页面的一个步骤。一般约定一个视图状态的id映射实际页面文件的id(文件名)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;view-state</span> <span class="na">id=</span><span class="s">&quot;enterBookingDetails&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3. transition</h4>

<p>状态转换节点，用于处理发生在状态内的事件。transitions会驱动页面的导航。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;view-state</span> <span class="na">id=</span><span class="s">&quot;enterBookingDetails&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- 当接收到submit事件后，流程就会从enterBookingDetails状态跳转到reviewBooking状态 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;transition</span> <span class="na">on=</span><span class="s">&quot;submit&quot;</span> <span class="na">to=</span><span class="s">&quot;reviewBooking&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/view-state&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>4. end-state</h4>

<p>结束状态节点，作为一个流程的输出。当流程转换到end-state，则会终止流程并返回输出。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;end-state</span> <span class="na">id=</span><span class="s">&quot;bookingCancelled&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<br>


<p>参考链接</p>

<ul>
<li><a href="http://docs.spring.io/spring-webflow/docs/2.4.0.RELEASE/reference/html/defining-flows.html">spring-webflow</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown]]></title>
    <link href="http://youngjd.com/blog/2014/07/14/markdown/"/>
    <updated>2014-07-14T17:06:40+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/14/markdown</id>
    <content type="html"><![CDATA[<blockquote><p>所谓设计就是，以非现有逻辑的逻辑，解决现有逻辑不能解决的问题。 &mdash; <a href="http://baike.baidu.com/view/548853.htm?fr=aladdin">蒋友柏</a></p></blockquote>

<!--More-->


<hr />

<br>


<p>这篇文章主要记录Markdown的基础语法。</p>

<blockquote><p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。&mdash; <a href="http://zh.wikipedia.org/wiki/Markdown">wikipedia</a></p></blockquote>

<h2>标题</h2>

<pre><code># 这是标题1
## 这是标题2
### 这是标题3
###### 这是标题6
</code></pre>

<h2>引用</h2>

<pre><code>&gt; 这是引用
&gt; 还是引用
&gt; 也是引用
</code></pre>

<h2>清单</h2>

<pre><code>* 鼠标
* 键盘
* 耳机
</code></pre>

<h2>链接</h2>

<pre><code>[链接名](url)
</code></pre>

<hr />

<br>


<p>参考链接</p>

<ul>
<li><a href="http://markdown.tw/">http://markdown.tw/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tyler's WARNING]]></title>
    <link href="http://youngjd.com/blog/2014/07/13/first-blog/"/>
    <updated>2014-07-13T16:26:55+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/13/first-blog</id>
    <content type="html"><![CDATA[<blockquote><p>WARNING<br>
If you are reading this then this warning is for you. <br>
Every word you read of this useless fine print is another second off you life. <br>
Do not you have other thing to do? <br>
Is your life so empty that you honestly can&rsquo;t think of a better way to spend these moments？ <br>
Or are you so impressed with authority that you give respect and credence to all who claim it？Do you read everything you are supposed read？ <br>
Do you think everything you are supposed think？ <br>
Buy what you are told you should want？ <br>
Get out of your apartment. Meet a member of the opposite sex. <br>
Stop the excessive shopping and masturbation. <br>
Quit your job. Start a fight. Prove you are alive. <br>
If you do not claim your humanity you will become a statistic. <br>
You have been warned&hellip;&hellip; <br>
Tyler.  &mdash;<a href="http://movie.douban.com/subject/1292000/">《搏击俱乐部》</a></p></blockquote>

<!--More-->

]]></content>
  </entry>
  
</feed>
