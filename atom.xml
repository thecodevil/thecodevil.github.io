<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[battousai's blog]]></title>
  <link href="http://youngjd.com/atom.xml" rel="self"/>
  <link href="http://youngjd.com/"/>
  <updated>2014-07-25T11:20:36+08:00</updated>
  <id>http://youngjd.com/</id>
  <author>
    <name><![CDATA[battousai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java: Getters and Setters]]></title>
    <link href="http://youngjd.com/blog/2014/07/25/java-getters-and-setters/"/>
    <updated>2014-07-25T00:58:11+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/25/java-getters-and-setters</id>
    <content type="html"><![CDATA[<blockquote><p>我不在创业，就在去创业的路上 —— <a href="http://baike.baidu.com/view/1737286.htm?fr=aladdin">冯大辉</a> <a href="http://book.douban.com/subject/25800616/">《创业时，我们在知乎聊什么》</a></p></blockquote>

<!-- more -->


<hr />

<br>


<p>本文翻译自<a href="http://java.dzone.com/articles/getter-setter-use-or-not-use">http://java.dzone.com/articles/getter-setter-use-or-not-use</a></p>

<br>


<p>主要谈到Java的setter和getter方法.翻译内容不完全直译,带有个人感情,请读者冷静.</p>

<br>


<blockquote><p>我们为什么要把实例变量保持私有呢?因为我们并不希望其他的类过度地依赖它们,并且我们不希望它们会被随意的更改.为什么很多程序员在用IDE编写程序的时候,都会不假思索,娴熟地利用快捷键自动生成getter和setter方法,并且这些setter和getter方法并没有特殊的实现,他们用这种形式去暴露私有变量,这样的话,那跟直接设置成public有什么区别呢?</p></blockquote>

<h2>Accessor methods(访问方法)</h2>

<p>Accessor(通常也称之为getter和setter方法)是一种让你能够读取和修改对象的实例变量的一种手段或方法.</p>

<h2>为什么要使用Accessors呢?</h2>

<p>使用Accessors确实比直接暴露类的属性更好一些.使用Getter和Setter似乎也能够使得API更加稳定.举例来说,考虑有这么一个类,它有一个公共变量,并且这个公共变量能够被其他的类访问.过了一阵子,你想在能够获取和读取变量的同时额外添加一些业务逻辑.这就会直接影响到API的调用者了.所以这个变量的任何变更都会要求依赖到它的每个类作出相应的变更.相反,使用访问方法,能够简单地在以后添加诸如数据缓存，延迟初始化等的逻辑。此外,一旦一个属性被触发更新事件,如果新的值不同于之前的值.所有使用get方法获取值的类都能无缝对接。(这段翻译得不好哇)</p>

<h2>我们应该把所有的属性都加上Accessor方法吗?</h2>

<p>我们都知道,属性有好几个访问修饰符,如public,pakcage,private.对于添加访问方法,直接暴露属性能带来更少的视觉上的混乱感,这种感觉在定义类和客户端使用的时候也尤其明显.</p>

<blockquote><p>如果一个类是包内私有的或者是一个私有的内部类,直接暴露(不添加访问方法)其实并不是错的&mdash;这里假设已经很好地抽象了这个类的行为.(这里不知道怎么翻译)</p></blockquote>

<p>这些代码其实已经被限定在该类所在包的作用域之内了,调用端代码也被绑定到了类的内部表现中.我们可以变更它而不用修改包外面的任何代码.并且,对于内部类这种情况,作用域范围内的变更都已经被严格限制在包裹类中了.(这段也不好翻译)</p>

<p>另外使用public来设计的例子还有<a href="http://baike.baidu.com/view/209603.htm">JavaSpace</a>的entry objects.Ken Arnold描述了他们的历程,来阐明他们为什么会选择public而不是get和set方法.</p>

<blockquote><p>当今很多时候都会让人很烦心,因为他们都被告诉不要去使用public,public字段并不是一种好的做法.并且很多时候,人们都变得教条主义了.但是我们并没有被教条束缚住.规则应该是由它的理由的.但是私有性的规则并不适合我们这种特殊的情况.这确实是一个罕见的特殊情况.我也经常告诉人们,不要设置对象的属性为public,但例外总是存在的.我们这个就是例外,因为定义它为一个属性更见简单和安全.我们常回过头问自己：为什么要这样规定?这些规定是否总是适用?至少我们的情况并不适用.</p></blockquote>

<h2>私有属性 + 公共访问方法 == 封装</h2>

<p>考虑一下这个例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通常上面的代码被认为是不好的,因为它违背了封装原则,一个替代的方法是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setA</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">=</span><span class="n">a</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getA</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">a</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有人认为这就是对属性的封装.但是你真的认为它就是真正意义上的封装了吗?</p>

<p>实际上,getter和setter对于封装性一点意义都没有.在上面的代码中,加上了getter和setter之后,内部的数据也并没有比直接暴露(public)属性获得更好的隐蔽性和封装性.其它的对象依然能够很轻易地就了解到这个类的内部信息.这个类的变更能够或多或少地对依赖其的类产生波动(影响)并迫使他们也作出相应的变更.以这种方式去使用getter和setter,其实也是打破了封装性.一个比较确切的良好的封装类应该是没有setter,最好也没有getter方法.相比于直接访问一个类来获取数据,然后计算它,再重新把计算好的值赋值给这个类(哇靠,啰不啰嗦啊),其实还不如(更应该)由这个类本身去承担计算的责任,并返回计算后的结果.</p>

<p>再来看看下面这个例子吧,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Screens</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Map</span> <span class="n">screens</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Map</span> <span class="nf">getScreens</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">screens</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setScreens</span><span class="o">(</span><span class="n">Map</span> <span class="n">screens</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">screens</span> <span class="o">=</span> <span class="n">screens</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// remaining code here</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们需要一个特别一点的screen,那我们就写成下面这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Screen</span> <span class="n">s</span> <span class="o">=</span> <span class="o">(</span><span class="n">Screen</span><span class="o">)</span><span class="n">screens</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">screenId</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码有一些细节值得我们去思考</p>

<p>代码调用者需要从Map里面获得一个对象,并把它强制转换为我们需要的类型(Screen).并且,更不能忍的是,居然任何一个代码的调用者都有能力去把Screen里面的screens对象给清空掉.</p>

<p>一个替代上面如此脑残的代码的方法我认为是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Screens</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Map</span> <span class="n">screens</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Screen</span> <span class="nf">getById</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">Screen</span><span class="o">)</span> <span class="n">screens</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// remaining code here</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>像这样子,Map实例和Map内部的所有接口就都能够做到更好的隐秘性和封装性了,你认为是吗?</p>

<h2>哎,getter和setter在很多情况下都被滥用了(尤其Java)</h2>

<p>创建一个私有属性,然后娴熟地使用IDE去自动生成getter和setter的方法已经成为很多程序员的&#8221;必杀技&#8221;.这些完全没有任何意义的getter/setter代码居然比真正的业务逻辑都还有长,并且你还要去阅读(这里读者应该指单纯地看,我是不会去阅读的)这些代码一遍又一遍,即便你一点都不愿意
(所以现在的IDE自动折叠功能还是有用的).</p>

<p>所有的属性都应该保持私有,当只有把对象设置成不可变的时候,setter方法才有那么一点能够被理解.增加一个没啥必要的getter方法,揭露了类的内部信息,增加了产生耦合的可能性.</p>

<p><strong>所以啊,为了规避上述这些脑子被门缝夹过后才有可能会干出的鸟事,大伙在使用快捷键愉快地自动生成get/set方法,在妹子面前炫耀你牛A闪闪的手速的之前,还是先多拍几下自己的脑袋,也许能够拍出个更美妙的封装方法也说不定哦.</strong></p>

<p>最后一个例子了,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Money</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">double</span> <span class="n">amount</span><span class="o">;</span>  
</span><span class='line'>  
</span><span class='line'>    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getAmount</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">amount</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAmount</span><span class="o">(</span><span class="kt">double</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">amount</span> <span class="o">=</span> <span class="n">amount</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="c1">//client</span>
</span><span class='line'>    <span class="n">Money</span> <span class="n">pocketMoney</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Money</span><span class="o">();</span>
</span><span class='line'>    <span class="n">pocketMoney</span><span class="o">.</span><span class="na">setAmount</span><span class="o">(</span><span class="mi">15</span><span class="n">d</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">amount</span> <span class="o">=</span> <span class="n">pocketMoney</span><span class="o">.</span><span class="na">getAmount</span><span class="o">();</span>  <span class="c1">// we know its double  </span>
</span><span class='line'>    <span class="n">pocketMoney</span><span class="o">.</span><span class="na">setAmount</span><span class="o">(</span><span class="n">amount</span> <span class="o">+</span> <span class="mi">10</span><span class="n">d</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>按照上面的逻辑,一段时间后,我们假设double类型已经不适用了,要用BigDecimal代替它,这时候,所有的的代码调用者都崩溃了(调用代码全部报错,一片红色的海洋,还能不崩溃吗?)</p>

<p>唯有重构上面那堆垃圾代码了.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Money</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Money</span><span class="o">(</span><span class="n">String</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">amount</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">Money</span> <span class="n">toAdd</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">amount</span> <span class="o">=</span> <span class="n">amount</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">toAdd</span><span class="o">.</span><span class="na">amount</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// client</span>
</span><span class='line'>  <span class="n">Money</span> <span class="n">balance1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Money</span><span class="o">(</span><span class="s">&quot;10.0&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Money</span> <span class="n">balance2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Money</span><span class="o">(</span><span class="s">&quot;6.0&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">balance1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">balance2</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在,不再是去访问一个值了,Money类已经拥有自我提升的责任(能力)了.现在这种方式无论你以后怎么改变amount的数据类型,都不会影响到代码的调用者了.其实这里,已不单只是数据被封装起来,它存储的数据和与它相关联的存在的所有事实也被封装起来了.(这里有点哲学)</p>

<h2>结论</h2>

<p>与直接暴露变量相比,使用访问方法去限制对变量的直接访问应该是优先考虑的.但是,每一个变量都加上getter和setter方法就有点矫枉过正了,我们还是要根据实际情况做出适当的决策.因为有时你可能只是需要一个又隆又哑的数据对象而已.访问方法只有在实际需要的情况下才去使用.一个类应该暴露一个粒度更粗的行为接口,这个行为接口要能恰如其分地表达它当且的状态,而不是把一堆状态的集合暴露出来,随意让人操作.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The_docker_user_guide]]></title>
    <link href="http://youngjd.com/blog/2014/07/20/the-docker-user-guide/"/>
    <updated>2014-07-20T19:29:31+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/20/the-docker-user-guide</id>
    <content type="html"><![CDATA[<p>没翻译完</p>

<!-- more -->


<h3>Docker用户指南</h3>

<p>在介绍篇中你已经了解了什么事Docker和如何利用它来工作。在这篇指南我们将带着你学习
使用Docker和如何把它集成到你的环境中的基础知识。</p>

<p>我们将指导你如何使用Docker：</p>

<ul>
<li>使用的应用Docker化</li>
<li>运行你自己的容器</li>
<li>建立Docker的镜像</li>
<li>分享你的Docker镜像</li>
<li>还有更多</li>
</ul>


<p>我们把这个指南分成了几个主要的部分来让你了解Docker的生命周期</p>

<h3>让我们开始学习Docker Hub</h3>

<p>如何使用Docker Hub?
Docker Hub是Docker中心。它存放公共的Docke镜像并提供服务来帮助你建立和管理你的Docker环境。想了解更多：
请阅读 (User Docker Hub)[]</p>

<h3>让你的应用Docker起来：A &ldquo;Hello world&rdquo;</h3>

<p>如何在容器内部运行应用?</p>

<p>Docker提供了一个基于容器的虚拟化平台来运行你的应用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install-jdk-on-ubuntu]]></title>
    <link href="http://youngjd.com/blog/2014/07/16/install-jdk-on-ubuntu/"/>
    <updated>2014-07-16T14:04:43+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/16/install-jdk-on-ubuntu</id>
    <content type="html"><![CDATA[<blockquote><p>利用对立想法构建新的解决方案的思考者，与那些每次只考虑一个模式的人相比，具有更大的内在优势。&mdash;&mdash;马丁<br/>
马丁发现，最成功的领导者“欢迎混乱”。他们允许复杂性的存在，至少在寻找解决方案时如此，因为复杂性是创造性机会最可靠的来源。&mdash;&mdash; <a href="http://book.douban.com/subject/6522698/">《ideo,设计改变一切》</a></p></blockquote>

<!-- more -->


<hr />

<br>


<h3>Install jdk7 on ubuntu step by step</h3>

<h4>1. Unpack install package</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo tar xvzf jdk-7u51-linux-x64.gz</span></code></pre></td></tr></table></div></figure>


<h4>2. Set environment.</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'>* JAVA_HOME=/usr/local/jdk7
</span><span class='line'>* PATH=$PATH:$HOME/bin:$JAVA_HOME/bin
</span><span class='line'>* export JAVA_HOME
</span><span class='line'>* export PATH
</span><span class='line'>**/
</span><span class='line'>sudo vi /etc/profile</span></code></pre></td></tr></table></div></figure>


<h4>3. Inform system where jdk7 located</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo update-alternatives --install "/usr/bin/java" "java" "/usr/local/jdk7/bin/java" 1
</span><span class='line'>sudo update-alternatives --install "/usr/bin/javac" "javac" "/usr/local/jdk7/bin/javac" 1
</span><span class='line'>sudo update-alternatives --install "/usr/bin/javaws" "javaws" "/usr/local/jdk7/bin/javaws" 1</span></code></pre></td></tr></table></div></figure>


<h4>4. Set jdk7 to be the default jdk</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo update-alternatives --set java /usr/local/jdk7/bin/java
</span><span class='line'>sudo update-alternatives --set javac /usr/local/jdk7/bin/javac
</span><span class='line'>sudo update-alternatives --set javaws /usr/local/jdk7/bin/javaws</span></code></pre></td></tr></table></div></figure>


<h4>5. Apply /etc/profile</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source /etc/profile</span></code></pre></td></tr></table></div></figure>


<h4>6. Check.</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -version
</span><span class='line'>javac -version</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-webflow]]></title>
    <link href="http://youngjd.com/blog/2014/07/15/spring-webflow/"/>
    <updated>2014-07-15T13:31:52+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/15/spring-webflow</id>
    <content type="html"><![CDATA[<blockquote><p>通过判例可以迅速灵活地反映社会发展对法律调整提出的不同要求，及时确立合乎社会需要的法律规范。成文法考虑的是立法时的社会价值标准，而不是案件发生时的社会价值标准，因此，只要法律没有改变，不管现实的价值标准同立法时的价值标准发生怎样的冲突，都只能依照法律的规定处理案件。<br/>
&mdash;&mdash; <a href="http://book.douban.com/subject/1391975/">《普通法与自由主义理论:柯克霍布斯及美国宪政主义之诸源头》</a></p></blockquote>

<!-- more -->


<p>这篇博客先从宏观上认识spring-webflow。主要了解如何定义一个简单的流程。</p>

<hr />

<br>


<h3>元素</h3>

<h4>1. flow</h4>

<p>流程节点，是一个流程中的根节点元素，作为整个流程的输入，流程的所有状态都要定义在这个节点的内部。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;flow</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/webflow&quot;</span>
</span><span class='line'>      <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>      <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/webflow</span>
</span><span class='line'><span class="s">                          http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/flow&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2. view-state</h4>

<p>视图状态节点，用于定义流程中渲染页面的一个步骤。一般约定一个视图状态的id映射实际页面文件的id(文件名)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;view-state</span> <span class="na">id=</span><span class="s">&quot;enterBookingDetails&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3. transition</h4>

<p>状态转换节点，用于处理发生在状态内的事件。transitions会驱动页面的导航。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;view-state</span> <span class="na">id=</span><span class="s">&quot;enterBookingDetails&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- 当接收到submit事件后，流程就会从enterBookingDetails状态跳转到reviewBooking状态 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;transition</span> <span class="na">on=</span><span class="s">&quot;submit&quot;</span> <span class="na">to=</span><span class="s">&quot;reviewBooking&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/view-state&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>4. end-state</h4>

<p>结束状态节点，作为一个流程的输出。当流程转换到end-state，则会终止流程并返回输出。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;end-state</span> <span class="na">id=</span><span class="s">&quot;bookingCancelled&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<br>


<p>参考链接</p>

<ul>
<li><a href="http://docs.spring.io/spring-webflow/docs/2.4.0.RELEASE/reference/html/defining-flows.html">spring-webflow</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown]]></title>
    <link href="http://youngjd.com/blog/2014/07/14/markdown/"/>
    <updated>2014-07-14T17:06:40+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/14/markdown</id>
    <content type="html"><![CDATA[<blockquote><p>所谓设计就是，以非现有逻辑的逻辑，解决现有逻辑不能解决的问题。 &mdash; <a href="http://baike.baidu.com/view/548853.htm?fr=aladdin">蒋友柏</a></p></blockquote>

<!--More-->


<hr />

<br>


<p>这篇文章主要记录Markdown的基础语法。</p>

<blockquote><p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。&mdash; <a href="http://zh.wikipedia.org/wiki/Markdown">wikipedia</a></p></blockquote>

<h2>标题</h2>

<pre><code># 这是标题1
## 这是标题2
### 这是标题3
###### 这是标题6
</code></pre>

<h2>引用</h2>

<pre><code>&gt; 这是引用
&gt; 还是引用
&gt; 也是引用
</code></pre>

<h2>清单</h2>

<pre><code>* 鼠标
* 键盘
* 耳机
</code></pre>

<h2>链接</h2>

<pre><code>[链接名](url)
</code></pre>

<hr />

<br>


<p>参考链接</p>

<ul>
<li><a href="http://markdown.tw/">http://markdown.tw/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tyler's WARNING]]></title>
    <link href="http://youngjd.com/blog/2014/07/13/first-blog/"/>
    <updated>2014-07-13T16:26:55+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/13/first-blog</id>
    <content type="html"><![CDATA[<blockquote><p>WARNING<br>
If you are reading this then this warning is for you. <br>
Every word you read of this useless fine print is another second off you life. <br>
Do not you have other thing to do? <br>
Is your life so empty that you honestly can&rsquo;t think of a better way to spend these moments？ <br>
Or are you so impressed with authority that you give respect and credence to all who claim it？Do you read everything you are supposed read？ <br>
Do you think everything you are supposed think？ <br>
Buy what you are told you should want？ <br>
Get out of your apartment. Meet a member of the opposite sex. <br>
Stop the excessive shopping and masturbation. <br>
Quit your job. Start a fight. Prove you are alive. <br>
If you do not claim your humanity you will become a statistic. <br>
You have been warned&hellip;&hellip; <br>
Tyler.  &mdash;<a href="http://movie.douban.com/subject/1292000/">《搏击俱乐部》</a></p></blockquote>

<!--More-->

]]></content>
  </entry>
  
</feed>
