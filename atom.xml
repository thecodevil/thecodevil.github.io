<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[battousai's blog]]></title>
  <link href="http://youngjd.com/atom.xml" rel="self"/>
  <link href="http://youngjd.com/"/>
  <updated>2016-06-25T12:15:30+08:00</updated>
  <id>http://youngjd.com/</id>
  <author>
    <name><![CDATA[battousai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux安装ruby,rubygem,bundle及redis插件]]></title>
    <link href="http://youngjd.com/blog/2016/06/25/setup-ruby/"/>
    <updated>2016-06-25T10:42:52+08:00</updated>
    <id>http://youngjd.com/blog/2016/06/25/setup-ruby</id>
    <content type="html"><![CDATA[<blockquote><p>人生有一百次谨小慎微，你要有一次拍案而起；人生有一百次放浪形骸，也要认真的爱一次；人生有一百次不越雷池一步，你也要潇洒走一回</p></blockquote>

<!-- more -->


<hr />

<br>


<h3>安装ruby</h3>

<h4>1. 到ruby官网下载页面 <a href="https://www.ruby-lang.org/zh_cn/downloads/%EF%BC%8C">https://www.ruby-lang.org/zh_cn/downloads/%EF%BC%8C</a> 找到最新的版本，复制下载链接</h4>

<h4>2. wget <a href="https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.1.tar.gz%EF%BC%88%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%EF%BC%89">https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.1.tar.gz%EF%BC%88%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%EF%BC%89</a></h4>

<h4>3. 解压 tar -zxvpf ruby-2.3.1.tar.gz</h4>

<h4>4. su &ndash;</h4>

<h4>5. cd ruby-2.3.1/</h4>

<h4>6. /configure  &mdash;prefix=/usr/local/ruby</h4>

<h4>7. make &amp;&amp; make install</h4>

<h4>8. export PATH=/usr/local/ruby/bin:$PATH</h4>

<h3>安装rubygem</h3>

<h4>1. 到rubygem 官网<a href="https://rubygems.org/pages/download">https://rubygems.org/pages/download</a> 复制最新下载链接</h4>

<h4>2. 下载rubygem wget <a href="https://rubygems.org/rubygems/rubygems-2.6.4.zip">https://rubygems.org/rubygems/rubygems-2.6.4.zip</a></h4>

<h4>3. unzip rubygems-2.6.4.zip</h4>

<h4>4. cd ruby-2.3.1/</h4>

<h4>5. ruby setup.rb</h4>

<h3>安装bundle</h3>

<h4>1. gem sources &mdash;remove <a href="https://rubygems.org/">https://rubygems.org/</a></h4>

<h4>2. gem sources &mdash;add <a href="https://ruby.taobao.org/">https://ruby.taobao.org/</a></h4>

<h4>3. gem sources (查看确认镜像)</h4>

<h4>4. gem install bundler</h4>

<h3>安装redis-audit</h3>

<h4>1. bundle install redis-audit</h4>

<h4>2. bundle exec ruby redis-audit.rb 127.0.0.1 6379 0 10000</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring_message_converter]]></title>
    <link href="http://youngjd.com/blog/2014/07/27/spring-message-converter/"/>
    <updated>2014-07-27T23:21:19+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/27/spring-message-converter</id>
    <content type="html"><![CDATA[<blockquote><p>与其说星巴克是在卖咖啡，不如说是在卖预先定制好的体验。如果考虑星巴克顾客实际消费的产品，就会发现咖啡其实并不是关键产品。实际上，星巴克希望自己成为你的另一个家。星巴克在其2004年的年报中解释道，公司的目标是成为人们除了家庭和工作场所之外的第三个场所，让人在其中感到舒适并保持忠诚。&mdash; <a href="http://book.douban.com/subject/19934344/">《交互设计沉思录》</a></p></blockquote>

<!-- more -->


<hr />

<p>工作的时候有个同事提出了这样一个疑问。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- 省略了namespace --&gt;</span>
</span><span class='line'><span class="nt">&lt;beans&gt;</span>
</span><span class='line'>  <span class="nt">&lt;mvc:annotation-driven/&gt;</span>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloController</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@ResponseBody</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">JsonResult</span> <span class="nf">printWelcome</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">JsonResult</span><span class="o">(</span><span class="mi">1001</span><span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">).</span><span class="na">putData</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;imyoung&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为什么这么简单的配置，spring就能够识别到你返回的是一个Json，从配置里压根就看不到任何头绪。我头一蒙，原来自己还真没有考虑过这个问题，所以就去捣腾了一下。我还记得以前spring的COC(convention over configuration)还没有成风潮，那时候配置这个的时候，我翻阅了一下资料，有两行配置大概是这个样子的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看一下RequestMappingHandlerAdapter的源码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">RequestMappingHandlerAdapter</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">messageConverters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ByteArrayHttpMessageConverter</span><span class="o">());</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">messageConverters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">stringHttpMessageConverter</span><span class="o">);</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">messageConverters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">SourceHttpMessageConverter</span><span class="o">&lt;</span><span class="n">Source</span><span class="o">&gt;());</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">messageConverters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">AllEncompassingFormHttpMessageConverter</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>按照这种配置，RequestMappingHandlerAdapter就只是注册了4个信息转换器，清晰的看到，这里面并没有我们熟悉的mappingJacksonHttpMessageConverter。所以我们以前配置这个的时候，还会加上mappingJacksonHttpMessageConverter的bean注入。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">bean</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">property</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;messageConverters&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">list</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">ref</span> <span class="n">bean</span><span class="o">=</span><span class="s">&quot;mappingJacksonHttpMessageConverter&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">list</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">property</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">bean</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个配置方式就是以前常看到的一种比较传统的配置方式。随着spring的发展，spring越来越重视这种约定大于配置的能够减少很多代码量的风格。就会有了文章开头的那种简洁的配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- 这个配置其实还包含了很多东西,我这里写的只是其中一小项 --&gt;</span>
</span><span class='line'><span class="nt">&lt;mvc:annotation-driven/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>假如我们在配置文件里面使用了这种配置方式，来看看spring大概做了些什么。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="o">*/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MvcNamespaceHandler</span> <span class="kd">extends</span> <span class="n">NamespaceHandlerSupport</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">registerBeanDefinitionParser</span><span class="o">(</span><span class="s">&quot;annotation-driven&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">AnnotationDrivenBeanDefinitionParser</span><span class="o">());</span>
</span><span class='line'>      <span class="n">registerBeanDefinitionParser</span><span class="o">(</span><span class="s">&quot;default-servlet-handler&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">DefaultServletHandlerBeanDefinitionParser</span><span class="o">());</span>
</span><span class='line'>      <span class="n">registerBeanDefinitionParser</span><span class="o">(</span><span class="s">&quot;interceptors&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">InterceptorsBeanDefinitionParser</span><span class="o">());</span>
</span><span class='line'>      <span class="n">registerBeanDefinitionParser</span><span class="o">(</span><span class="s">&quot;resources&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">ResourcesBeanDefinitionParser</span><span class="o">());</span>
</span><span class='line'>      <span class="n">registerBeanDefinitionParser</span><span class="o">(</span><span class="s">&quot;view-controller&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">ViewControllerBeanDefinitionParser</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个类里面，init方法里面的第一行就是注册一个bean的对于annotation-driven这个定义的解释器，再来看看解释器的几个方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//我抽取了我们关注的代码</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">AnnotationDrivenBeanDefinitionParser</span> <span class="kd">implements</span> <span class="n">BeanDefinitionParser</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">BeanDefinition</span> <span class="nf">parse</span><span class="o">(</span><span class="n">Element</span> <span class="n">element</span><span class="o">,</span> <span class="n">ParserContext</span> <span class="n">parserContext</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>      <span class="n">ManagedList</span><span class="o">&lt;?&gt;</span> <span class="n">messageConverters</span> <span class="o">=</span> <span class="n">getMessageConverters</span><span class="o">(</span><span class="n">element</span><span class="o">,</span> <span class="n">source</span><span class="o">,</span> <span class="n">parserContext</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>      <span class="n">handlerAdapterDef</span><span class="o">.</span><span class="na">getPropertyValues</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;messageConverters&quot;</span><span class="o">,</span> <span class="n">messageConverters</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">ManagedList</span><span class="o">&lt;?&gt;</span> <span class="n">getMessageConverters</span><span class="o">(</span><span class="n">Element</span> <span class="n">element</span><span class="o">,</span> <span class="n">Object</span> <span class="n">source</span><span class="o">,</span> <span class="n">ParserContext</span> <span class="n">parserContext</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">jackson2Present</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">messageConverters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">createConverterDefinition</span><span class="o">(</span><span class="n">MappingJackson2HttpMessageConverter</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">source</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看到这里，我们似乎看到一些些苗头了。在getMessageConverters方法里，它会判断是否<strong>jackson2Present(全局boolean常量)</strong>，如果是，则会默认地把MappingJackson2HttpMessageConverter添加到messageConverters列表中。而MappingJackson2HttpMessageConverter就会用到jackson包去做解释json的工作了。所以现在关键就是看看<strong>jackson2Present</strong>到底是什么东东。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">jackson2Present</span> <span class="o">=</span>
</span><span class='line'>          <span class="n">ClassUtils</span><span class="o">.</span><span class="na">isPresent</span><span class="o">(</span><span class="s">&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;</span><span class="o">,</span> <span class="n">AnnotationDrivenBeanDefinitionParser</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">())</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                  <span class="n">ClassUtils</span><span class="o">.</span><span class="na">isPresent</span><span class="o">(</span><span class="s">&quot;com.fasterxml.jackson.core.JsonGenerator&quot;</span><span class="o">,</span> <span class="n">AnnotationDrivenBeanDefinitionParser</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>看到这行代码，应该就会有种&#8221;原来如此&#8221;的感觉了。它是通过判断类加载器有没有加载到与jackson相关的依赖包来决定是否把MappingJackson2HttpMessageConverter添加到转换器队列中的。接下来，我们再稍微看看它是如何写信息的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractMessageConverterMethodProcessor</span> <span class="kd">extends</span> <span class="n">AbstractMessageConverterMethodArgumentResolver</span> <span class="kd">implements</span> <span class="n">HandlerMethodReturnValueHandler</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">writeWithMessageConverters</span><span class="o">(</span><span class="n">T</span> <span class="n">returnValue</span><span class="o">,</span> <span class="n">MethodParameter</span> <span class="n">returnType</span><span class="o">,</span> <span class="n">ServletServerHttpRequest</span> <span class="n">inputMessage</span><span class="o">,</span> <span class="n">ServletServerHttpResponse</span> <span class="n">outputMessage</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">HttpMediaTypeNotAcceptableException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">MediaType</span><span class="o">&gt;</span> <span class="n">requestedMediaTypes</span> <span class="o">=</span> <span class="n">getAcceptableMediaTypes</span><span class="o">(</span><span class="n">servletRequest</span><span class="o">);</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">MediaType</span><span class="o">&gt;</span> <span class="n">producibleMediaTypes</span> <span class="o">=</span> <span class="n">getProducibleMediaTypes</span><span class="o">(</span><span class="n">servletRequest</span><span class="o">,</span> <span class="n">returnValueClass</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">selectedMediaType</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">selectedMediaType</span> <span class="o">=</span> <span class="n">selectedMediaType</span><span class="o">.</span><span class="na">removeQualityValue</span><span class="o">();</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="n">HttpMessageConverter</span><span class="o">&lt;?&gt;</span> <span class="n">messageConverter</span> <span class="o">:</span> <span class="k">this</span><span class="o">.</span><span class="na">messageConverters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">messageConverter</span><span class="o">.</span><span class="na">canWrite</span><span class="o">(</span><span class="n">returnValueClass</span><span class="o">,</span> <span class="n">selectedMediaType</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                  <span class="o">((</span><span class="n">HttpMessageConverter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;)</span> <span class="n">messageConverter</span><span class="o">).</span><span class="na">write</span><span class="o">(</span><span class="n">returnValue</span><span class="o">,</span> <span class="n">selectedMediaType</span><span class="o">,</span> <span class="n">outputMessage</span><span class="o">);</span>
</span><span class='line'>                  <span class="k">if</span> <span class="o">(</span><span class="n">logger</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Written [&quot;</span> <span class="o">+</span> <span class="n">returnValue</span> <span class="o">+</span> <span class="s">&quot;] as \&quot;&quot;</span> <span class="o">+</span> <span class="n">selectedMediaType</span> <span class="o">+</span> <span class="s">&quot;\&quot; using [&quot;</span> <span class="o">+</span>
</span><span class='line'>                              <span class="n">messageConverter</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">);</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>                  <span class="k">return</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>      
</span></code></pre></td></tr></table></div></figure>


<p>这里我只是简单地带过一下(因为我也没有太深入地去追踪到里面)。这个方法其实就是把信息转换器列表的每一个信息转换器与MediaType做一个匹配，匹配上了就用匹配的信息转换器来写返回信息。开始的时候，已经默认地带上了一些requestedMediaTypes了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">text</span><span class="o">/</span><span class="n">html</span>
</span><span class='line'><span class="n">image</span><span class="o">/</span><span class="n">gif</span>
</span><span class='line'><span class="n">image</span><span class="o">/</span><span class="n">jpeg</span>
</span><span class='line'><span class="o">*/*;</span><span class="n">q</span><span class="o">=.</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里主要看的是最后一个，wildcard（通配符形式）的。再看看producibleMediaTypes，就是要产出的mediaType是怎么生成的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">MediaType</span><span class="o">&gt;</span> <span class="nf">getProducibleMediaTypes</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">returnValueClass</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">MediaType</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">MediaType</span><span class="o">&gt;();</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="n">HttpMessageConverter</span><span class="o">&lt;?&gt;</span> <span class="n">converter</span> <span class="o">:</span> <span class="n">messageConverters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">converter</span><span class="o">.</span><span class="na">canWrite</span><span class="o">(</span><span class="n">returnValueClass</span><span class="o">,</span> <span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">result</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">converter</span><span class="o">.</span><span class="na">getSupportedMediaTypes</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>它主要是通过判断你的返回值的类型去作判断的。我这里的例子用的是下面这个返回类</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JsonResult</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">code</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">msg</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>spring会用一系列的方法去判断当前这个converter是否能以返回值的类型来正确输出(校验很多，没细看，大家可以去研究一下，反正大概就是这个样子了)。如果可以就把这个转换器的自身的SupportedMediaTypes加入到producibleMediaTypes中。后面还会再循环判断一次，但后面的判断是，一旦遇到了合适的转换器就会使用它来写返回信息。假如后面还有与producibleMediaTypes匹配的converter，就被忽略了(这里会有一个简单的默认排序和优先规则在这里)。</p>

<p>时间仓促，讲得比较粗略，这篇文章以后还会继续完善。希望文章对大家有所帮助。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ibatis_faq]]></title>
    <link href="http://youngjd.com/blog/2014/07/25/ibatis-faq/"/>
    <updated>2014-07-25T13:04:05+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/25/ibatis-faq</id>
    <content type="html"><![CDATA[<blockquote><p>怎样表述一个命题才算是科学的？按照证伪派，它必须有可能被证明是错误的。
比如“所有的乌鸦都是黑的”，那么你只要找到一只不是黑色的乌鸦，就可以证明这
个命题的错误，因此这个命题没有问题。相反，如果非要“证实”才接受这个论断的
话，那可就困难了，而且实际上是不可能的！除非你把所有的乌鸦都抓来看过，但你
又怎么能知道你已经抓尽了天下所有的乌鸦呢？ &mdash; <a href="http://book.douban.com/subject/1467022/">《上帝掷骰子吗》</a></p></blockquote>

<!-- more -->


<hr />

<br>


<h2>ibatis中#与$的区别</h2>

<p>案例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/** </span>
</span><span class='line'><span class="cm">* Spring Controller </span>
</span><span class='line'><span class="cm">* 访问的url -&gt; http://localhost:8080/promotions?start=1&amp;limit=0</span>
</span><span class='line'><span class="cm">**/</span>
</span><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">JsonResult</span> <span class="nf">list</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">Promotion</span><span class="o">&gt;</span> <span class="n">promotions</span> <span class="o">=</span> <span class="n">promotionMapper</span><span class="o">.</span><span class="na">list</span><span class="o">(</span><span class="n">params</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">// remaining code here</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* Mapper接口</span>
</span><span class='line'><span class="cm">**/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PromotionMapper</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Promotion</span><span class="o">&gt;</span> <span class="nf">list</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">params</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;list&quot;</span> <span class="na">resultType=</span><span class="s">&quot;Promotion&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  SELECT id, productId, imgUrls
</span><span class='line'>  FROM limitedtimediscount WHERE status = 1 AND endDate &gt;= now()
</span><span class='line'>  ORDER BY beginDate DESC
</span><span class='line'>  <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&quot;start != null and limit != null&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      LIMIT #{start}, #{limit}
</span><span class='line'>  <span class="nt">&lt;/if&gt;</span>
</span><span class='line'><span class="nt">&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码中，我用了#号来获取map参数集合中的对应的start和limit值。运行报错</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>### The error may involve defaultParameterMap
</span><span class='line'>### The error occurred while setting parameters
</span><span class='line'>### SQL: SELECT id, productId, imgUrls         FROM limitedtimediscount WHERE status = 1 AND endDate &gt;= now()  ORDER BY beginDate DESC  LIMIT ?, ?
</span><span class='line'>### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#39;&#39;1&#39;, &#39;0&#39;&#39; at line 5
</span><span class='line'>; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#39;&#39;1&#39;, &#39;0&#39;&#39; at line 5
</span></code></pre></td></tr></table></div></figure>


<p>从log可以看出，我传进来的1和0被当成了字符串&#8217;1&#8217;和&#8217;0&#8217;了，在mysql limit的语法中，这显然是错误的。
这时候我想到的是能不能转型，所以我又把sql改成下面这样子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;list&quot;</span> <span class="na">resultType=</span><span class="s">&quot;Promotion&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  SELECT id, productId, imgUrls
</span><span class='line'>  FROM limitedtimediscount WHERE status = 1 AND endDate &gt;= now()
</span><span class='line'>  ORDER BY beginDate DESC
</span><span class='line'>  <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&quot;start != null and limit != null&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      LIMIT #{start, javaType=int}, #{limit, javaType=int}
</span><span class='line'>  <span class="nt">&lt;/if&gt;</span>
</span><span class='line'><span class="nt">&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行后又报了不一样的错误</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>### Error querying database.  Cause: java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer
</span><span class='line'>### The error may exist in sqlmap/PromotionMapper.xml
</span><span class='line'>### The error may involve defaultParameterMap
</span><span class='line'>### The error occurred while setting parameters
</span><span class='line'>### SQL: SELECT id, productId, imgUrls         FROM limitedtimediscount WHERE status = 1 AND endDate &gt;= now()         ORDER BY beginDate DESC                       LIMIT ?, ?
</span><span class='line'>### Cause: java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer
</span></code></pre></td></tr></table></div></figure>


<p>这次是说String不能转换成Integer
接着我在网上搜索资料，找到了这么一篇<a href="http://shenzhenchufa.blog.51cto.com/730213/254561">文章</a>，哦，原来ibatis中#和$是不一样的，引用原文的话</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>1.#是把传入的数据当作字符串，如#field#传入的是id,则sql语句生成是这样，order by &quot;id&quot;,这当然会报错.
</span><span class='line'>2.$传入的数据直接生成在sql里，如#field#传入的是id,则sql语句生成是这样，order by id, 这就对了.
</span></code></pre></td></tr></table></div></figure>


<p>因此，只要把#{start}, #{limit}改成${start}, ${limit}就可以返回正确的结果。但在这个案例中，还存在另外一个问题。根据原文提到的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>$方式一般用于传入数据库对象．例如传入表名.
</span><span class='line'>#方式一般用于传入插入/更新的值或查询/删除的where条件
</span></code></pre></td></tr></table></div></figure>


<p>他的说法我基本认同，因此在我的案例中使用$解决问题只是一个trick，我觉得还是不够科学。下面我写了几行代码验证了几个基础知识</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;();</span>
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;2&quot;</span><span class="o">,</span> <span class="s">&quot;2&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;3&quot;</span><span class="o">,</span> <span class="mf">2.1</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;---------------check int--------------&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;1 instanceof Integer:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">Integer</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;1 instanceof String:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;1 instanceof Object:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">Object</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;---------------check string--------------&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&#39;2&#39; instanceof Double:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;2&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&#39;2&#39; instanceof Integer:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;2&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">Integer</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&#39;2&#39; instanceof Object:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;2&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">Object</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;---------------check double--------------&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;2.1 instanceof Double:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;3&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">Double</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;2.1 instanceof Integer:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;3&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">Integer</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;2.1 instanceof String:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;3&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;2.1 instanceof Object:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;3&quot;</span><span class="o">)</span> <span class="k">instanceof</span> <span class="n">Object</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nl">output:</span>
</span><span class='line'><span class="o">---------------</span><span class="n">check</span> <span class="kt">int</span><span class="o">--------------</span>
</span><span class='line'><span class="mi">1</span> <span class="k">instanceof</span> <span class="nl">Integer:</span><span class="kc">true</span>
</span><span class='line'><span class="mi">1</span> <span class="k">instanceof</span> <span class="nl">String:</span><span class="kc">false</span>
</span><span class='line'><span class="mi">1</span> <span class="k">instanceof</span> <span class="nl">Object:</span><span class="kc">true</span>
</span><span class='line'>
</span><span class='line'><span class="o">---------------</span><span class="n">check</span> <span class="n">string</span><span class="o">--------------</span>
</span><span class='line'><span class="s">&quot;2&quot;</span> <span class="k">instanceof</span> <span class="nl">Double:</span><span class="kc">true</span>
</span><span class='line'><span class="s">&quot;2&quot;</span> <span class="k">instanceof</span> <span class="nl">Integer:</span><span class="kc">false</span>
</span><span class='line'><span class="s">&quot;2&quot;</span> <span class="k">instanceof</span> <span class="nl">Object:</span><span class="kc">true</span>
</span><span class='line'>
</span><span class='line'><span class="o">---------------</span><span class="n">check</span> <span class="kt">double</span><span class="o">--------------</span>
</span><span class='line'><span class="mf">2.1</span> <span class="k">instanceof</span> <span class="nl">Double:</span><span class="kc">true</span>
</span><span class='line'><span class="mf">2.1</span> <span class="k">instanceof</span> <span class="nl">Integer:</span><span class="kc">false</span>
</span><span class='line'><span class="mf">2.1</span> <span class="k">instanceof</span> <span class="nl">String:</span><span class="kc">false</span>
</span><span class='line'><span class="mf">2.1</span> <span class="k">instanceof</span> <span class="nl">Object:</span><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">JsonResult</span> <span class="nf">list</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;start instanceof Integer:&quot;</span> <span class="o">+</span> <span class="n">params</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;start&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;start instanceof String:&quot;</span> <span class="o">+</span> <span class="n">params</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;start&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="c1">// remaining code here</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nl">output:</span>
</span><span class='line'><span class="n">start</span> <span class="k">instanceof</span> <span class="nl">Integer:</span><span class="kc">false</span>
</span><span class='line'><span class="n">start</span> <span class="k">instanceof</span> <span class="nl">String:</span><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>没写完&hellip;&hellip;&hellip;&hellip;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java: Getters and Setters]]></title>
    <link href="http://youngjd.com/blog/2014/07/25/java-getters-and-setters/"/>
    <updated>2014-07-25T00:58:11+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/25/java-getters-and-setters</id>
    <content type="html"><![CDATA[<blockquote><p>我不在创业，就在去创业的路上 —— <a href="http://baike.baidu.com/view/1737286.htm?fr=aladdin">冯大辉</a> <a href="http://book.douban.com/subject/25800616/">《创业时，我们在知乎聊什么》</a></p></blockquote>

<!-- more -->


<hr />

<br>


<p>本文翻译自<a href="http://java.dzone.com/articles/getter-setter-use-or-not-use">http://java.dzone.com/articles/getter-setter-use-or-not-use</a></p>

<br>


<p>主要谈到Java的setter和getter方法.翻译内容不完全直译,带有个人感情,请读者冷静.</p>

<br>


<blockquote><p>我们为什么要把实例变量保持私有呢?因为我们并不希望其他的类过度地依赖它们,并且我们不希望它们会被随意的更改.为什么很多程序员在用IDE编写程序的时候,都会不假思索,娴熟地利用快捷键自动生成getter和setter方法,并且这些setter和getter方法并没有特殊的实现,他们用这种形式去暴露私有变量,这样的话,那跟直接设置成public有什么区别呢?</p></blockquote>

<h2>Accessor methods(访问方法)</h2>

<p>Accessor(通常也称之为getter和setter方法)是一种让你能够读取和修改对象的实例变量的一种手段或方法.</p>

<h2>为什么要使用Accessors呢?</h2>

<p>使用Accessors确实比直接暴露类的属性更好一些.使用Getter和Setter似乎也能够使得API更加稳定.举例来说,考虑有这么一个类,它有一个公共变量,并且这个公共变量能够被其他的类访问.过了一阵子,你想在能够获取和读取变量的同时额外添加一些业务逻辑.这就会直接影响到API的调用者了.所以这个变量的任何变更都会要求依赖到它的每个类作出相应的变更.相反,使用访问方法,能够简单地在以后添加诸如数据缓存，延迟初始化等的逻辑。此外,一旦一个属性被触发更新事件,如果新的值不同于之前的值.所有使用get方法获取值的类都能无缝对接。(这段翻译得不好哇)</p>

<h2>我们应该把所有的属性都加上Accessor方法吗?</h2>

<p>我们都知道,属性有好几个访问修饰符,如public,pakcage,private.对于添加访问方法,直接暴露属性能带来更少的视觉上的混乱感,这种感觉在定义类和客户端使用的时候也尤其明显.</p>

<blockquote><p>如果一个类是包内私有的或者是一个私有的内部类,直接暴露(不添加访问方法)其实并不是错的&mdash;这里假设已经很好地抽象了这个类的行为.(这里不知道怎么翻译)</p></blockquote>

<p>这些代码其实已经被限定在该类所在包的作用域之内了,调用端代码也被绑定到了类的内部表现中.我们可以变更它而不用修改包外面的任何代码.并且,对于内部类这种情况,作用域范围内的变更都已经被严格限制在包裹类中了.(这段也不好翻译)</p>

<p>另外使用public来设计的例子还有<a href="http://baike.baidu.com/view/209603.htm">JavaSpace</a>的entry objects.Ken Arnold描述了他们的历程,来阐明他们为什么会选择public而不是get和set方法.</p>

<blockquote><p>当今很多时候都会让人很烦心,因为他们都被告诉不要去使用public,public字段并不是一种好的做法.并且很多时候,人们都变得教条主义了.但是我们并没有被教条束缚住.规则应该是由它的理由的.但是私有性的规则并不适合我们这种特殊的情况.这确实是一个罕见的特殊情况.我也经常告诉人们,不要设置对象的属性为public,但例外总是存在的.我们这个就是例外,因为定义它为一个属性更见简单和安全.我们常回过头问自己：为什么要这样规定?这些规定是否总是适用?至少我们的情况并不适用.</p></blockquote>

<h2>私有属性 + 公共访问方法 == 封装</h2>

<p>考虑一下这个例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通常上面的代码被认为是不好的,因为它违背了封装原则,一个替代的方法是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setA</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">=</span><span class="n">a</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getA</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">a</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有人认为这就是对属性的封装.但是你真的认为它就是真正意义上的封装了吗?</p>

<p>实际上,getter和setter对于封装性一点意义都没有.在上面的代码中,加上了getter和setter之后,内部的数据也并没有比直接暴露(public)属性获得更好的隐蔽性和封装性.其它的对象依然能够很轻易地就了解到这个类的内部信息.这个类的变更能够或多或少地对依赖其的类产生波动(影响)并迫使他们也作出相应的变更.以这种方式去使用getter和setter,其实也是打破了封装性.一个比较确切的良好的封装类应该是没有setter,最好也没有getter方法.相比于直接访问一个类来获取数据,然后计算它,再重新把计算好的值赋值给这个类(哇靠,啰不啰嗦啊),其实还不如(更应该)由这个类本身去承担计算的责任,并返回计算后的结果.</p>

<p>再来看看下面这个例子吧,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Screens</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Map</span> <span class="n">screens</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Map</span> <span class="nf">getScreens</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">screens</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setScreens</span><span class="o">(</span><span class="n">Map</span> <span class="n">screens</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">screens</span> <span class="o">=</span> <span class="n">screens</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// remaining code here</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们需要一个特别一点的screen,那我们就写成下面这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Screen</span> <span class="n">s</span> <span class="o">=</span> <span class="o">(</span><span class="n">Screen</span><span class="o">)</span><span class="n">screens</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">screenId</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码有一些细节值得我们去思考</p>

<p>代码调用者需要从Map里面获得一个对象,并把它强制转换为我们需要的类型(Screen).并且,更不能忍的是,居然任何一个代码的调用者都有能力去把Screen里面的screens对象给清空掉.</p>

<p>一个替代上面如此脑残的代码的方法我认为是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Screens</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Map</span> <span class="n">screens</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Screen</span> <span class="nf">getById</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">Screen</span><span class="o">)</span> <span class="n">screens</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// remaining code here</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>像这样子,Map实例和Map内部的所有接口就都能够做到更好的隐秘性和封装性了,你认为是吗?</p>

<h2>哎,getter和setter在很多情况下都被滥用了(尤其Java)</h2>

<p>创建一个私有属性,然后娴熟地使用IDE去自动生成getter和setter的方法已经成为很多程序员的&#8221;必杀技&#8221;.这些完全没有任何意义的getter/setter代码居然比真正的业务逻辑都还有长,并且你还要去阅读(这里读者应该指单纯地看,我是不会去阅读的)这些代码一遍又一遍,即便你一点都不愿意
(所以现在的IDE自动折叠功能还是有用的).</p>

<p>所有的属性都应该保持私有,当只有把对象设置成不可变的时候,setter方法才有那么一点能够被理解.增加一个没啥必要的getter方法,揭露了类的内部信息,增加了产生耦合的可能性.</p>

<p><strong>所以啊,为了规避上述这些脑子被门缝夹过后才有可能会干出的鸟事,大伙在使用快捷键愉快地自动生成get/set方法,在妹子面前炫耀你牛A闪闪的手速之前,还是先多拍几下自己的脑袋,也许能够拍出个更美妙的封装方法也说不定哦.</strong></p>

<p>最后一个例子了,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Money</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">double</span> <span class="n">amount</span><span class="o">;</span>  
</span><span class='line'>  
</span><span class='line'>    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getAmount</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">amount</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAmount</span><span class="o">(</span><span class="kt">double</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">amount</span> <span class="o">=</span> <span class="n">amount</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="c1">//client</span>
</span><span class='line'>    <span class="n">Money</span> <span class="n">pocketMoney</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Money</span><span class="o">();</span>
</span><span class='line'>    <span class="n">pocketMoney</span><span class="o">.</span><span class="na">setAmount</span><span class="o">(</span><span class="mi">15</span><span class="n">d</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">amount</span> <span class="o">=</span> <span class="n">pocketMoney</span><span class="o">.</span><span class="na">getAmount</span><span class="o">();</span>  <span class="c1">// we know its double  </span>
</span><span class='line'>    <span class="n">pocketMoney</span><span class="o">.</span><span class="na">setAmount</span><span class="o">(</span><span class="n">amount</span> <span class="o">+</span> <span class="mi">10</span><span class="n">d</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>按照上面的逻辑,一段时间后,我们假设double类型已经不适用了,要用BigDecimal代替它,这时候,所有的的代码调用者都崩溃了(调用代码全部报错,一片红色的海洋,还能不崩溃吗?)</p>

<p>唯有重构上面那堆垃圾代码了.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Money</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Money</span><span class="o">(</span><span class="n">String</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">amount</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">Money</span> <span class="n">toAdd</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">amount</span> <span class="o">=</span> <span class="n">amount</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">toAdd</span><span class="o">.</span><span class="na">amount</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// client</span>
</span><span class='line'>  <span class="n">Money</span> <span class="n">balance1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Money</span><span class="o">(</span><span class="s">&quot;10.0&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Money</span> <span class="n">balance2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Money</span><span class="o">(</span><span class="s">&quot;6.0&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">balance1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">balance2</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在,不再是去访问一个值了,Money类已经拥有自我提升的责任(能力)了.现在这种方式无论你以后怎么改变amount的数据类型,都不会影响到代码的调用者了.其实这里,已不单只是数据被封装起来,它存储的数据和与它相关联的存在的所有事实也被封装起来了.(这里有点哲学)</p>

<h2>结论</h2>

<p>与直接暴露变量相比,使用访问方法去限制对变量的直接访问应该是优先考虑的.但是,每一个变量都加上getter和setter方法就有点矫枉过正了,我们还是要根据实际情况做出适当的决策.因为有时你可能只是需要一个又隆又哑的数据对象而已.访问方法只有在实际需要的情况下才去使用.一个类应该暴露一个粒度更粗的行为接口,这个行为接口要能恰如其分地表达它当且的状态,而不是把一堆状态的集合暴露出来,随意让人操作.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The_docker_user_guide]]></title>
    <link href="http://youngjd.com/blog/2014/07/20/the-docker-user-guide/"/>
    <updated>2014-07-20T19:29:31+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/20/the-docker-user-guide</id>
    <content type="html"><![CDATA[<p>没翻译完</p>

<!-- more -->


<h3>Docker用户指南</h3>

<p>在介绍篇中你已经了解了什么事Docker和如何利用它来工作。在这篇指南我们将带着你学习
使用Docker和如何把它集成到你的环境中的基础知识。</p>

<p>我们将指导你如何使用Docker：</p>

<ul>
<li>使用的应用Docker化</li>
<li>运行你自己的容器</li>
<li>建立Docker的镜像</li>
<li>分享你的Docker镜像</li>
<li>还有更多</li>
</ul>


<p>我们把这个指南分成了几个主要的部分来让你了解Docker的生命周期</p>

<h3>让我们开始学习Docker Hub</h3>

<p>如何使用Docker Hub?
Docker Hub是Docker中心。它存放公共的Docke镜像并提供服务来帮助你建立和管理你的Docker环境。想了解更多：
请阅读 (User Docker Hub)[]</p>

<h3>让你的应用Docker起来：A &ldquo;Hello world&rdquo;</h3>

<p>如何在容器内部运行应用?</p>

<p>Docker提供了一个基于容器的虚拟化平台来运行你的应用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install-jdk-on-ubuntu]]></title>
    <link href="http://youngjd.com/blog/2014/07/16/install-jdk-on-ubuntu/"/>
    <updated>2014-07-16T14:04:43+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/16/install-jdk-on-ubuntu</id>
    <content type="html"><![CDATA[<blockquote><p>利用对立想法构建新的解决方案的思考者，与那些每次只考虑一个模式的人相比，具有更大的内在优势。&mdash;&mdash;马丁<br/>
马丁发现，最成功的领导者“欢迎混乱”。他们允许复杂性的存在，至少在寻找解决方案时如此，因为复杂性是创造性机会最可靠的来源。&mdash;&mdash; <a href="http://book.douban.com/subject/6522698/">《ideo,设计改变一切》</a></p></blockquote>

<!-- more -->


<hr />

<br>


<h3>Install jdk7 on ubuntu step by step</h3>

<h4>1. Unpack install package</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo tar xvzf jdk-7u51-linux-x64.gz</span></code></pre></td></tr></table></div></figure>


<h4>2. Set environment.</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'>* JAVA_HOME=/usr/local/jdk7
</span><span class='line'>* PATH=$PATH:$HOME/bin:$JAVA_HOME/bin
</span><span class='line'>* export JAVA_HOME
</span><span class='line'>* export PATH
</span><span class='line'>**/
</span><span class='line'>sudo vi /etc/profile</span></code></pre></td></tr></table></div></figure>


<h4>3. Inform system where jdk7 located</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo update-alternatives --install "/usr/bin/java" "java" "/usr/local/jdk7/bin/java" 1
</span><span class='line'>sudo update-alternatives --install "/usr/bin/javac" "javac" "/usr/local/jdk7/bin/javac" 1
</span><span class='line'>sudo update-alternatives --install "/usr/bin/javaws" "javaws" "/usr/local/jdk7/bin/javaws" 1</span></code></pre></td></tr></table></div></figure>


<h4>4. Set jdk7 to be the default jdk</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo update-alternatives --set java /usr/local/jdk7/bin/java
</span><span class='line'>sudo update-alternatives --set javac /usr/local/jdk7/bin/javac
</span><span class='line'>sudo update-alternatives --set javaws /usr/local/jdk7/bin/javaws</span></code></pre></td></tr></table></div></figure>


<h4>5. Apply /etc/profile</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source /etc/profile</span></code></pre></td></tr></table></div></figure>


<h4>6. Check.</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -version
</span><span class='line'>javac -version</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-webflow]]></title>
    <link href="http://youngjd.com/blog/2014/07/15/spring-webflow/"/>
    <updated>2014-07-15T13:31:52+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/15/spring-webflow</id>
    <content type="html"><![CDATA[<blockquote><p>通过判例可以迅速灵活地反映社会发展对法律调整提出的不同要求，及时确立合乎社会需要的法律规范。成文法考虑的是立法时的社会价值标准，而不是案件发生时的社会价值标准，因此，只要法律没有改变，不管现实的价值标准同立法时的价值标准发生怎样的冲突，都只能依照法律的规定处理案件。<br/>
&mdash;&mdash; <a href="http://book.douban.com/subject/1391975/">《普通法与自由主义理论:柯克霍布斯及美国宪政主义之诸源头》</a></p></blockquote>

<!-- more -->


<p>这篇博客先从宏观上认识spring-webflow。主要了解如何定义一个简单的流程。</p>

<hr />

<br>


<h3>元素</h3>

<h4>1. flow</h4>

<p>流程节点，是一个流程中的根节点元素，作为整个流程的输入，流程的所有状态都要定义在这个节点的内部。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;flow</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/webflow&quot;</span>
</span><span class='line'>      <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>      <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/webflow</span>
</span><span class='line'><span class="s">                          http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/flow&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2. view-state</h4>

<p>视图状态节点，用于定义流程中渲染页面的一个步骤。一般约定一个视图状态的id映射实际页面文件的id(文件名)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;view-state</span> <span class="na">id=</span><span class="s">&quot;enterBookingDetails&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3. transition</h4>

<p>状态转换节点，用于处理发生在状态内的事件。transitions会驱动页面的导航。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;view-state</span> <span class="na">id=</span><span class="s">&quot;enterBookingDetails&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- 当接收到submit事件后，流程就会从enterBookingDetails状态跳转到reviewBooking状态 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;transition</span> <span class="na">on=</span><span class="s">&quot;submit&quot;</span> <span class="na">to=</span><span class="s">&quot;reviewBooking&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/view-state&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>4. end-state</h4>

<p>结束状态节点，作为一个流程的输出。当流程转换到end-state，则会终止流程并返回输出。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;end-state</span> <span class="na">id=</span><span class="s">&quot;bookingCancelled&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<br>


<p>参考链接</p>

<ul>
<li><a href="http://docs.spring.io/spring-webflow/docs/2.4.0.RELEASE/reference/html/defining-flows.html">spring-webflow</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown]]></title>
    <link href="http://youngjd.com/blog/2014/07/14/markdown/"/>
    <updated>2014-07-14T17:06:40+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/14/markdown</id>
    <content type="html"><![CDATA[<blockquote><p>所谓设计就是，以非现有逻辑的逻辑，解决现有逻辑不能解决的问题。 &mdash; <a href="http://baike.baidu.com/view/548853.htm?fr=aladdin">蒋友柏</a></p></blockquote>

<!--More-->


<hr />

<br>


<p>这篇文章主要记录Markdown的基础语法。</p>

<blockquote><p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。&mdash; <a href="http://zh.wikipedia.org/wiki/Markdown">wikipedia</a></p></blockquote>

<h2>标题</h2>

<pre><code># 这是标题1
## 这是标题2
### 这是标题3
###### 这是标题6
</code></pre>

<h2>引用</h2>

<pre><code>&gt; 这是引用
&gt; 还是引用
&gt; 也是引用
</code></pre>

<h2>清单</h2>

<pre><code>* 鼠标
* 键盘
* 耳机
</code></pre>

<h2>链接</h2>

<pre><code>[链接名](url)
</code></pre>

<hr />

<br>


<p>参考链接</p>

<ul>
<li><a href="http://markdown.tw/">http://markdown.tw/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tyler's WARNING]]></title>
    <link href="http://youngjd.com/blog/2014/07/13/first-blog/"/>
    <updated>2014-07-13T16:26:55+08:00</updated>
    <id>http://youngjd.com/blog/2014/07/13/first-blog</id>
    <content type="html"><![CDATA[<blockquote><p>WARNING<br>
If you are reading this then this warning is for you. <br>
Every word you read of this useless fine print is another second off you life. <br>
Do not you have other thing to do? <br>
Is your life so empty that you honestly can&rsquo;t think of a better way to spend these moments？ <br>
Or are you so impressed with authority that you give respect and credence to all who claim it？Do you read everything you are supposed read？ <br>
Do you think everything you are supposed think？ <br>
Buy what you are told you should want？ <br>
Get out of your apartment. Meet a member of the opposite sex. <br>
Stop the excessive shopping and masturbation. <br>
Quit your job. Start a fight. Prove you are alive. <br>
If you do not claim your humanity you will become a statistic. <br>
You have been warned&hellip;&hellip; <br>
Tyler.  &mdash;<a href="http://movie.douban.com/subject/1292000/">《搏击俱乐部》</a></p></blockquote>

<!--More-->

]]></content>
  </entry>
  
</feed>
